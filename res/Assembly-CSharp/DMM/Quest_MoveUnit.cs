// Decompiled with JetBrains decompiler
// Type: Quest_MoveUnit
// Assembly: Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BE2A90B7-A8AB-4E1F-A9DE-BBA047493101
// Assembly location: C:\r\The-Alchemist-Code-Story\res\Assembly-CSharp_japan_dmm.dll

using System;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.UI;

#nullable disable
[AddComponentMenu("UI/Drafts/Quest_MoveUnit")]
public class Quest_MoveUnit : UIDraft
{
  [UIDraft.AutoGenerated]
  public RectTransform VirtualStick;
  [UIDraft.AutoGenerated]
  public RectTransform VirtualStickBG;
  [UIDraft.AutoGenerated]
  public RectTransform VirtualStickFG;
  [UIDraft.AutoGenerated]
  public RectTransform TouchArea;
  [UIDraft.AutoGenerated]
  public Button Btn_OK;
  [UIDraft.AutoGenerated]
  public Button Btn_Cancel;
  public Quest_MoveUnit.ButtonClickEvent OnClickOK;
  public Quest_MoveUnit.ButtonClickEvent OnClickCancel;
  [NonSerialized]
  public Transform CameraTransform;
  private bool mTouched;
  private Vector3 mTouchStart;
  private Vector3 mTouchPos;
  private Vector3 mVelocity = Vector3.zero;

  public Vector2 Velocity
  {
    get
    {
      if (!Object.op_Inequality((Object) this.CameraTransform, (Object) null))
        return Vector2.op_Implicit(this.mVelocity);
      Vector3 forward = this.CameraTransform.forward;
      Vector3 right = this.CameraTransform.right;
      forward.y = 0.0f;
      ((Vector3) ref forward).Normalize();
      right.y = 0.0f;
      ((Vector3) ref right).Normalize();
      return new Vector2((float) ((double) right.x * (double) this.mVelocity.x + (double) forward.x * (double) this.mVelocity.y), (float) ((double) right.z * (double) this.mVelocity.x + (double) forward.z * (double) this.mVelocity.y));
    }
  }

  private void OnEnable() => ((Component) this.VirtualStick).gameObject.SetActive(false);

  private void Start()
  {
    UIEventListener uiEventListener = UIEventListener.Get((Component) this.TouchArea);
    uiEventListener.onPointerUp = (UIEventListener.PointerEvent) (eventData =>
    {
      UIUtility.ToggleWindowState((Component) this.VirtualStick, false);
      this.mTouched = false;
      this.mVelocity = Vector3.zero;
    });
    uiEventListener.onPointerDown = (UIEventListener.PointerEvent) (eventData =>
    {
      RaycastResult pointerCurrentRaycast = eventData.pointerCurrentRaycast;
      GameObject gameObject = ((RaycastResult) ref pointerCurrentRaycast).gameObject;
      UIUtility.ToggleWindowState((Component) this.VirtualStick, true);
      Vector3 vector3 = gameObject.transform.InverseTransformPoint(Vector2.op_Implicit(eventData.position));
      ((RectTransform) ((Component) this.VirtualStick).transform).anchoredPosition = new Vector2(vector3.x, vector3.y);
      this.mTouchStart = vector3;
      this.mTouchPos = vector3;
      this.mTouched = true;
      this.mVelocity = Vector3.zero;
    });
    uiEventListener.onDrag = (UIEventListener.PointerEvent) (eventData => this.mTouchPos = eventData.pointerPress.transform.InverseTransformPoint(Vector2.op_Implicit(eventData.position)));
    UIUtility.AddEventListener(((Component) this.Btn_OK).gameObject, (UnityEvent) this.Btn_OK.onClick, (UIUtility.EventListener) (go =>
    {
      if (this.OnClickOK == null)
        return;
      this.OnClickOK();
    }));
    UIUtility.AddEventListener(((Component) this.Btn_Cancel).gameObject, (UnityEvent) this.Btn_Cancel.onClick, (UIUtility.EventListener) (go =>
    {
      if (this.OnClickCancel == null)
        return;
      this.OnClickCancel();
    }));
  }

  private void Update()
  {
    if (!this.mTouched)
      return;
    Vector3 vector3 = Vector3.op_Subtraction(this.mTouchPos, this.mTouchStart);
    RectTransform transform = (RectTransform) ((Component) this.VirtualStickFG).transform;
    float num = (float) (((double) ((RectTransform) ((Component) this.VirtualStickBG).transform).sizeDelta.x - (double) transform.sizeDelta.x) * 0.5);
    if ((double) ((Vector3) ref vector3).magnitude >= (double) num)
      vector3 = Vector3.op_Multiply(((Vector3) ref vector3).normalized, num);
    transform.anchoredPosition = Vector2.op_Implicit(vector3);
    this.mVelocity = Vector3.op_Multiply(vector3, 1f / num);
  }

  public void ShowButtons(bool show)
  {
    ((Component) this.Btn_OK).gameObject.SetActive(show);
    ((Component) this.Btn_Cancel).gameObject.SetActive(show);
  }

  public delegate void ButtonClickEvent();
}

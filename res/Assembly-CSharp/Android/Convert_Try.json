{
    "AbilityParam": "def AbilityParam(json):\n    this={}#AbilityParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'expr' in json:\n        this['expr'] = json['expr']\n    if 'icon' in json:\n        this['icon'] = json['icon']\n    if 'type' in json:\n        this['type'] = ENUM['EAbilityType'][json['type']]\n    if 'slot' in json:\n        this['slot'] = ENUM['EAbilitySlot'][json['slot']]\n    if 'cap' in json:\n        this['lvcap'] = Math.Max(json['cap'],1)\n    if 'fix' in json:\n        this['is_fixed'] = json['fix']!=0\n    #intlength=0\n    #stringstrArray=newstring[10]{json.skl1,json.skl2,json.skl3,json.skl4,json.skl5,json.skl6,json.skl7,json.skl8,json.skl9,json.skl10}\n    #for(intindex=0index<strArray.Length&&!string.IsNullOrEmpty(strArray)++index)\n    #++length\n    #if(length>0)\n        #intnumArray=newint[10]{json.lv1,json.lv2,json.lv3,json.lv4,json.lv5,json.lv6,json.lv7,json.lv8,json.lv9,json.lv10}\n        #this.skills=newLearningSkill[length]\n        #for(intindex=0index<length++index)\n            #this.skills=newLearningSkill()\n            #this.skills.iname=strArray\n            #this.skills.locklv=numArray\n    #this.condition_units=(string)null\n    #if(json.units!=null&&json.units.Length>0)\n        #for(intindex=0index<json.units.Length++index)\n        if 'units' in json:\n            this['condition_units'] = json['units']\n    if 'units_cnds_type' in json:\n        this['units_conditions_type'] = ENUM['EUseConditionsType'][json['units_cnds_type']]\n    #this.condition_jobs=(string)null\n    #if(json.jobs!=null&&json.jobs.Length>0)\n        #for(intindex=0index<json.jobs.Length++index)\n        if 'jobs' in json:\n            this['condition_jobs'] = json['jobs']\n    if 'jobs_cnds_type' in json:\n        this['jobs_conditions_type'] = ENUM['EUseConditionsType'][json['jobs_cnds_type']]\n    if 'birth' in json:\n        this['condition_birth'] = json['birth']\n    if 'sex' in json:\n        this['condition_sex'] = ENUM['ESex'][json['sex']]\n    if 'elem' in json:\n        this['condition_element'] = ENUM['EElement'][json['elem']]\n    if 'rmin' in json:\n        this['condition_raremin'] = json['rmin']\n    if 'rmax' in json:\n        this['condition_raremax'] = json['rmax']\n    if 'type_detail' in json:\n        this['type_detail'] = ENUM['EAbilityTypeDetail'][json['type_detail']]\n    #returntrue\nreturn this\n",
    "AchievementParam": "def AchievementParam(json):\n    this={}#AchievementParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'fields' in json:\n        this['id'] = json['fields'].id\n    if 'fields' in json:\n        this['iname'] = json['fields'].iname\n    if 'fields' in json:\n        this['ios'] = json['fields'].ios\n    if 'fields' in json:\n        this['googleplay'] = json['fields'].googleplay\n    #returntrue\nreturn this\n",
    "AIParam": "def AIParam(json):\n    this={}#AIParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'role' in json:\n        this['role'] = ENUM['RoleTypes'][json['role']]\n    if 'prm' in json:\n        this['param'] = ENUM['ParamTypes'][json['prm']]\n    if 'prmprio' in json:\n        this['param_prio'] = ENUM['ParamPriorities'][json['prmprio']]\n    #if(json.best!=0)\n        #AIParamaiParam=this\n        #aiParam.flags=(OLong)((long)aiParam.flags|1L)\n    #if(json.sneak!=0)\n        #AIParamaiParam=this\n        #aiParam.flags=(OLong)((long)aiParam.flags|2L)\n    #if(json.notmov!=0)\n        #AIParamaiParam=this\n        #aiParam.flags=(OLong)((long)aiParam.flags|4L)\n    #if(json.notact!=0)\n        #AIParamaiParam=this\n        #aiParam.flags=(OLong)((long)aiParam.flags|8L)\n    #if(json.notskl!=0)\n        #AIParamaiParam=this\n        #aiParam.flags=(OLong)((long)aiParam.flags|16L)\n    #if(json.notavo!=0)\n        #AIParamaiParam=this\n        #aiParam.flags=(OLong)((long)aiParam.flags|32L)\n    #if(json.csff!=0)\n        #AIParamaiParam=this\n        #aiParam.flags=(OLong)((long)aiParam.flags|64L)\n    #if(json.notmpd!=0)\n        #AIParamaiParam=this\n        #aiParam.flags=(OLong)((long)aiParam.flags|128L)\n    #if(json.buff_self!=0)\n        #AIParamaiParam=this\n        #aiParam.flags=(OLong)((long)aiParam.flags|256L)\n    #if(json.notprio!=0)\n        #AIParamaiParam=this\n        #aiParam.flags=(OLong)((long)aiParam.flags|512L)\n    #if(json.use_old_sort!=0)\n        #AIParamaiParam=this\n        #aiParam.flags=(OLong)((long)aiParam.flags|1024L)\n    if 'sos' in json:\n        this['escape_border'] = json['sos']\n    if 'heal' in json:\n        this['heal_border'] = json['heal']\n    if 'gems' in json:\n        this['gems_border'] = json['gems']\n    if 'buff_border' in json:\n        this['buff_border'] = json['buff_border']\n    if 'cond_border' in json:\n        this['cond_border'] = json['cond_border']\n    if 'safe_border' in json:\n        this['safe_border'] = json['safe_border']\n    if 'gosa_border' in json:\n        this['gosa_border'] = json['gosa_border']\n    if 'notsup_hp' in json:\n        this['DisableSupportActionHpBorder'] = json['notsup_hp']\n    if 'notsup_num' in json:\n        this['DisableSupportActionMemberBorder'] = json['notsup_num']\n    #this.SkillCategoryPriorities=(SkillCategory)null\n    #this.BuffPriorities=(ParamTypes)null\n    #this.ConditionPriorities=(EUnitCondition)null\n    #if(json.skil_prio!=null)\n        #for(intindex=0index<json.skil_prio.Length++index)\n        if 'skil_prio' in json:\n            this['SkillCategoryPriorities'] = ENUM['SkillCategory'][json['skil_prio']]\n    #if(json.buff_prio!=null)\n        #for(intindex=0index<json.buff_prio.Length++index)\n        if 'buff_prio' in json:\n            this['BuffPriorities'] = ENUM['ParamTypes'][json['buff_prio']]\n    #if(json.cond_prio!=null)\n        #for(intindex=0index<json.cond_prio.Length++index)\n        if 'cond_prio' in json:\n            this['ConditionPriorities'] = ENUM['EUnitCondition'][json['cond_prio']]\n    #returntrue\nreturn this\n",
    "AppealChargeParam_": "def AppealChargeParam_(json):\n    this={}#AppealChargeParam_json)\n    #if(_json==null)\n    #thrownewInvalidJSONException()\n    if 'fields' in json:\n        this['m_AppealId'] = _json['fields'].appeal_id\n    if 'fields' in json:\n        this['m_BeforeImg'] = _json['fields'].before_img_id\n    if 'fields' in json:\n        this['m_AfterImg'] = _json['fields'].after_img_id\n    #try\n        #if(!string.IsNullOrEmpty(_json.fields.start_at))\n        if 'fields' in json:\n            this['m_StartAt'] = TimeManager.GetUnixSec)\n        #if(string.IsNullOrEmpty(_json.fields.end_at))\n        #return\n        if 'fields' in json:\n            this['m_EndAt'] = TimeManager.GetUnixSec)\n    #catch(Exceptionex)\n        #DebugUtility.LogError(ex.ToString())\nreturn this\n",
    "AppealEventMaster": "def AppealEventMaster(json):\n    this={}#AppealEventMasterjson)\n    #if(json==null)\n    #returnfalse\n    if 'fields' in json:\n        this['appeal_id'] = json['fields'].appeal_id\n    if 'fields' in json:\n        this['start_at'] = TimeManager.FromDateTime)\n    if 'fields' in json:\n        this['end_at'] = TimeManager.FromDateTime)\n    #returntrue\nreturn this\n",
    "AppealEventShopMaster": "def AppealEventShopMaster(json):\n    this={}#AppealEventShopMasterjson)\n    #if(json==null)\n    #returnfalse\n    if 'fields' in json:\n        this['appeal_id'] = json['fields'].appeal_id\n    if 'fields' in json:\n        this['start_at'] = TimeManager.FromDateTime)\n    if 'fields' in json:\n        this['end_at'] = TimeManager.FromDateTime)\n    if 'fields' in json:\n        this['priority'] = json['fields'].priority\n    if 'fields' in json:\n        this['position_chara'] = json['fields'].position_chara\n    if 'fields' in json:\n        this['position_text'] = json['fields'].position_text\n    #returntrue\nreturn this\n",
    "AppealGachaMaster": "def AppealGachaMaster(json):\n    this={}#AppealGachaMasterjson)\n    #if(json==null)\n    #returnfalse\n    if 'fields' in json:\n        this['appeal_id'] = json['fields'].appeal_id\n    if 'fields' in json:\n        this['start_at'] = TimeManager.FromDateTime)\n    if 'fields' in json:\n        this['end_at'] = TimeManager.FromDateTime)\n    if 'fields' in json:\n        this['is_new'] = json['fields'].flag_new!=0\n    #returntrue\nreturn this\n",
    "AppealLimitedShopMaster": "def AppealLimitedShopMaster(json):\n    this={}#AppealLimitedShopMasterjson)\n    #if(json==null)\n    #returnfalse\n    if 'fields' in json:\n        this['appeal_id'] = json['fields'].appeal_id\n    if 'fields' in json:\n        this['start_at'] = TimeManager.FromDateTime)\n    if 'fields' in json:\n        this['end_at'] = TimeManager.FromDateTime)\n    if 'fields' in json:\n        this['priority'] = json['fields'].priority\n    if 'fields' in json:\n        this['pos_x_chara'] = json['fields'].position_chara\n    if 'fields' in json:\n        this['pos_x_text'] = json['fields'].position_text\n    #returntrue\nreturn this\n",
    "AppealQuestMaster": "def AppealQuestMaster(json):\n    this={}#AppealQuestMasterjson)\n    #if(json==null)\n    #returnfalse\n    if 'fields' in json:\n        this['appeal_id'] = json['fields'].appeal_id\n    if 'fields' in json:\n        this['start_at'] = TimeManager.FromDateTime)\n    if 'fields' in json:\n        this['end_at'] = TimeManager.FromDateTime)\n    #returntrue\nreturn this\n",
    "ArchiveParam": "def ArchiveParam(json):\n    this={}#ArchiveParamjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'area_iname' in json:\n        this['area_iname'] = json['area_iname']\n    if 'area_iname_multi' in json:\n        this['area_iname_multi'] = json['area_iname_multi']\n    if 'type' in json:\n        this['type'] = ENUM['ArchiveTypes'][json['type']]\n    #this.begin_at=DateTime.MinValue\n    #if(!string.IsNullOrEmpty(json.begin_at))\n    #DateTime.TryParse(json.begin_at,outthis.begin_at)\n    #this.end_at=DateTime.MaxValue\n    #if(!string.IsNullOrEmpty(json.end_at))\n    #DateTime.TryParse(json.end_at,outthis.end_at)\n    #this.keys=newList<KeyItem>()\n    #if(!string.IsNullOrEmpty(json.keyitem1)&&json.keynum1>0)\n    #this.keys.Add(newKeyItem()\n        #iname=json.keyitem1,\n        #num=json.keynum1\n        #})\n        if 'keytime' in json:\n            this['keytime'] = json['keytime']\n        if 'unit1' in json:\n            this['unit1'] = json['unit1']\n        if 'unit2' in json:\n            this['unit2'] = json['unit2']\n        #if(json.items==null)\n        #return\n        if 'items' in json:\n            this['items'] = newArchiveItemsParam[json['items'].Length]\n        #intindex=0\n        #foreach(JSON_ArchiveItemsParamarchiveItemsParaminjson.items)\n            #this.items=newArchiveItemsParam()\n            #this.items.type=(ArchiveItemTypes)archiveItemsParam.type\n            #this.items[index++].id=archiveItemsParam.id\n    #\n    #publicboolIsAvailable()\n        #DateTimeserverTime=TimeManager.ServerTime\n        #if(this.begin_at<=serverTime)\n        #returnserverTime<this.end_at\n        #returnfalse\nreturn this\n",
    "ArtifactParam": "def ArtifactParam(json):\n    this={}#ArtifactParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'spec' in json:\n        this['spec'] = json['spec']\n    if 'asset' in json:\n        this['asset'] = json['asset']\n    if 'voice' in json:\n        this['voice'] = json['voice']\n    if 'icon' in json:\n        this['icon'] = json['icon']\n    if 'tag' in json:\n        this['tag'] = json['tag']\n    if 'type' in json:\n        this['type'] = ENUM['ArtifactTypes'][json['type']]\n    if 'rini' in json:\n        this['rareini'] = json['rini']\n    if 'rmax' in json:\n        this['raremax'] = json['rmax']\n    if 'kakera' in json:\n        this['kakera'] = json['kakera']\n    if 'maxnum' in json:\n        this['maxnum'] = json['maxnum']\n    if 'notsmn' in json:\n        this['is_create'] = json['notsmn']==0\n    #this.skills=(string)null\n    #if(json.skills!=null)\n        #for(intindex=0index<json.skills.Length++index)\n        if 'skills' in json:\n            this['skills'] = json['skills']\n    #Array.Clear((Array)this.equip_effects,0,this.equip_effects.Length)\n    if 'equip1' in json:\n        this['equip_effects'][0] = json['equip1']\n    if 'equip2' in json:\n        this['equip_effects'][1] = json['equip2']\n    if 'equip3' in json:\n        this['equip_effects'][2] = json['equip3']\n    if 'equip4' in json:\n        this['equip_effects'][3] = json['equip4']\n    if 'equip5' in json:\n        this['equip_effects'][4] = json['equip5']\n    #Array.Clear((Array)this.attack_effects,0,this.attack_effects.Length)\n    if 'attack1' in json:\n        this['attack_effects'][0] = json['attack1']\n    if 'attack2' in json:\n        this['attack_effects'][1] = json['attack2']\n    if 'attack3' in json:\n        this['attack_effects'][2] = json['attack3']\n    if 'attack4' in json:\n        this['attack_effects'][3] = json['attack4']\n    if 'attack5' in json:\n        this['attack_effects'][4] = json['attack5']\n    #this.abil_inames=(string)null\n    #this.abil_levels=(int)null\n    #this.abil_rareties=(int)null\n    #this.abil_shows=(int)null\n    #this.abil_conds=(string)null\n    #if(json.abils!=null&&json.ablvs!=null&&(json.abrares!=null&&json.abshows!=null)&&(json.abconds!=null&&json.abils.Length==json.ablvs.Length&&(json.abils.Length==json.abrares.Length&&json.abils.Length==json.abshows.Length))&&json.abils.Length==json.abconds.Length)\n        if 'abils' in json:\n            this['abil_inames'] = newstring[json['abils'].Length]\n        if 'ablvs' in json:\n            this['abil_levels'] = newint[json['ablvs'].Length]\n        if 'abrares' in json:\n            this['abil_rareties'] = newint[json['abrares'].Length]\n        if 'abshows' in json:\n            this['abil_shows'] = newint[json['abshows'].Length]\n        if 'abconds' in json:\n            this['abil_conds'] = newstring[json['abconds'].Length]\n        #for(intindex=0index<json.ablvs.Length++index)\n            if 'abils' in json:\n                this['abil_inames'] = json['abils']\n            if 'ablvs' in json:\n                this['abil_levels'] = json['ablvs']\n            if 'abrares' in json:\n                this['abil_rareties'] = json['abrares']\n            if 'abshows' in json:\n                this['abil_shows'] = json['abshows']\n            if 'abconds' in json:\n                this['abil_conds'] = json['abconds']\n    if 'kc' in json:\n        this['kcoin'] = json['kc']\n    if 'tc' in json:\n        this['tcoin'] = json['tc']\n    if 'ac' in json:\n        this['acoin'] = json['ac']\n    if 'mc' in json:\n        this['mcoin'] = json['mc']\n    if 'pp' in json:\n        this['pcoin'] = json['pp']\n    if 'buy' in json:\n        this['buy'] = json['buy']\n    if 'sell' in json:\n        this['sell'] = json['sell']\n    if 'ecost' in json:\n        this['enhance_cost'] = json['ecost']\n    if 'eqlv' in json:\n        this['condition_lv'] = json['eqlv']\n    if 'sex' in json:\n        this['condition_sex'] = ENUM['ESex'][json['sex']]\n    if 'birth' in json:\n        this['condition_birth'] = json['birth']\n    if 'elem' in json:\n        this['condition_element'] = ENUM['EElement'][json['elem']]\n    #this.condition_units=(string)null\n    #this.condition_jobs=(string)null\n    if 'eqrmin' in json:\n        this['condition_raremin'] = json['eqrmin']\n    if 'eqrmax' in json:\n        this['condition_raremax'] = json['eqrmax']\n    #if(json.units!=null&&json.units.Length>0)\n        #for(intindex=0index<json.units.Length++index)\n        if 'units' in json:\n            this['condition_units'] = json['units']\n    #if(json.jobs!=null&&json.jobs.Length>0)\n        #for(intindex=0index<json.jobs.Length++index)\n        if 'jobs' in json:\n            this['condition_jobs'] = json['jobs']\n    if 'cond_sm' in json:\n        this['CondSkillMotion'] = json['cond_sm']\n    #returntrue\nreturn this\n",
    "AwardParam": "def AwardParam(json):\n    this={}#AwardParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['id'] = json['id']\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'expr' in json:\n        this['expr'] = json['expr']\n    if 'icon' in json:\n        this['icon'] = json['icon']\n    if 'bg' in json:\n        this['bg'] = json['bg']\n    if 'txt_img' in json:\n        this['txt_img'] = json['txt_img']\n    #this.start_at=DateTime.MinValue\n    #if(!string.IsNullOrEmpty(json.start_at))\n    #DateTime.TryParse(json.start_at,outthis.start_at)\n    if 'grade' in json:\n        this['grade'] = json['grade']\n    if 'iname' in json:\n        this['hash'] = json['iname'].GetHashCode\n    if 'tab' in json:\n        this['tab'] = json['tab']\n    #returntrue\nreturn this\n",
    "BannerParam": "def BannerParam(json):\n    this={}#BannerParamjson)\n    #if(json==null)\n    #returnfalse\n    #try\n        if 'iname' in json:\n            this['iname'] = json['iname']\n        if 'type' in json:\n            this['type'] = ENUM['BannerType'][json['type']]\n        if 'sval' in json:\n            this['sval'] = json['sval']\n        if 'banr' in json:\n            this['banner'] = json['banr']\n        if 'banr_sprite' in json:\n            this['banr_sprite'] = json['banr_sprite']\n        if 'begin_at' in json:\n            this['begin_at'] = json['begin_at']\n        if 'end_at' in json:\n            this['end_at'] = json['end_at']\n        if 'priority' in json:\n            this['priority'] = json['priority']>0?json['priority']:int.MaxValue\n        if 'message' in json:\n            this['message'] = json['message']\n        if 'is_not_home' in json:\n            this['is_not_home'] = json['is_not_home']==1\n    #catch(Exceptionex)\n        #Debug.LogException(ex)\n        #returnfalse\n    #returntrue\nreturn this\n",
    "BreakObjParam": "def BreakObjParam(json):\n    this={}#BreakObjParamjson)\n    #if(json==null)\n    #return\n    if 'iname' in json:\n        this['mIname'] = json['iname']\n    if 'name' in json:\n        this['mName'] = json['name']\n    if 'expr' in json:\n        this['mExpr'] = json['expr']\n    if 'unit_id' in json:\n        this['mUnitId'] = json['unit_id']\n    if 'clash_type' in json:\n        this['mClashType'] = ENUM['eMapBreakClashType'][json['clash_type']]\n    if 'ai_type' in json:\n        this['mAiType'] = ENUM['eMapBreakAIType'][json['ai_type']]\n    if 'side_type' in json:\n        this['mSideType'] = ENUM['eMapBreakSideType'][json['side_type']]\n    if 'ray_type' in json:\n        this['mRayType'] = ENUM['eMapBreakRayType'][json['ray_type']]\n    if 'is_ui' in json:\n        this['mIsUI'] = json['is_ui']!=0\n    #this.mRestHps=(int)null\n    #if(!string.IsNullOrEmpty(json.rest_hps))\n        #stringstrArray=json.rest_hps.Split(',')\n        #if(strArray!=null&&strArray.Length!=0)\n            #this.mRestHps=newint[strArray.Length]\n            #for(intindex=0index<strArray.Length++index)\n                #intresult=0\n                #int.TryParse(strArray,outresult)\n                #this.mRestHps=result\n    if 'clock' in json:\n        this['mAliveClock'] = json['clock']\n    if 'appear_dir' in json:\n        this['mAppearDir'] = ENUM['EUnitDirection'][json['appear_dir']]\nreturn this\n",
    "BuffEffectParam": "def BuffEffectParam(json):\n    this={}#BuffEffectParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'job' in json:\n        this['job'] = json['job']\n    if 'buki' in json:\n        this['buki'] = json['buki']\n    if 'birth' in json:\n        this['birth'] = json['birth']\n    if 'sex' in json:\n        this['sex'] = ENUM['ESex'][json['sex']]\n    if 'un_group' in json:\n        this['un_group'] = json['un_group']\n    if 'elem' in json:\n        this['elem'] = Convert.ToInt32,2)\n    if 'rate' in json:\n        this['rate'] = json['rate']\n    if 'turn' in json:\n        this['turn'] = json['turn']\n    if 'chktgt' in json:\n        this['chk_target'] = ENUM['EffectCheckTargets'][json['chktgt']]\n    if 'timing' in json:\n        this['chk_timing'] = ENUM['EffectCheckTimings'][json['timing']]\n    if 'cond' in json:\n        this['cond'] = ENUM['ESkillCondition'][json['cond']]\n    #this.mIsUpBuff=(OBool)false\n    if 'up_timing' in json:\n        this['mUpTiming'] = ENUM['EffectCheckTimings'][json['up_timing']]\n    if 'app_type' in json:\n        this['mAppType'] = ENUM['EAppType'][json['app_type']]\n    if 'app_mct' in json:\n        this['mAppMct'] = json['app_mct']\n    if 'eff_range' in json:\n        this['mEffRange'] = ENUM['EEffRange'][json['eff_range']]\n    #this.mFlags=(BuffFlags)0\n    #if(json.is_up_rep!=0)\n    #this.mFlags|=BuffFlags.UpReplenish\n    #if(json.is_no_dis!=0)\n    #this.mFlags|=BuffFlags.NoDisabled\n    #if(json.is_no_bt!=0)\n    #this.mFlags|=BuffFlags.NoBuffTurn\n    #ParamTypestype1=(ParamTypes)json.type1\n    #ParamTypestype2=(ParamTypes)json.type2\n    #ParamTypestype3=(ParamTypes)json.type3\n    #ParamTypestype4=(ParamTypes)json.type4\n    #ParamTypestype5=(ParamTypes)json.type5\n    #ParamTypestype6=(ParamTypes)json.type6\n    #ParamTypestype7=(ParamTypes)json.type7\n    #ParamTypestype8=(ParamTypes)json.type8\n    #ParamTypestype9=(ParamTypes)json.type9\n    #ParamTypestype10=(ParamTypes)json.type10\n    #ParamTypestype11=(ParamTypes)json.type11\n    #intlength=0\n    #if(type1!=ParamTypes.None)\n    #++length\n    #if(type2!=ParamTypes.None)\n    #++length\n    #if(type3!=ParamTypes.None)\n    #++length\n    #if(type4!=ParamTypes.None)\n    #++length\n    #if(type5!=ParamTypes.None)\n    #++length\n    #if(type6!=ParamTypes.None)\n    #++length\n    #if(type7!=ParamTypes.None)\n    #++length\n    #if(type8!=ParamTypes.None)\n    #++length\n    #if(type9!=ParamTypes.None)\n    #++length\n    #if(type10!=ParamTypes.None)\n    #++length\n    #if(type11!=ParamTypes.None)\n    #++length\n    #if(length>0)\n        #this.buffs=newBuffEffectParam.Buff[length]\n        #intindex=0\n        #if(type1!=ParamTypes.None)\n            #this.buffs=newBuffEffectParam.Buff()\n            #this.buffs.type=type1\n            this['']\n            this['buffs']\n            if 'vini1' in json:\n                this['buffs']['value_ini'] = json['vini1']\n            this['buffs']\n            if 'vmax1' in json:\n                this['buffs']['value_max'] = json['vmax1']\n            this['buffs']\n            if 'vone1' in json:\n                this['buffs']['value_one'] = json['vone1']\n            this['buffs']\n            if 'tktag1' in json:\n                this['buffs']['tokkou'] = json['tktag1']\n            this['buffs']\n            if 'calc1' in json:\n                this['buffs']['calc'] = ENUM['SkillParamCalcTypes'][json['calc1']]\n            #++index\n        #if(type2!=ParamTypes.None)\n            #this.buffs=newBuffEffectParam.Buff()\n            #this.buffs.type=type2\n            if 'vini2' in json:\n                this['buffs']['value_ini'] = json['vini2']\n            if 'vmax2' in json:\n                this['buffs']['value_max'] = json['vmax2']\n            if 'vone2' in json:\n                this['buffs']['value_one'] = json['vone2']\n            if 'tktag2' in json:\n                this['buffs']['tokkou'] = json['tktag2']\n            if 'calc2' in json:\n                this['buffs']['calc'] = ENUM['SkillParamCalcTypes'][json['calc2']]\n            #++index\n        #if(type3!=ParamTypes.None)\n            #this.buffs=newBuffEffectParam.Buff()\n            #this.buffs.type=type3\n            if 'vini3' in json:\n                this['buffs']['value_ini'] = json['vini3']\n            if 'vmax3' in json:\n                this['buffs']['value_max'] = json['vmax3']\n            if 'vone3' in json:\n                this['buffs']['value_one'] = json['vone3']\n            if 'tktag3' in json:\n                this['buffs']['tokkou'] = json['tktag3']\n            if 'calc3' in json:\n                this['buffs']['calc'] = ENUM['SkillParamCalcTypes'][json['calc3']]\n            #++index\n        #if(type4!=ParamTypes.None)\n            #this.buffs=newBuffEffectParam.Buff()\n            #this.buffs.type=type4\n            if 'vini4' in json:\n                this['buffs']['value_ini'] = json['vini4']\n            if 'vmax4' in json:\n                this['buffs']['value_max'] = json['vmax4']\n            if 'vone4' in json:\n                this['buffs']['value_one'] = json['vone4']\n            if 'tktag4' in json:\n                this['buffs']['tokkou'] = json['tktag4']\n            if 'calc4' in json:\n                this['buffs']['calc'] = ENUM['SkillParamCalcTypes'][json['calc4']]\n            #++index\n        #if(type5!=ParamTypes.None)\n            #this.buffs=newBuffEffectParam.Buff()\n            #this.buffs.type=type5\n            if 'vini5' in json:\n                this['buffs']['value_ini'] = json['vini5']\n            if 'vmax5' in json:\n                this['buffs']['value_max'] = json['vmax5']\n            if 'vone5' in json:\n                this['buffs']['value_one'] = json['vone5']\n            if 'tktag5' in json:\n                this['buffs']['tokkou'] = json['tktag5']\n            if 'calc5' in json:\n                this['buffs']['calc'] = ENUM['SkillParamCalcTypes'][json['calc5']]\n            #++index\n        #if(type6!=ParamTypes.None)\n            #this.buffs=newBuffEffectParam.Buff()\n            #this.buffs.type=type6\n            if 'vini6' in json:\n                this['buffs']['value_ini'] = json['vini6']\n            if 'vmax6' in json:\n                this['buffs']['value_max'] = json['vmax6']\n            if 'vone6' in json:\n                this['buffs']['value_one'] = json['vone6']\n            if 'tktag6' in json:\n                this['buffs']['tokkou'] = json['tktag6']\n            if 'calc6' in json:\n                this['buffs']['calc'] = ENUM['SkillParamCalcTypes'][json['calc6']]\n            #++index\n        #if(type7!=ParamTypes.None)\n            #this.buffs=newBuffEffectParam.Buff()\n            #this.buffs.type=type7\n            if 'vini7' in json:\n                this['buffs']['value_ini'] = json['vini7']\n            if 'vmax7' in json:\n                this['buffs']['value_max'] = json['vmax7']\n            if 'vone7' in json:\n                this['buffs']['value_one'] = json['vone7']\n            if 'tktag7' in json:\n                this['buffs']['tokkou'] = json['tktag7']\n            if 'calc7' in json:\n                this['buffs']['calc'] = ENUM['SkillParamCalcTypes'][json['calc7']]\n            #++index\n        #if(type8!=ParamTypes.None)\n            #this.buffs=newBuffEffectParam.Buff()\n            #this.buffs.type=type8\n            if 'vini8' in json:\n                this['buffs']['value_ini'] = json['vini8']\n            if 'vmax8' in json:\n                this['buffs']['value_max'] = json['vmax8']\n            if 'vone8' in json:\n                this['buffs']['value_one'] = json['vone8']\n            if 'tktag8' in json:\n                this['buffs']['tokkou'] = json['tktag8']\n            if 'calc8' in json:\n                this['buffs']['calc'] = ENUM['SkillParamCalcTypes'][json['calc8']]\n            #++index\n        #if(type9!=ParamTypes.None)\n            #this.buffs=newBuffEffectParam.Buff()\n            #this.buffs.type=type9\n            if 'vini9' in json:\n                this['buffs']['value_ini'] = json['vini9']\n            if 'vmax9' in json:\n                this['buffs']['value_max'] = json['vmax9']\n            if 'vone9' in json:\n                this['buffs']['value_one'] = json['vone9']\n            if 'tktag9' in json:\n                this['buffs']['tokkou'] = json['tktag9']\n            if 'calc9' in json:\n                this['buffs']['calc'] = ENUM['SkillParamCalcTypes'][json['calc9']]\n            #++index\n        #if(type10!=ParamTypes.None)\n            #this.buffs=newBuffEffectParam.Buff()\n            #this.buffs.type=type10\n            if 'vini10' in json:\n                this['buffs']['value_ini'] = json['vini10']\n            if 'vmax10' in json:\n                this['buffs']['value_max'] = json['vmax10']\n            if 'vone10' in json:\n                this['buffs']['value_one'] = json['vone10']\n            if 'tktag10' in json:\n                this['buffs']['tokkou'] = json['tktag10']\n            if 'calc10' in json:\n                this['buffs']['calc'] = ENUM['SkillParamCalcTypes'][json['calc10']]\n            #++index\n        #if(type11!=ParamTypes.None)\n            #this.buffs=newBuffEffectParam.Buff()\n            #this.buffs.type=type11\n            if 'vini11' in json:\n                this['buffs']['value_ini'] = json['vini11']\n            if 'vmax11' in json:\n                this['buffs']['value_max'] = json['vmax11']\n            if 'vone11' in json:\n                this['buffs']['value_one'] = json['vone11']\n            if 'tktag11' in json:\n                this['buffs']['tokkou'] = json['tktag11']\n            if 'calc11' in json:\n                this['buffs']['calc'] = ENUM['SkillParamCalcTypes'][json['calc11']]\n            #intnum=index+1\n        #foreach(BuffEffectParam.Buffbuffinthis.buffs)\n            #if((int)buff.value_one!=0)\n                #this.mIsUpBuff=(OBool)true\n                #break\n    #if(json.custom_targets!=null)\n        #for(intindex=0index<json.custom_targets.Length++index)\n        if 'custom_targets' in json:\n            this['custom_targets'] = json['custom_targets']\n    #if(!string.IsNullOrEmpty(json.tag))\n        if 'tag' in json:\n            this['tags'] = json['tag'].Split\n        #if(this.tags!=null&&this.tags.Length==0)\n        #this.tags=(string)null\n    #returntrue\nreturn this\n",
    "ChallengeCategoryParam": "def ChallengeCategoryParam(json):\n    this={}#ChallengeCategoryParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    #this.begin_at.Set(json.begin_at,DateTime.MinValue)\n    #this.end_at.Set(json.end_at,DateTime.MaxValue)\n    if 'prio' in json:\n        this['prio'] = json['prio']\n    #returntrue\nreturn this\n",
    "ChapterParam": "def ChapterParam(json):\n    this={}#ChapterParamjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'expr' in json:\n        this['expr'] = json['expr']\n    if 'world' in json:\n        this['world'] = json['world']\n    if 'start' in json:\n        this['start'] = json['start']\n    if 'end' in json:\n        this['end'] = json['end']\n    if 'hide' in json:\n        this['hidden'] = json['hide']!=0\n    if 'chap' in json:\n        this['section'] = json['chap']\n    if 'banr' in json:\n        this['banner'] = json['banr']\n    if 'item' in json:\n        this['prefabPath'] = json['item']\n    if 'hurl' in json:\n        this['helpURL'] = json['hurl']\n    #this.keys=newList<KeyItem>()\n    #if(!string.IsNullOrEmpty(json.keyitem1)&&json.keynum1>0)\n    #this.keys.Add(newKeyItem()\n        #iname=json.keyitem1,\n        #num=json.keynum1\n        #})\n        #if(this.keys.Count>0)\n        if 'keytime' in json:\n            this['keytime'] = json['keytime']\n        #this.quests.Clear()\n    #\n    #publicboolIsAvailable(DateTimet)\n        #if(this.end<=0L)\n        #return!this.hidden\n        #DateTimedateTime1=TimeManager.FromUnixTime(this.start)\n        #DateTimedateTime2=TimeManager.FromUnixTime(this.end)\n        #if(dateTime1<=t)\n        #returnt<dateTime2\n        #returnfalse\n    #\n    #publicboolIsKeyQuest()\n        #if(this.keys.Count>0)\n        #return!this.m_IsArchiveQuest\n        #returnfalse\n    #\n    #publicKeyQuestTypesGetKeyQuestType()\n        #if(!this.IsKeyQuest())\n        #returnKeyQuestTypes.None\n        #returnthis.keytime!=0L?KeyQuestTypes.Timer:KeyQuestTypes.Count\n    #\n    #publicboolIsGpsQuest()\n        #if(this.quests!=null)\n            #for(intindex=0index<this.quests.Count++index)\n                #if(this.quests.type==QuestTypes.Gps)\n                #returntrue\n        #for(intindex=0index<this.children.Count++index)\n            #if(this.children.IsGpsQuest())\n            #returntrue\n        #returnfalse\n    #\n    #publicboolIsTowerQuest()\n        #if(this.quests!=null)\n            #for(intindex=0index<this.quests.Count++index)\n                #if(this.quests.type==QuestTypes.Tower||this.quests.type==QuestTypes.MultiTower)\n                #returntrue\n        #for(intindex=0index<this.children.Count++index)\n            #if(this.children.IsTowerQuest())\n            #returntrue\n        #returnfalse\n    #\n    #publicboolIsBeginnerQuest()\n        #if(this.quests!=null)\n            #for(intindex=0index<this.quests.Count++index)\n                #if(this.quests.type==QuestTypes.Beginner)\n                #returntrue\n        #for(intindex=0index<this.children.Count++index)\n            #if(this.children.IsBeginnerQuest())\n            #returntrue\n        #returnfalse\n    #\n    #publicboolIsSeiseki()\n        #if(this.quests!=null)\n            #for(intindex=0index<this.quests.Count++index)\n                #if(this.section==\"WD_SEISEKI\")\n                #returntrue\n        #for(intindex=0index<this.children.Count++index)\n            #if(this.children.IsSeiseki())\n            #returntrue\n        #returnfalse\n    #\n    #publicboolIsBabel()\n        #if(this.quests!=null)\n            #for(intindex=0index<this.quests.Count++index)\n                #if(this.section==\"WD_BABEL\")\n                #returntrue\n        #for(intindex=0index<this.children.Count++index)\n            #if(this.children.IsBabel())\n            #returntrue\n        #returnfalse\n    #\n    #publicboolIsMultiGpsQuest()\n        #if(this.quests!=null)\n            #for(intindex=0index<this.quests.Count++index)\n                #if(this.quests.type==QuestTypes.MultiGps)\n                #returntrue\n        #for(intindex=0index<this.children.Count++index)\n            #if(this.children.IsMultiGpsQuest())\n            #returntrue\n        #returnfalse\n    #\n    #publicboolIsOrdealQuest()\n        #if(this.quests!=null)\n            #for(intindex=0index<this.quests.Count++index)\n                #if(this.quests.type==QuestTypes.Ordeal)\n                #returntrue\n        #for(intindex=0index<this.children.Count++index)\n            #if(this.children.IsOrdealQuest())\n            #returntrue\n        #returnfalse\n    #\n    #publicSubQuestTypesGetSubQuestType()\n        #if(this.quests!=null&&this.quests.Count>0)\n        #returnthis.quests[0].subtype\n        #if(this.children!=null&&this.children.Count>0)\n        #returnthis.children[0].GetSubQuestType()\n        #returnSubQuestTypes.Normal\n    #\n    #publicboolHasGpsQuest()\n        #if(this.quests!=null)\n            #for(intindex=0index<this.quests.Count++index)\n                #if(this.quests.gps_enable)\n                #returntrue\n        #for(intindex=0index<this.children.Count++index)\n            #if(this.children.HasGpsQuest())\n            #returntrue\n        #returnfalse\n    #\n    #publicboolIsDateUnlock(longunixtime)\n        #for(intindex=0index<this.quests.Count++index)\n            #if(this.quests.IsDateUnlock(unixtime))\n            #returntrue\n        #returnfalse\n    #\n    #publicboolIsKeyUnlock(longunixtime)\n        #if(!this.IsKeyQuest()||!this.IsDateUnlock(unixtime))\n        #returnfalse\n        #KeyQuestTypeskeyQuestType=this.GetKeyQuestType()\n        #if(this.key_end<=0L)\n        #returnfalse\n        #switch(keyQuestType)\n            #caseKeyQuestTypes.Timer:\n            #returnunixtime<this.key_end\n            #caseKeyQuestTypes.Count:\n            #for(intindex=0index<this.quests.Count++index)\n                #if(this.quests.CheckEnableChallange())\n                #returntrue\n            #returnfalse\n            #default:\n            #returnfalse\n    #\n    #publicboolCheckHasKeyItem()\n        #for(intindex=0index<this.keys.Count++index)\n            #if(this.keys.IsHasItem())\n            #returntrue\n        #returnfalse\nreturn this\n",
    "ChargeCheckResponse": "def ChargeCheckResponse(json):\n    this={}#ChargeCheckResponsejson)\n    #if(json==null)\n    #returnfalse\n    if 'age' in json:\n        this['Age'] = json['age']\n    if 'accept_ids' in json:\n        this['AcceptIds'] = json['accept_ids']\n    if 'reject_ids' in json:\n        this['RejectIds'] = json['reject_ids']\n    #if(this.RejectIds==null)\n    #this.RejectIds=newstring[0]\n    #returntrue\nreturn this\n",
    "ChatBlackList": "def ChatBlackList(json):\n    this={}#ChatBlackListjson)\n    #if(json==null)\n    #return\n    #this.lists=(ChatBlackListParam)null\n    #if(json.blacklist!=null)\n        #for(intindex=0index<json.blacklist.Length++index)\n        if 'blacklist' in json:\n            this['lists'] = json['blacklist']\n    #else\n    #this.lists=newChatBlackListParam[0]\n    if 'total' in json:\n        this['total'] = json['total']\nreturn this\n",
    "ChatBlackListRes": "def ChatBlackListRes(json):\n    this={}#ChatBlackListResjson)\n    #if(json==null)\n    #return\n    if 'is_success' in json:\n        this['is_success'] = json['is_success']\nreturn this\n",
    "ChatChannel": "def ChatChannel(json):\n    this={}#ChatChanneljson)\n    #if(json==null||json.channels==null)\n    #return\n    if 'channels' in json:\n        this['channels'] = newChatChannelParam[json['channels'].Length]\n    #ChatChannelMasterParamchatChannelMaster=MonoSingleton<GameManager>.Instance.GetChatChannelMaster()\n    #for(intindex=0index<json.channels.Length++index)\n        if 'channels' in json:\n            this['channels'] = json['channels']\n        #if(chatChannelMaster.Length>=this.channels.id)\n            #this.channels.category_id=(int)chatChannelMaster[this.channels.id-1].category_id\n            #this.channels.name=chatChannelMaster[this.channels.id-1].name\nreturn this\n",
    "ChatChannelAutoAssign": "def ChatChannelAutoAssign(json):\n    this={}#ChatChannelAutoAssignjson)\n    #if(json==null)\n    #return\n    if 'channel' in json:\n        this['channel'] = json['channel']\nreturn this\n",
    "ChatPlayerData": "def ChatPlayerData(json):\n    this={}#ChatPlayerDatajson)\n    #if(json==null)\n    #return\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'exp' in json:\n        this['exp'] = json['exp']\n    if 'lastlogin' in json:\n        this['lastlogin'] = json['lastlogin']\n    if 'fuid' in json:\n        this['fuid'] = json['fuid']\n    if 'is_friend' in json:\n        this['is_friend'] = json['is_friend']\n    if 'is_favorite' in json:\n        this['is_favorite'] = json['is_favorite']\n    #this.lv=PlayerData.CalcLevelFromExp(this.exp)\n    if 'award' in json:\n        this['award'] = json['award']\n    #if(json.unit==null)\n    #return\n    #UnitDataunitData=newUnitData()\n    #unitData.Deserialize(json.unit)\n    #this.unit=unitData\nreturn this\n",
    "ChatSendRes": "def ChatSendRes(json):\n    this={}#ChatSendResjson)\n    #if(json==null)\n    #return\n    if 'is_success' in json:\n        this['is_success'] = json['is_success']\nreturn this\n",
    "ChatStampParam": "def ChatStampParam(json):\n    this={}#ChatStampParamjson)\n    #if(json==null||json.fields==null)\n    #returnfalse\n    if 'fields' in json:\n        this['id'] = json['fields'].id\n    if 'fields' in json:\n        this['img_id'] = json['fields'].img_id\n    if 'fields' in json:\n        this['iname'] = json['fields'].iname\n    if 'fields' in json:\n        this['IsPrivate'] = json['fields'].is_private==1\n    #returntrue\nreturn this\n",
    "CollaboSkillParam": "def CollaboSkillParam(json):\n    this={}#CollaboSkillParamjson)\n    #if(json==null)\n    #return\n    if 'iname' in json:\n        this['mIname'] = json['iname']\n    if 'uname' in json:\n        this['mUnitIname'] = json['uname']\n    if 'abid' in json:\n        this['mAbilityIname'] = json['abid']\n    #this.mLearnSkillLists.Clear()\n    #if(json.lqs==null)\n    #return\n    #foreach(stringlqinjson.lqs)\n    #this.mLearnSkillLists.Add(newCollaboSkillParam.LearnSkill(lq))\nreturn this\n",
    "ConceptCardConditionsParam": "def ConceptCardConditionsParam(json):\n    this={}#ConceptCardConditionsParamjson)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'un_group' in json:\n        this['unit_group'] = json['un_group']\n    if 'units_cnds_type' in json:\n        this['units_conditions_type'] = ENUM['EUseConditionsType'][json['units_cnds_type']]\n    if 'job_group' in json:\n        this['job_group'] = json['job_group']\n    if 'jobs_cnds_type' in json:\n        this['jobs_conditions_type'] = ENUM['EUseConditionsType'][json['jobs_cnds_type']]\n    if 'sex' in json:\n        this['sex'] = ENUM['ESex'][json['sex']]\n    #if(json.birth_id!=null)\n        #for(intindex=0index<this.birth_id.Length++index)\n        if 'birth_id' in json:\n            this['birth_id'] = json['birth_id']\n    #this.conditions_elements=newDictionary<EElement,int>()\n    #this.conditions_elements.Add(EElement.Fire,json.el_fire)\n    #this.conditions_elements.Add(EElement.Water,json.el_watr)\n    #this.conditions_elements.Add(EElement.Wind,json.el_wind)\n    #this.conditions_elements.Add(EElement.Thunder,json.el_thdr)\n    #this.conditions_elements.Add(EElement.Shine,json.el_lit)\n    #this.conditions_elements.Add(EElement.Dark,json.el_drk)\n    if 'el_fire' in json:\n        this['element_sum'] = json['el_fire']+json.el_watr+json.el_wind+json.el_thdr+json.el_lit+json.el_drk\n    #returntrue\nreturn this\n",
    "ConceptCard": "def ConceptCard(json):\n    this={}#ConceptCardjson)\n    if 'iid' in json:\n        this['mUniqueID'] = json['iid']\n    if 'exp' in json:\n        this['mExp'] = json['exp']\n    if 'trust' in json:\n        this['mTrust'] = json['trust']\n    if 'fav' in json:\n        this['mFavorite'] = json['fav']!=0\n    if 'trust_bonus' in json:\n        this['mTrustBonus'] = json['trust_bonus']!=0\n    if 'plus' in json:\n        this['mAwakeCount'] = json['plus']\n    if 'iname' in json:\n        this['mConceptCardParam'] = MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam\n    #this.mLv=(OInt)this.CalcCardLevel()\n    #this.UpdateEquipEffect()\n    #this.RefreshFilterType()\n    #returntrue\nreturn this\n",
    "ConceptCardEquipParam": "def ConceptCardEquipParam(json):\n    this={}#ConceptCardEquipParamjson)\n    if 'cnds_iname' in json:\n        this['cnds_iname'] = json['cnds_iname']\n    if 'card_skill' in json:\n        this['card_skill'] = json['card_skill']\n    if 'add_card_skill_buff_awake' in json:\n        this['add_card_skill_buff_awake'] = json['add_card_skill_buff_awake']\n    if 'add_card_skill_buff_lvmax' in json:\n        this['add_card_skill_buff_lvmax'] = json['add_card_skill_buff_lvmax']\n    if 'abil_iname' in json:\n        this['abil_iname'] = json['abil_iname']\n    if 'abil_iname_lvmax' in json:\n        this['abil_iname_lvmax'] = json['abil_iname_lvmax']\n    if 'statusup_skill' in json:\n        this['statusup_skill'] = json['statusup_skill']\n    if 'skin' in json:\n        this['skin'] = json['skin']\n    #returntrue\nreturn this\n",
    "ConceptCardMaterial": "def ConceptCardMaterial(json):\n    this={}#ConceptCardMaterialjson)\n    if 'id' in json:\n        this['mUniqueID'] = json['id']\n    if 'iname' in json:\n        this['mIName'] = json['iname']\n    if 'num' in json:\n        this['mNum'] = json['num']\n    if 'iname' in json:\n        this['mParam'] = MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam\n    #returntrue\nreturn this\n",
    "ConceptCardParamjson,MasterParammaster=": "def ConceptCardParamjson,MasterParammaster=(json):\n    this={}#ConceptCardParamjson,MasterParammaster=null)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'expr' in json:\n        this['expr'] = json['expr']\n    if 'type' in json:\n        this['type'] = ENUM['eCardType'][json['type']]\n    if 'icon' in json:\n        this['icon'] = json['icon']\n    if 'rare' in json:\n        this['rare'] = json['rare']\n    if 'sell' in json:\n        this['sell'] = json['sell']\n    if 'en_cost' in json:\n        this['en_cost'] = json['en_cost']\n    if 'en_exp' in json:\n        this['en_exp'] = json['en_exp']\n    if 'en_trust' in json:\n        this['en_trust'] = json['en_trust']\n    if 'trust_reward' in json:\n        this['trust_reward'] = json['trust_reward']\n    if 'first_get_unit' in json:\n        this['first_get_unit'] = json['first_get_unit']\n    #this.is_override_lvcap=true\n    if 'lvcap' in json:\n        this['lvcap'] = json['lvcap']\n    #if(json.lvcap<=0)\n        #this.is_override_lvcap=false\n        #RarityParamrarityParam=MonoSingleton<GameManager>.Instance.MasterParam.GetRarityParam(this.rare)\n        #if(rarityParam!=null)\n        #this.lvcap=(int)rarityParam.ConceptCardLvCap\n    #if(json.effects!=null)\n        if 'effects' in json:\n            this['effects'] = newConceptCardEffectsParam[json['effects'].Length]\n        #for(intindex=0index<json.effects.Length++index)\n            #ConceptCardEffectsParamcardEffectsParam=newConceptCardEffectsParam()\n            #if(!cardEffectsParam.Deserialize(json.effects))\n            #returnfalse\n            #this.effects=cardEffectsParam\n    if 'not_sale' in json:\n        this['not_sale'] = json['not_sale']==1\n    #returntrue\nreturn this\n",
    "ConceptCardTrustRewardItemParam": "def ConceptCardTrustRewardItemParam(json):\n    this={}#ConceptCardTrustRewardItemParamjson)\n    if 'reward_type' in json:\n        this['reward_type'] = ENUM['eRewardType'][json['reward_type']]\n    if 'reward_iname' in json:\n        this['iname'] = json['reward_iname']\n    if 'reward_num' in json:\n        this['reward_num'] = json['reward_num']\n    #returntrue\nreturn this\n",
    "ConceptCardTrustRewardParam": "def ConceptCardTrustRewardParam(json):\n    this={}#ConceptCardTrustRewardParamjson)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    #if(json.rewards!=null)\n        if 'rewards' in json:\n            this['rewards'] = newConceptCardTrustRewardItemParam[json['rewards'].Length]\n        #for(intindex=0index<json.rewards.Length++index)\n            #ConceptCardTrustRewardItemParamtrustRewardItemParam=newConceptCardTrustRewardItemParam()\n            #if(!trustRewardItemParam.Deserialize(json.rewards))\n            #returnfalse\n            #this.rewards=trustRewardItemParam\n    #returntrue\nreturn this\n",
    "CondEffectParam": "def CondEffectParam(json):\n    this={}#CondEffectParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'job' in json:\n        this['job'] = json['job']\n    if 'buki' in json:\n        this['buki'] = json['buki']\n    if 'birth' in json:\n        this['birth'] = json['birth']\n    if 'sex' in json:\n        this['sex'] = ENUM['ESex'][json['sex']]\n    if 'elem' in json:\n        this['elem'] = ENUM['EElement'][json['elem']]\n    if 'cond' in json:\n        this['cond'] = ENUM['ESkillCondition'][json['cond']]\n    if 'type' in json:\n        this['type'] = ENUM['ConditionEffectTypes'][json['type']]\n    if 'chktgt' in json:\n        this['chk_target'] = ENUM['EffectCheckTargets'][json['chktgt']]\n    if 'timing' in json:\n        this['chk_timing'] = ENUM['EffectCheckTimings'][json['timing']]\n    if 'vini' in json:\n        this['value_ini'] = json['vini']\n    if 'vmax' in json:\n        this['value_max'] = json['vmax']\n    if 'rini' in json:\n        this['rate_ini'] = json['rini']\n    if 'rmax' in json:\n        this['rate_max'] = json['rmax']\n    if 'tini' in json:\n        this['turn_ini'] = json['tini']\n    if 'tmax' in json:\n        this['turn_max'] = json['tmax']\n    if 'curse' in json:\n        this['curse'] = json['curse']\n    #this.conditions=(EUnitCondition)null\n    #if(json.conds!=null)\n        if 'conds' in json:\n            this['conditions'] = newEUnitCondition[json['conds'].Length]\n        #for(intindex=0index<json.conds.Length++index)\n            #if(json.conds>=0)\n            if 'conds' in json:\n                this['conditions'] = ENUM['EUnitCondition'][json['conds']]\n    #this.BuffIds=(string)null\n    #if(json.buffs!=null)\n        #for(intindex=0index<json.buffs.Length++index)\n        if 'buffs' in json:\n            this['BuffIds'] = json['buffs']\n    #if(!string.IsNullOrEmpty(json.tag))\n        if 'tag' in json:\n            this['tags'] = json['tag'].Split\n        #if(this.tags!=null&&this.tags.Length==0)\n        #this.tags=(string)null\n    if 'un_group' in json:\n        this['un_group'] = json['un_group']\n    #if(json.custom_targets!=null)\n        #for(intindex=0index<json.custom_targets.Length++index)\n        if 'custom_targets' in json:\n            this['custom_targets'] = json['custom_targets']\n    if 'v_poi' in json:\n        this['v_poison_rate'] = json['v_poi']\n    if 'v_poifix' in json:\n        this['v_poison_fix'] = json['v_poifix']\n    if 'v_par' in json:\n        this['v_paralyse_rate'] = json['v_par']\n    if 'v_blihit' in json:\n        this['v_blink_hit'] = json['v_blihit']\n    if 'v_bliavo' in json:\n        this['v_blink_avo'] = json['v_bliavo']\n    if 'v_dea' in json:\n        this['v_death_count'] = json['v_dea']\n    if 'v_beratk' in json:\n        this['v_berserk_atk'] = json['v_beratk']\n    if 'v_berdef' in json:\n        this['v_berserk_def'] = json['v_berdef']\n    if 'v_fast' in json:\n        this['v_fast'] = json['v_fast']\n    if 'v_slow' in json:\n        this['v_slow'] = json['v_slow']\n    if 'v_don' in json:\n        this['v_donmov'] = json['v_don']\n    if 'v_ahp' in json:\n        this['v_auto_hp_heal'] = json['v_ahp']\n    if 'v_amp' in json:\n        this['v_auto_mp_heal'] = json['v_amp']\n    if 'v_ahpfix' in json:\n        this['v_auto_hp_heal_fix'] = json['v_ahpfix']\n    if 'v_ampfix' in json:\n        this['v_auto_mp_heal_fix'] = json['v_ampfix']\n    #returntrue\nreturn this\n",
    "ConvertUnitPieceExcludeParam": "def ConvertUnitPieceExcludeParam(json):\n    this={}#ConvertUnitPieceExcludeParamjson)\n    #if(json==null)\n    #return\n    if 'id' in json:\n        this['id'] = json['id']\n    if 'unit_piece_iname' in json:\n        this['unit_piece_iname'] = json['unit_piece_iname']\nreturn this\n",
    "CustomTargetParam": "def CustomTargetParam(json):\n    this={}#CustomTargetParamjson)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    #if(json.units!=null)\n        #for(intindex=0index<json.units.Length++index)\n        if 'units' in json:\n            this['units'] = json['units']\n    #if(json.jobs!=null)\n        #for(intindex=0index<json.jobs.Length++index)\n        if 'jobs' in json:\n            this['jobs'] = json['jobs']\n    #if(json.unit_groups!=null)\n        #for(intindex=0index<json.unit_groups.Length++index)\n        if 'unit_groups' in json:\n            this['unit_groups'] = json['unit_groups']\n    #if(json.job_groups!=null)\n        #for(intindex=0index<json.job_groups.Length++index)\n        if 'job_groups' in json:\n            this['job_groups'] = json['job_groups']\n    if 'first_job' in json:\n        this['first_job'] = json['first_job']\n    if 'second_job' in json:\n        this['second_job'] = json['second_job']\n    if 'third_job' in json:\n        this['third_job'] = json['third_job']\n    if 'sex' in json:\n        this['sex'] = ENUM['ESex'][json['sex']]\n    if 'birth_id' in json:\n        this['birth_id'] = json['birth_id']\n    #stringstrArray=newstring[6]{json.dark.ToString(),json.shine.ToString(),json.thunder.ToString(),json.wind.ToString(),json.water.ToString(),json.fire.ToString()}\n    #stringempty=string.Empty\n    #foreach(stringstrinstrArray)\n    #empty+=str\n    #this.element=Convert.ToInt32(empty,2)\n    #returntrue\nreturn this\n",
    "DynamicTransformUnitParam": "def DynamicTransformUnitParam(json):\n    this={}#DynamicTransformUnitParamjson)\n    #if(json==null)\n    #return\n    if 'iname' in json:\n        this['mIname'] = json['iname']\n    if 'tr_unit_id' in json:\n        this['mTrUnitId'] = json['tr_unit_id']\n    if 'turn' in json:\n        this['mTurn'] = json['turn']\n    if 'upper_to_abid' in json:\n        this['mUpperToAbId'] = json['upper_to_abid']\n    if 'lower_to_abid' in json:\n        this['mLowerToAbId'] = json['lower_to_abid']\n    if 'react_to_abid' in json:\n        this['mReactToAbId'] = json['react_to_abid']\n    if 'ct_eff' in json:\n        this['mCancelEffect'] = json['ct_eff']\n    if 'ct_dis_ms' in json:\n        this['mCancelDisMs'] = json['ct_dis_ms']\n    if 'ct_app_ms' in json:\n        this['mCancelAppMs'] = json['ct_app_ms']\n    #this.mFlags=(DynamicTransformUnitParam.Flags)0\n    #if(json.is_no_wa!=0)\n    #this.mFlags|=DynamicTransformUnitParam.Flags.IsNoWeaponAbility\n    #if(json.is_no_va!=0)\n    #this.mFlags|=DynamicTransformUnitParam.Flags.IsNoVisionAbility\n    #if(json.is_no_item!=0)\n    #this.mFlags|=DynamicTransformUnitParam.Flags.IsNoItems\n    #if(json.is_tr_hpf!=0)\n    #this.mFlags|=DynamicTransformUnitParam.Flags.IsTransHpFull\n    #if(json.is_cc_hpf==0)\n    #return\n    #this.mFlags|=DynamicTransformUnitParam.Flags.IsCancelHpFull\nreturn this\n",
    "EvaluationParam": "def EvaluationParam(json):\n    this={}#EvaluationParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'val' in json:\n        this['value'] = json['val']\n    #this.status.Clear()\n    this['']\n    this['status']\n    if 'hp' in json:\n        this['status']['hp'] = json['hp']\n    this['status']\n    if 'mp' in json:\n        this['status']['mp'] = json['mp']\n    this['status']\n    if 'atk' in json:\n        this['status']['atk'] = json['atk']\n    this['status']\n    if 'def' in json:\n        this['status']['def'] = json['def']\n    this['status']\n    if 'mag' in json:\n        this['status']['mag'] = json['mag']\n    this['status']\n    if 'mnd' in json:\n        this['status']['mnd'] = json['mnd']\n    this['status']\n    if 'dex' in json:\n        this['status']['dex'] = json['dex']\n    this['status']\n    if 'spd' in json:\n        this['status']['spd'] = json['spd']\n    this['status']\n    if 'cri' in json:\n        this['status']['cri'] = json['cri']\n    this['status']\n    if 'luk' in json:\n        this['status']['luk'] = json['luk']\n    #returntrue\nreturn this\n",
    "EventShopItemListSet": "def EventShopItemListSet(json):\n    this={}#EventShopItemListSetjson)\n    #if(json==null||json.item==null||(string.IsNullOrEmpty(json.item.iname)||json.cost==null)||string.IsNullOrEmpty(json.cost.type))\n    #returnfalse\n    if 'id' in json:\n        this['id'] = json['id']\n    if 'item' in json:\n        this['iname'] = json['item'].iname\n    if 'item' in json:\n        this['num'] = json['item'].num\n    if 'item' in json:\n        this['max_num'] = json['item'].maxnum\n    if 'item' in json:\n        this['bougthnum'] = json['item'].boughtnum\n    if 'cost' in json:\n        this['saleValue'] = json['cost'].value\n    if 'cost' in json:\n        this['saleType'] = ShopData.String2SaleType\n    if 'cost' in json:\n        this['cost_iname'] = json['cost'].iname==null?GlobalVars.EventShopItem.shop_cost_iname:json['cost'].iname\n    #if(this.saleType==ESaleType.EventCoin&&this.cost_iname==null)\n    #returnfalse\n    if 'isreset' in json:\n        this['is_reset'] = json['isreset']==1\n    if 'start' in json:\n        this['start'] = json['start']\n    if 'end' in json:\n        this['end'] = json['end']\n    if 'sold' in json:\n        this['is_soldout'] = json['sold']>0\n    #if(json.children!=null)\n    if 'children' in json:\n        this['children'] = json['children']\n    #if(json.children!=null)\n        #this.shopItemType=EShopItemType.Set\n    #else\n        if 'item' in json:\n            this['shopItemType'] = ShopData.String2ShopItemType\n        #if(this.shopItemType==EShopItemType.Unknown)\n        if 'item' in json:\n            this['shopItemType'] = ShopData.Iname2ShopItemType\n    #if(this.IsConceptCard)\n    #MonoSingleton<GameManager>.Instance.Player.SetConceptCardNum(this.iname,json.item.has_count)\n    #returntrue\nreturn this\n",
    "EventTrigger": "def EventTrigger(json):\n    this={}#EventTriggerjson)\n    #if(json==null)\n    #returnfalse\n    if 'trg' in json:\n        this['mTrigger'] = ENUM['EEventTrigger'][json['trg']]\n    if 'type' in json:\n        this['mEventType'] = ENUM['EEventType'][json['type']]\n    if 'detail' in json:\n        this['mGimmickType'] = ENUM['EEventGimmick'][json['detail']]\n    if 'sval' in json:\n        this['mStrValue'] = json['sval']\n    if 'ival' in json:\n        this['mIntValue'] = json['ival']\n    if 'cnt' in json:\n        this['mCount'] = json['cnt']\n    if 'tag' in json:\n        this['mTag'] = json['tag']\n    #returntrue\nreturn this\n",
    "FixParam": "def FixParam(json):\n    this={}#FixParamjson)\n    #if(json==null)\n    #returnfalse\n    #this.ShopUpdateTime=(OInt)null\n    if 'mulcri' in json:\n        this['CriticalRate_Cri_Multiply'] = json['mulcri']\n    if 'divcri' in json:\n        this['CriticalRate_Cri_Division'] = json['divcri']\n    if 'mulluk' in json:\n        this['CriticalRate_Luk_Multiply'] = json['mulluk']\n    if 'divluk' in json:\n        this['CriticalRate_Luk_Division'] = json['divluk']\n    if 'mincri' in json:\n        this['MinCriticalDamageRate'] = json['mincri']\n    if 'maxcri' in json:\n        this['MaxCriticalDamageRate'] = json['maxcri']\n    if 'hatk' in json:\n        this['HighGridAtkRate'] = json['hatk']\n    if 'hdef' in json:\n        this['HighGridDefRate'] = json['hdef']\n    if 'hcri' in json:\n        this['HighGridCriRate'] = json['hcri']\n    if 'datk' in json:\n        this['DownGridAtkRate'] = json['datk']\n    if 'ddef' in json:\n        this['DownGridDefRate'] = json['ddef']\n    if 'dcri' in json:\n        this['DownGridCriRate'] = json['dcri']\n    if 'paralyse' in json:\n        this['ParalysedRate'] = json['paralyse']\n    if 'poi_rate' in json:\n        this['PoisonDamageRate'] = json['poi_rate']\n    if 'bli_hit' in json:\n        this['BlindnessHitRate'] = json['bli_hit']\n    if 'bli_avo' in json:\n        this['BlindnessAvoidRate'] = json['bli_avo']\n    if 'ber_atk' in json:\n        this['BerserkAtkRate'] = json['ber_atk']\n    if 'ber_def' in json:\n        this['BerserkDefRate'] = json['ber_def']\n    if 'tk_rate' in json:\n        this['TokkouDamageRate'] = json['tk_rate']\n    if 'abilupcoin' in json:\n        this['AbilityRankUpCountCoin'] = json['abilupcoin']\n    if 'abilupmax' in json:\n        this['AbilityRankUpCountMax'] = json['abilupmax']\n    if 'abiluprec' in json:\n        this['AbilityRankUpCountRecoveryVal'] = json['abiluprec']\n    if 'abilupsec' in json:\n        this['AbilityRankUpCountRecoverySec'] = ((long)json['abilupsec'])\n    if 'stmncoin' in json:\n        this['StaminaRecoveryCoin'] = json['stmncoin']\n    if 'stmnrec' in json:\n        this['StaminaRecoveryVal'] = json['stmnrec']\n    if 'stmnsec' in json:\n        this['StaminaRecoverySec'] = ((long)json['stmnsec'])\n    if 'stmncap' in json:\n        this['StaminaStockCap'] = json['stmncap']\n    if 'stmnadd' in json:\n        this['StaminaAdd'] = json['stmnadd']\n    if 'stmnadd2' in json:\n        this['StaminaAdd2'] = json['stmnadd2']\n    #this.StaminaAddCost=(OInt)null\n    #if(json.stmncost!=null)\n        #for(intindex=0index<json.stmncost.Length++index)\n        if 'stmncost' in json:\n            this['StaminaAddCost'] = json['stmncost']\n    if 'cavemax' in json:\n        this['CaveStaminaMax'] = json['cavemax']\n    if 'caverec' in json:\n        this['CaveStaminaRecoveryVal'] = json['caverec']\n    if 'cavesec' in json:\n        this['CaveStaminaRecoverySec'] = ((long)json['cavesec'])\n    if 'cavecap' in json:\n        this['CaveStaminaStockCap'] = json['cavecap']\n    if 'caveadd' in json:\n        this['CaveStaminaAdd'] = json['caveadd']\n    #this.CaveStaminaAddCost=(OInt)null\n    #if(json.cavecost!=null)\n        #for(intindex=0index<json.cavecost.Length++index)\n        if 'cavecost' in json:\n            this['CaveStaminaAddCost'] = json['cavecost']\n    if 'arenamax' in json:\n        this['ChallengeArenaMax'] = json['arenamax']\n    if 'arenasec' in json:\n        this['ChallengeArenaCoolDownSec'] = ((long)json['arenasec'])\n    if 'arenamedal' in json:\n        this['ArenaMedalMultipler'] = json['arenamedal']\n    if 'arenacoin' in json:\n        this['ArenaCoinRewardMultipler'] = json['arenacoin']\n    if 'arenaccost' in json:\n        this['ArenaResetCooldownCost'] = json['arenaccost']\n    #this.ArenaResetTicketCost=(OInt)null\n    #if(json.arenatcost!=null)\n        #for(intindex=0index<json.arenatcost.Length++index)\n        if 'arenatcost' in json:\n            this['ArenaResetTicketCost'] = json['arenatcost']\n    if 'tourmax' in json:\n        this['ChallengeTourMax'] = json['tourmax']\n    if 'multimax' in json:\n        this['ChallengeMultiMax'] = json['multimax']\n    if 'awakerate' in json:\n        this['AwakeRate'] = json['awakerate']\n    if 'na_gems' in json:\n        this['GemsGainNormalAttack'] = json['na_gems']\n    if 'sa_gems' in json:\n        this['GemsGainSideAttack'] = json['sa_gems']\n    if 'ba_gems' in json:\n        this['GemsGainBackAttack'] = json['ba_gems']\n    if 'wa_gems' in json:\n        this['GemsGainWeakAttack'] = json['wa_gems']\n    if 'ca_gems' in json:\n        this['GemsGainCriticalAttack'] = json['ca_gems']\n    if 'ki_gems' in json:\n        this['GemsGainKillBonus'] = json['ki_gems']\n    if 'di_gems_floor' in json:\n        this['GemsGainDiffFloorCount'] = json['di_gems_floor']\n    if 'di_gems_max' in json:\n        this['GemsGainDiffFloorMax'] = json['di_gems_max']\n    if 'elem_up' in json:\n        this['ElementResistUpRate'] = json['elem_up']\n    if 'elem_down' in json:\n        this['ElementResistDownRate'] = json['elem_down']\n    if 'gems_gain' in json:\n        this['GemsGainValue'] = json['gems_gain']\n    if 'gems_buff' in json:\n        this['GemsBuffValue'] = json['gems_buff']\n    if 'gems_buff_turn' in json:\n        this['GemsBuffTurn'] = json['gems_buff_turn']\n    if 'continue_cost' in json:\n        this['ContinueCoinCost'] = json['continue_cost']\n    if 'continue_cost_multi' in json:\n        this['ContinueCoinCostMulti'] = json['continue_cost_multi']\n    if 'continue_cost_multitower' in json:\n        this['ContinueCoinCostMultiTower'] = json['continue_cost_multitower']\n    if 'avoid_rate' in json:\n        this['AvoidBaseRate'] = json['avoid_rate']\n    if 'avoid_scale' in json:\n        this['AvoidParamScale'] = json['avoid_scale']\n    if 'avoid_rate_max' in json:\n        this['MaxAvoidRate'] = json['avoid_rate_max']\n    #if(json.shop_update_time!=null&&json.shop_update_time.Length>0)\n        #for(intindex=0index<this.ShopUpdateTime.Length++index)\n        if 'shop_update_time' in json:\n            this['ShopUpdateTime'] = json['shop_update_time']\n    #if(json.products!=null&&json.products.Length>0)\n        #for(intindex=0index<this.Products.Length++index)\n        if 'products' in json:\n            this['Products'] = json['products']\n    if 'vip_product' in json:\n        this['VipCardProduct'] = json['vip_product']\n    if 'premium_product' in json:\n        this['PremiumProduct'] = json['premium_product']\n    if 'vip_date' in json:\n        this['VipCardDate'] = json['vip_date']\n    if 'ggmax' in json:\n        this['FreeGachaGoldMax'] = json['ggmax']\n    if 'ggsec' in json:\n        this['FreeGachaGoldCoolDownSec'] = ((long)json['ggsec'])\n    if 'cgsec' in json:\n        this['FreeGachaCoinCoolDownSec'] = ((long)json['cgsec'])\n    if 'buygoldcost' in json:\n        this['BuyGoldCost'] = json['buygoldcost']\n    if 'buygold' in json:\n        this['BuyGoldAmount'] = json['buygold']\n    if 'sp_cost' in json:\n        this['SupportCost'] = json['sp_cost']\n    if 'elitemax' in json:\n        this['ChallengeEliteMax'] = json['elitemax']\n    if 'elite_reset_max' in json:\n        this['EliteResetMax'] = json['elite_reset_max']\n    #if(json.elite_reset_cost!=null&&json.elite_reset_cost.Length>0)\n        #for(intindex=0index<this.EliteResetCosts.Length++index)\n        if 'elite_reset_cost' in json:\n            this['EliteResetCosts'] = json['elite_reset_cost']\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.Poison))\n    #this.DefaultCondTurns.Add(EUnitCondition.Poison,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.Paralysed))\n    #this.DefaultCondTurns.Add(EUnitCondition.Paralysed,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.Stun))\n    #this.DefaultCondTurns.Add(EUnitCondition.Stun,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.Sleep))\n    #this.DefaultCondTurns.Add(EUnitCondition.Sleep,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.Charm))\n    #this.DefaultCondTurns.Add(EUnitCondition.Charm,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.Stone))\n    #this.DefaultCondTurns.Add(EUnitCondition.Stone,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.Blindness))\n    #this.DefaultCondTurns.Add(EUnitCondition.Blindness,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableSkill))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableSkill,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableMove))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableMove,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableAttack))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableAttack,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.Zombie))\n    #this.DefaultCondTurns.Add(EUnitCondition.Zombie,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DeathSentence))\n    #this.DefaultCondTurns.Add(EUnitCondition.DeathSentence,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.Berserk))\n    #this.DefaultCondTurns.Add(EUnitCondition.Berserk,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableKnockback))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableKnockback,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableBuff))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableBuff,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableDebuff))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableDebuff,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.Stop))\n    #this.DefaultCondTurns.Add(EUnitCondition.Stop,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.Fast))\n    #this.DefaultCondTurns.Add(EUnitCondition.Fast,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.Slow))\n    #this.DefaultCondTurns.Add(EUnitCondition.Slow,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.AutoHeal))\n    #this.DefaultCondTurns.Add(EUnitCondition.AutoHeal,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.Donsoku))\n    #this.DefaultCondTurns.Add(EUnitCondition.Donsoku,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.Rage))\n    #this.DefaultCondTurns.Add(EUnitCondition.Rage,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.GoodSleep))\n    #this.DefaultCondTurns.Add(EUnitCondition.GoodSleep,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.AutoJewel))\n    #this.DefaultCondTurns.Add(EUnitCondition.AutoJewel,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableHeal))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableHeal,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableSingleAttack))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableSingleAttack,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableAreaAttack))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableAreaAttack,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableDecCT))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableDecCT,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableIncCT))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableIncCT,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableEsaFire))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableEsaFire,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableEsaWater))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableEsaWater,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableEsaWind))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableEsaWind,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableEsaThunder))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableEsaThunder,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableEsaShine))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableEsaShine,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableEsaDark))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableEsaDark,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableMaxDamageHp))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableMaxDamageHp,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableMaxDamageMp))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableMaxDamageMp,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableSideAttack))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableSideAttack,(OInt)0)\n    #if(!this.DefaultCondTurns.ContainsKey(EUnitCondition.DisableBackAttack))\n    #this.DefaultCondTurns.Add(EUnitCondition.DisableBackAttack,(OInt)0)\n    this['']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_poi' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['Poison]'] = json['ct_poi']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_par' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['Paralysed]'] = json['ct_par']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_stu' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['Stun]'] = json['ct_stu']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_sle' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['Sleep]'] = json['ct_sle']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'st_cha' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['Charm]'] = json['st_cha']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_sto' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['Stone]'] = json['ct_sto']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_bli' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['Blindness]'] = json['ct_bli']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_dsk' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableSkill]'] = json['ct_dsk']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_dmo' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableMove]'] = json['ct_dmo']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_dat' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableAttack]'] = json['ct_dat']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_zom' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['Zombie]'] = json['ct_zom']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_dea' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DeathSentence]'] = json['ct_dea']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_ber' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['Berserk]'] = json['ct_ber']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_dkn' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableKnockback]'] = json['ct_dkn']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_dbu' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableBuff]'] = json['ct_dbu']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_ddb' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableDebuff]'] = json['ct_ddb']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_stop' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['Stop]'] = json['ct_stop']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_fast' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['Fast]'] = json['ct_fast']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_slow' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['Slow]'] = json['ct_slow']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_ahe' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['AutoHeal]'] = json['ct_ahe']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_don' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['Donsoku]'] = json['ct_don']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_rag' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['Rage]'] = json['ct_rag']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_gsl' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['GoodSleep]'] = json['ct_gsl']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_aje' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['AutoJewel]'] = json['ct_aje']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_dhe' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableHeal]'] = json['ct_dhe']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_dsa' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableSingleAttack]'] = json['ct_dsa']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_daa' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableAreaAttack]'] = json['ct_daa']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_ddc' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableDecCT]'] = json['ct_ddc']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_dic' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableIncCT]'] = json['ct_dic']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_esa' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableEsaFire]'] = json['ct_esa']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_esa' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableEsaWater]'] = json['ct_esa']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_esa' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableEsaWind]'] = json['ct_esa']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_esa' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableEsaThunder]'] = json['ct_esa']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_esa' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableEsaShine]'] = json['ct_esa']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_esa' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableEsaDark]'] = json['ct_esa']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_mdh' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableMaxDamageHp]'] = json['ct_mdh']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_mdm' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableMaxDamageMp]'] = json['ct_mdm']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_das' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableSideAttack]'] = json['ct_das']\n    this['DefaultCondTurns[EUnitCondition']\n    if 'ct_dab' in json:\n        this['DefaultCondTurns'][E][U][n][i][t][C][o][n][d][i][t][i][o][n]['DisableBackAttack]'] = json['ct_dab']\n    if 'yuragi' in json:\n        this['RandomEffectMax'] = json['yuragi']\n    if 'ct_max' in json:\n        this['ChargeTimeMax'] = json['ct_max']\n    if 'ct_wait' in json:\n        this['ChargeTimeDecWait'] = json['ct_wait']\n    if 'ct_mov' in json:\n        this['ChargeTimeDecMove'] = json['ct_mov']\n    if 'ct_act' in json:\n        this['ChargeTimeDecAction'] = json['ct_act']\n    if 'hit_side' in json:\n        this['AddHitRateSide'] = json['hit_side']\n    if 'hit_back' in json:\n        this['AddHitRateBack'] = json['hit_back']\n    if 'ahhp_rate' in json:\n        this['HpAutoHealRate'] = json['ahhp_rate']\n    if 'ahmp_rate' in json:\n        this['MpAutoHealRate'] = json['ahmp_rate']\n    if 'gshp_rate' in json:\n        this['GoodSleepHpHealRate'] = json['gshp_rate']\n    if 'gsmp_rate' in json:\n        this['GoodSleepMpHealRate'] = json['gsmp_rate']\n    if 'dy_rate' in json:\n        this['HpDyingRate'] = json['dy_rate']\n    if 'zsup_rate' in json:\n        this['ZeneiSupportSkillRate'] = json['zsup_rate']\n    if 'beginner_days' in json:\n        this['BeginnerDays'] = json['beginner_days']\n    if 'afcap' in json:\n        this['ArtifactBoxCap'] = json['afcap']\n    if 'cmn_pi_fire' in json:\n        this['CommonPieceFire'] = json['cmn_pi_fire']\n    if 'cmn_pi_water' in json:\n        this['CommonPieceWater'] = json['cmn_pi_water']\n    if 'cmn_pi_thunder' in json:\n        this['CommonPieceThunder'] = json['cmn_pi_thunder']\n    if 'cmn_pi_wind' in json:\n        this['CommonPieceWind'] = json['cmn_pi_wind']\n    if 'cmn_pi_shine' in json:\n        this['CommonPieceShine'] = json['cmn_pi_shine']\n    if 'cmn_pi_dark' in json:\n        this['CommonPieceDark'] = json['cmn_pi_dark']\n    if 'cmn_pi_all' in json:\n        this['CommonPieceAll'] = json['cmn_pi_all']\n    if 'ptnum_nml' in json:\n        this['PartyNumNormal'] = json['ptnum_nml']\n    if 'ptnum_evnt' in json:\n        this['PartyNumEvent'] = json['ptnum_evnt']\n    if 'ptnum_mlt' in json:\n        this['PartyNumMulti'] = json['ptnum_mlt']\n    if 'ptnum_aatk' in json:\n        this['PartyNumArenaAttack'] = json['ptnum_aatk']\n    if 'ptnum_adef' in json:\n        this['PartyNumArenaDefense'] = json['ptnum_adef']\n    if 'ptnum_chq' in json:\n        this['PartyNumChQuest'] = json['ptnum_chq']\n    if 'ptnum_tow' in json:\n        this['PartyNumTower'] = json['ptnum_tow']\n    if 'ptnum_vs' in json:\n        this['PartyNumVersus'] = json['ptnum_vs']\n    if 'ptnum_mt' in json:\n        this['PartyNumMultiTower'] = json['ptnum_mt']\n    if 'ptnum_ordeal' in json:\n        this['PartyNumOrdeal'] = json['ptnum_ordeal']\n    if 'ptnum_raid' in json:\n        this['PartyNumRaid'] = json['ptnum_raid']\n    if 'notsus' in json:\n        this['IsDisableSuspend'] = (json['notsus']!=0)\n    if 'sus_int' in json:\n        this['SuspendSaveInterval'] = json['sus_int']\n    if 'jobms' in json:\n        this['IsJobMaster'] = json['jobms']!=0\n    if 'death_count' in json:\n        this['DefaultDeathCount'] = json['death_count']\n    if 'fast_val' in json:\n        this['DefaultClockUpValue'] = json['fast_val']\n    if 'slow_val' in json:\n        this['DefaultClockDownValue'] = json['slow_val']\n    if 'guild_create_cost' in json:\n        this['GuildCreateCost'] = json['guild_create_cost']\n    if 'guild_rename_cost' in json:\n        this['GuildRenameCost'] = json['guild_rename_cost']\n    if 'guild_emblem_cost' in json:\n        this['GuildEmblemCost'] = json['guild_emblem_cost']\n    if 'guild_invest_limit' in json:\n        this['GuildInvestLimit'] = json['guild_invest_limit']\n    if 'guild_member_max' in json:\n        this['GuildDefaultMemberMax'] = json['guild_member_max']\n    if 'guild_submaster_max' in json:\n        this['GuildDefaultSubMasterMax'] = json['guild_submaster_max']\n    if 'guild_entry_cooltime' in json:\n        this['GuildEntryCoolTime'] = json['guild_entry_cooltime']\n    if 'guild_invest_cooltime' in json:\n        this['GuildInvestCoolTime'] = json['guild_invest_cooltime']\n    #if(json.equip_artifact_slot_unlock!=null&&json.equip_artifact_slot_unlock.Length>0)\n        #for(intindex=0index<json.equip_artifact_slot_unlock.Length++index)\n        if 'equip_artifact_slot_unlock' in json:\n            this['EquipArtifactSlotUnlock'] = json['equip_artifact_slot_unlock']\n    if 'kb_gh' in json:\n        this['KnockBackHeight'] = json['kb_gh']\n    if 'th_gh' in json:\n        this['ThrowHeight'] = json['th_gh']\n    #if(json.art_rare_pi!=null)\n        #for(intindex=0index<this.ArtifactRarePiece.Length++index)\n        if 'art_rare_pi' in json:\n            this['ArtifactRarePiece'] = json['art_rare_pi']\n    if 'art_cmn_pi' in json:\n        this['ArtifactCommonPiece'] = json['art_cmn_pi']\n    if 'soul_rare' in json:\n        this['SoulCommonPiece'] = this.ConvertOStringArray\n    if 'equ_rare_pi' in json:\n        this['EquipCommonPiece'] = this.ConvertOStringArray\n    if 'equ_rare_pi_use' in json:\n        this['EquipCommonPieceNum'] = this.ConvertOIntArray\n    if 'equ_rare_cost' in json:\n        this['EquipCommonPieceCost'] = this.ConvertOIntArray\n    if 'equip_cmn' in json:\n        this['EquipCmn'] = this.ConvertOStringArray\n    if 'aud_max' in json:\n        this['AudienceMax'] = json['aud_max']\n    if 'ab_rankup_max' in json:\n        this['AbilityRankUpPointMax'] = json['ab_rankup_max']\n    if 'ab_rankup_addmax' in json:\n        this['AbilityRankUpPointAddMax'] = json['ab_rankup_addmax']\n    if 'ab_coin_convert' in json:\n        this['AbilityRankupPointCoinRate'] = json['ab_coin_convert']\n    if 'firstfriend_max' in json:\n        this['FirstFriendMax'] = json['firstfriend_max']\n    if 'firstfriend_coin' in json:\n        this['FirstFriendCoin'] = json['firstfriend_coin']\n    if 'cmb_rate' in json:\n        this['CombinationRate'] = json['cmb_rate']\n    if 'weak_up' in json:\n        this['WeakUpRate'] = json['weak_up']\n    if 'resist_dw' in json:\n        this['ResistDownRate'] = json['resist_dw']\n    if 'ordeal_ct' in json:\n        this['OrdealCT'] = json['ordeal_ct']\n    if 'esa_assist' in json:\n        this['EsaAssist'] = json['esa_assist']\n    if 'esa_resist' in json:\n        this['EsaResist'] = json['esa_resist']\n    if 'card_sell_mul' in json:\n        this['CardSellMul'] = json['card_sell_mul']\n    if 'card_exp_mul' in json:\n        this['CardExpMul'] = json['card_exp_mul']\n    if 'card_max' in json:\n        this['CardMax'] = json['card_max']\n    if 'card_trust_max' in json:\n        this['CardTrustMax'] = json['card_trust_max']\n    if 'card_trust_en_bonus' in json:\n        this['CardTrustPileUp'] = json['card_trust_en_bonus']\n    if 'card_awake_unlock_lvcap' in json:\n        this['CardAwakeUnlockLevelCap'] = json['card_awake_unlock_lvcap']\n    if 'tobira_lv_cap' in json:\n        this['TobiraLvCap'] = json['tobira_lv_cap']\n    if 'tobira_unit_lv_cap' in json:\n        this['TobiraUnitLvCapBonus'] = json['tobira_unit_lv_cap']\n    #for(intindex=0index<this.TobiraUnlockElem.Length++index)\n    if 'tobira_unlock_elem' in json:\n        this['TobiraUnlockElem'] = json['tobira_unlock_elem']\n    #for(intindex=0index<this.TobiraUnlockBirth.Length++index)\n    if 'tobira_unlock_birth' in json:\n        this['TobiraUnlockBirth'] = json['tobira_unlock_birth']\n    if 'ini_rec' in json:\n        this['IniValRec'] = json['ini_rec']\n    if 'guerrilla_val' in json:\n        this['GuerrillaVal'] = json['guerrilla_val']\n    if 'draft_select_sec' in json:\n        this['DraftSelectSeconds'] = json['draft_select_sec']\n    if 'draft_organize_sec' in json:\n        this['DraftOrganizeSeconds'] = json['draft_organize_sec']\n    if 'draft_place_sec' in json:\n        this['DraftPlaceSeconds'] = json['draft_place_sec']\n    if 'convert_rate_piece_element' in json:\n        this['ConvertRatePieceElement'] = json['convert_rate_piece_element']\n    if 'convert_rate_piece_common' in json:\n        this['ConvertRatePieceCommon'] = json['convert_rate_piece_common']\n    #if(!string.IsNullOrEmpty(json.raid_effective_time))\n        #DateTimeresult=newDateTime()\n        #DateTime.TryParse(json.raid_effective_time,outresult)\n        #this.RaidEffectiveTime=TimeManager.FromDateTime(result)\n    if 'mt_skip_cost' in json:\n        this['MTSkipCost'] = json['mt_skip_cost']\n    if 'multi_room_comment_max' in json:\n        this['MultiRoomCommentMax'] = json['multi_room_comment_max']\n    if 'multi_invite_comment_max' in json:\n        this['MultiInviteCommentMax'] = json['multi_invite_comment_max']\n    #returntrue\nreturn this\n",
    "FriendPresentItemParamjson,MasterParammaster=": "def FriendPresentItemParamjson,MasterParammaster=(json):\n    this={}#FriendPresentItemParamjson,MasterParammaster=null)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'iname' in json:\n        this['m_Id'] = json['iname']\n    if 'name' in json:\n        this['m_Name'] = json['name']\n    if 'expr' in json:\n        this['m_Expr'] = json['expr']\n    #if(!string.IsNullOrEmpty(json.item))\n    if 'item' in json:\n        this['m_Item'] = MonoSingleton<GameManager>.Instance.GetItemParam\n    if 'num' in json:\n        this['m_Num'] = json['num']\n    if 'zeny' in json:\n        this['m_Zeny'] = json['zeny']\n    #try\n        #if(!string.IsNullOrEmpty(json.begin_at))\n        if 'begin_at' in json:\n            this['m_BeginAt'] = TimeManager.GetUnixSec)\n        #if(!string.IsNullOrEmpty(json.end_at))\n        if 'end_at' in json:\n            this['m_EndAt'] = TimeManager.GetUnixSec)\n        #if(!(this.m_Id==\"FP_DEFAULT\"))\n        #return\n        #FriendPresentItemParam.DefaultParam=this\n    #catch(Exceptionex)\n        #DebugUtility.LogError(ex.ToString())\nreturn this\n",
    "GachaRateParam": "def GachaRateParam(json):\n    this={}#GachaRateParamjson)\n    #if(json==null)\n        #DebugUtility.LogError(\"***FlowNode_ReqGachaRate:Deserialize'sjsonisnull\")\n        #returnfalse\n    if 'rate' in json:\n        this['m_rate'] = json['rate']\n    #if(json.itype==\"item\")\n        #this.m_type=GachaDropData.Type.Item\n        #ItemParamitemParam=MonoSingleton<GameManager>.Instance.MasterParam.GetItemParam(json.iname)\n        #if(itemParam==null)\n            #DebugUtility.LogError(\"GachaInfoRate=>iname:\"+json.iname+\"はItemParamに存在しません.\")\n            #returnfalse\n        #this.m_name=itemParam.name\n        #this.m_rarity=itemParam.rare\n        if 'num' in json:\n            this['m_num'] = json['num']\n        #this.m_hash=itemParam.iname.GetHashCode()\n    #elseif(json.itype==\"unit\")\n        #this.m_type=GachaDropData.Type.Unit\n        #UnitParamunitParam=MonoSingleton<GameManager>.Instance.MasterParam.GetUnitParam(json.iname)\n        #if(unitParam==null)\n            #DebugUtility.LogError(\"GachaInfoRate=>iname:\"+json.iname+\"はUnitParamに存在しません.\")\n            #returnfalse\n        #this.m_name=unitParam.name\n        #this.m_rarity=(int)unitParam.rare\n        #this.m_elem=unitParam.element\n    #elseif(json.itype==\"artifact\")\n        #this.m_type=GachaDropData.Type.Artifact\n        #ArtifactParamartifactParam=MonoSingleton<GameManager>.Instance.MasterParam.GetArtifactParam(json.iname)\n        #if(artifactParam==null)\n            #DebugUtility.LogError(\"GachaInfoRate=>iname:\"+json.iname+\"はArtifactParamに存在しません.\")\n            #returnfalse\n        #this.m_name=artifactParam.name\n        if 'rare' in json:\n            this['m_rarity'] = json['rare']==-1?artifactParam['rare']ini:json['rare']\n    #elseif(json.itype==\"concept_card\")\n        #this.m_type=GachaDropData.Type.ConceptCard\n        #ConceptCardParamconceptCardParam=MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam(json.iname)\n        #if(conceptCardParam==null)\n            #DebugUtility.LogError(\"GachaInfoRate=>iname:\"+json.iname+\"はArtifactParamに存在しません.\")\n            #returnfalse\n        #this.m_name=conceptCardParam.name\n        #this.m_rarity=conceptCardParam.rare\n    #returntrue\nreturn this\n",
    "GeoParam": "def GeoParam(json):\n    this={}#GeoParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'cost' in json:\n        this['cost'] = Math.Max(json['cost'],1)\n    if 'stop' in json:\n        this['DisableStopped'] = (json['stop']!=0)\n    #returntrue\nreturn this\n",
    "GrowParam": "def GrowParam(json):\n    this={}#GrowParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'type' in json:\n        this['type'] = json['type']\n    #if(json.curve!=null)\n        #intlength=json.curve.Length\n        #this.curve=newList<GrowSample>(length)\n        #for(intindex=0index<length++index)\n        #this.curve.Add(newGrowSample()\n            #lv=(OInt)json.curve.lv,\n            #scale=(OInt)json.curve.val,\n            #status={\n            #param={\n            #hp=(OInt)json.curve.hp,\n            #mp=(OShort)json.curve.mp,\n            #atk=(OShort)json.curve.atk,\n            #def=(OShort)json.curve.def,\n            #mag=(OShort)json.curve.mag,\n            #mnd=(OShort)json.curve.mnd,\n            #dex=(OShort)json.curve.dex,\n            #spd=(OShort)json.curve.spd,\n            #cri=(OShort)json.curve.cri,\n            #luk=(OShort)json.curve.luk\n            #},\n            #element_assist={\n            #fire=(OShort)json.curve.afi,\n            #water=(OShort)json.curve.awa,\n            #wind=(OShort)json.curve.awi,\n            #thunder=(OShort)json.curve.ath,\n            #shine=(OShort)json.curve.ash,\n            #dark=(OShort)json.curve.ada\n            #},\n            #element_resist={\n            #fire=(OShort)json.curve.rfi,\n            #water=(OShort)json.curve.rwa,\n            #wind=(OShort)json.curve.rwi,\n            #thunder=(OShort)json.curve.rth,\n            #shine=(OShort)json.curve.rsh,\n            #dark=(OShort)json.curve.rda\n            #},\n            #enchant_assist={\n            #poison=(OShort)json.curve.apo,\n            #paralyse=(OShort)json.curve.apa,\n            #stun=(OShort)json.curve.ast,\n            #sleep=(OShort)json.curve.asl,\n            #charm=(OShort)json.curve.ach,\n            #stone=(OShort)json.curve.asn,\n            #blind=(OShort)json.curve.abl,\n            #notskl=(OShort)json.curve.ans,\n            #notmov=(OShort)json.curve.anm,\n            #notatk=(OShort)json.curve.ana,\n            #zombie=(OShort)json.curve.azo,\n            #death=(OShort)json.curve.ade,\n            #knockback=(OShort)json.curve.akn,\n            #berserk=(OShort)json.curve.abe,\n            #resist_buff=(OShort)json.curve.abf,\n            #resist_debuff=(OShort)json.curve.adf,\n            #stop=(OShort)json.curve.acs,\n            #fast=(OShort)json.curve.acu,\n            #slow=(OShort)json.curve.acd,\n            #donsoku=(OShort)json.curve.ado,\n            #rage=(OShort)json.curve.ara,\n            #dec_ct=(OShort)json.curve.adc,\n            #inc_ct=(OShort)json.curve.aic\n            #},\n            #enchant_resist={\n            #poison=(OShort)json.curve.rpo,\n            #paralyse=(OShort)json.curve.rpa,\n            #stun=(OShort)json.curve.rst,\n            #sleep=(OShort)json.curve.rsl,\n            #charm=(OShort)json.curve.rch,\n            #stone=(OShort)json.curve.rsn,\n            #blind=(OShort)json.curve.rbl,\n            #notskl=(OShort)json.curve.rns,\n            #notmov=(OShort)json.curve.rnm,\n            #notatk=(OShort)json.curve.rna,\n            #zombie=(OShort)json.curve.rzo,\n            #death=(OShort)json.curve.rde,\n            #knockback=(OShort)json.curve.rkn,\n            #berserk=(OShort)json.curve.rbe,\n            #resist_buff=(OShort)json.curve.rbf,\n            #resist_debuff=(OShort)json.curve.rdf,\n            #stop=(OShort)json.curve.rcs,\n            #fast=(OShort)json.curve.rcu,\n            #slow=(OShort)json.curve.rcd,\n            #donsoku=(OShort)json.curve.rdo,\n            #rage=(OShort)json.curve.rra,\n            #dec_ct=(OShort)json.curve.rdc,\n            #inc_ct=(OShort)json.curve.ric\n    #})\nreturn this\n",
    "GuerrillaShopAdventQuestParam": "def GuerrillaShopAdventQuestParam(json):\n    this={}#GuerrillaShopAdventQuestParamjson)\n    if 'id' in json:\n        this['id'] = json['id']\n    if 'qid' in json:\n        this['qid'] = json['qid']\n    #returntrue\nreturn this\n",
    "GuerrillaShopScheduleParam": "def GuerrillaShopScheduleParam(json):\n    this={}#GuerrillaShopScheduleParamjson)\n    if 'id' in json:\n        this['id'] = json['id']\n    if 'begin_at' in json:\n        this['begin_at'] = json['begin_at']\n    if 'end_at' in json:\n        this['end_at'] = json['end_at']\n    if 'accum_ap' in json:\n        this['accum_ap'] = json['accum_ap']\n    if 'open_time' in json:\n        this['open_time'] = json['open_time']\n    if 'cool_time' in json:\n        this['cool_time'] = json['cool_time']\n    #if(json.advent!=null)\n        #GuerrillaShopScheduleAdventshopScheduleAdventArray=newGuerrillaShopScheduleAdvent[json.advent.Length]\n        #for(intindex=0index<json.advent.Length++index)\n            #shopScheduleAdventArray=newGuerrillaShopScheduleAdvent()\n            #shopScheduleAdventArray.id=json.advent.id\n            #shopScheduleAdventArray.coef=json.advent.coef\n    #returntrue\nreturn this\n",
    "Guild": "def Guild(json):\n    this={}#Guildjson)\n    if 'id' in json:\n        this['mUniqueID'] = json['id']\n    if 'created_uid' in json:\n        this['mCreatedUid'] = json['created_uid']\n    if 'name' in json:\n        this['mName'] = json['name']\n    if 'award_id' in json:\n        this['mEmblem'] = json['award_id']\n    if 'board' in json:\n        this['mBoard'] = !string.IsNullOrEmpty?json['board']:string.Empty\n    if 'count' in json:\n        this['mMemberCount'] = json['count']\n    if 'max_count' in json:\n        this['mMemberCountMax'] = json['max_count']\n    if 'submaster_count' in json:\n        this['mSubMasterCountMax'] = json['submaster_count']\n    if 'created_at' in json:\n        this['mCreatedAt'] = json['created_at']\n    #this.mEntryConditions=newGuildEntryConditions()\n    #this.mEntryConditions.Deserialize(json.guild_subscription_condition)\n    #this.mMembers=(GuildMemberData)null\n    #if(json.guild_member!=null)\n        if 'guild_member' in json:\n            this['mMembers'] = newGuildMemberData[json['guild_member'].Length]\n        #for(intindex=0index<json.guild_member.Length++index)\n            #this.mMembers=newGuildMemberData()\n            #this.mMembers.Deserialize(json.guild_member)\n    #this.mHaveAwards=newstring[0]\n    #if(json.have_awards!=null)\n        if 'have_awards' in json:\n            this['mHaveAwards'] = newstring[json['have_awards'].Length]\n        #json.have_awards.CopyTo((Array)this.mHaveAwards,0)\n    #this.mFacilities=(GuildFacilityData)null\n    #if(json.facilities!=null)\n        if 'facilities' in json:\n            this['mFacilities'] = newGuildFacilityData[json['facilities'].Length]\n        #for(intindex=0index<json.facilities.Length++index)\n            #this.mFacilities=newGuildFacilityData()\n            #this.mFacilities.Deserialize(json.facilities)\n    #returntrue\nreturn this\n",
    "GuildEmblemParam": "def GuildEmblemParam(json):\n    this={}#GuildEmblemParamjson)\n    if 'iname' in json:\n        this['mIname'] = json['iname']\n    if 'name' in json:\n        this['mName'] = json['name']\n    if 'cnds_type' in json:\n        this['mConditionsType'] = json['cnds_type']\n    if 'cnds_val' in json:\n        this['mConditionsValue'] = json['cnds_val']\n    if 'image' in json:\n        this['mImage'] = json['image']\n    #this.mStartAt=DateTime.MinValue\n    #if(!string.IsNullOrEmpty(json.start_at))\n    #DateTime.TryParse(json.start_at,outthis.mStartAt)\n    #this.mEndAt=DateTime.MinValue\n    #if(string.IsNullOrEmpty(json.end_at))\n    #return\n    #DateTime.TryParse(json.end_at,outthis.mEndAt)\nreturn this\n",
    "GuildEntryCondition": "def GuildEntryCondition(json):\n    this={}#GuildEntryConditionjson)\n    if 'lower_level' in json:\n        this['mLowerLevel'] = json['lower_level']\n    if 'is_auto_approval' in json:\n        this['mIsAutoApproval'] = json['is_auto_approval']!=0\n    if 'recruit_comment' in json:\n        this['mComment'] = !string.IsNullOrEmpty?json['recruit_comment']:string.Empty\n    #returntrue\nreturn this\n",
    "GuildFacilityData": "def GuildFacilityData(json):\n    this={}#GuildFacilityDatajson)\n    if 'gid' in json:\n        this['mGid'] = json['gid']\n    if 'facility_iname' in json:\n        this['mIname'] = json['facility_iname']\n    if 'exp' in json:\n        this['mExp'] = json['exp']\n    if 'level' in json:\n        this['mLevel'] = json['level']\n    #this.mParam=MonoSingleton<GameManager>.Instance.MasterParam.GetGuildFacility(this.mIname)\n    #returntrue\nreturn this\n",
    "GuildFacilityEffectParam": "def GuildFacilityEffectParam(json):\n    this={}#GuildFacilityEffectParamjson)\n    if 'lv' in json:\n        this['lv'] = json['lv']\n    if 'mem_cnt' in json:\n        this['member_count'] = json['mem_cnt']\n    if 'sub_mas' in json:\n        this['sub_master'] = json['sub_mas']\n    #this.buff_effect=(string)null\n    #if(json.buff!=null&&json.buff.Length>0)\n        #for(intindex=0index<json.buff.Length++index)\n        if 'buff' in json:\n            this['buff_effect'] = json['buff']\n    #returntrue\nreturn this\n",
    "GuildFacilityLvParam": "def GuildFacilityLvParam(json):\n    this={}#GuildFacilityLvParamjson)\n    if 'lv' in json:\n        this['lv'] = json['lv']\n    if 'base_camp' in json:\n        this['base_camp'] = json['base_camp']\n    #returntrue\nreturn this\n",
    "GuildFacilityParam": "def GuildFacilityParam(json):\n    this={}#GuildFacilityParamjson)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'image' in json:\n        this['image'] = json['image']\n    if 'type' in json:\n        this['type'] = json['type']\n    if 'rel_cnds_type' in json:\n        this['release_cnds_type'] = json['rel_cnds_type']\n    if 'rel_cnds_val1' in json:\n        this['release_cnds_val1'] = json['rel_cnds_val1']\n    if 'rel_cnds_val2' in json:\n        this['release_cnds_val2'] = json['rel_cnds_val2']\n    if 'effects' in json:\n        this['effects'] = newGuildFacilityEffectParam[json['effects'].Length]\n    #for(intindex=0index<json.effects.Length++index)\n        #this.effects=newGuildFacilityEffectParam()\n        #this.effects.Deserialize(json.effects)\n    #returntrue\nreturn this\n",
    "GuildMember": "def GuildMember(json):\n    this={}#GuildMemberjson)\n    if 'gid' in json:\n        this['mGid'] = json['gid']\n    if 'uid' in json:\n        this['mUid'] = json['uid']\n    if 'role_id' in json:\n        this['mRoleId'] = json['role_id']\n    if 'name' in json:\n        this['mName'] = json['name']\n    if 'lv' in json:\n        this['mLevel'] = json['lv']\n    if 'award_id' in json:\n        this['mAward'] = json['award_id']\n    if 'applied_at' in json:\n        this['mAppliedAt'] = json['applied_at']\n    if 'joined_at' in json:\n        this['mJoinedAt'] = json['joined_at']\n    if 'leave_at' in json:\n        this['mLeaveAt'] = json['leave_at']\n    if 'lastlogin' in json:\n        this['mLastLogin'] = json['lastlogin']\n    #this.mUnit=newUnitData()\n    #this.mUnit.Deserialize(json.units)\n    #returntrue\nreturn this\n",
    "ItemParam": "def ItemParam(json):\n    this={}#ItemParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'type' in json:\n        this['type'] = ENUM['EItemType'][json['type']]\n    if 'tabtype' in json:\n        this['tabtype'] = ENUM['EItemTabType'][json['tabtype']]\n    if 'rare' in json:\n        this['rare'] = json['rare']\n    if 'cap' in json:\n        this['cap'] = json['cap']\n    if 'invcap' in json:\n        this['invcap'] = json['invcap']\n    if 'eqlv' in json:\n        this['equipLv'] = Math.Max\n    if 'coin' in json:\n        this['coin'] = json['coin']\n    if 'tc' in json:\n        this['tour_coin'] = json['tc']\n    if 'ac' in json:\n        this['arena_coin'] = json['ac']\n    if 'mc' in json:\n        this['multi_coin'] = json['mc']\n    if 'pp' in json:\n        this['piece_point'] = json['pp']\n    if 'buy' in json:\n        this['buy'] = json['buy']\n    if 'sell' in json:\n        this['sell'] = json['sell']\n    if 'encost' in json:\n        this['enhace_cost'] = json['encost']\n    if 'enpt' in json:\n        this['enhace_point'] = json['enpt']\n    if 'facilitypt' in json:\n        this['facility_point'] = json['facilitypt']\n    if 'val' in json:\n        this['value'] = json['val']\n    if 'icon' in json:\n        this['icon'] = json['icon']\n    if 'skill' in json:\n        this['skill'] = json['skill']\n    if 'recipe' in json:\n        this['recipe'] = json['recipe']\n    #this.quests=(string)null\n    if 'is_valuables' in json:\n        this['is_valuables'] = json['is_valuables']>0\n    if 'cmn_type' in json:\n        this['cmn_type'] = json['cmn_type']\n    #if(json.quests!=null)\n        #for(intindex=0index<json.quests.Length++index)\n        if 'quests' in json:\n            this['quests'] = json['quests']\n    #returntrue\nreturn this\n",
    "JobGroupParam": "def JobGroupParam(json):\n    this={}#JobGroupParamjson)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'jobs' in json:\n        this['jobs'] = json['jobs']\n    if 'name' in json:\n        this['name'] = json['name']\n    #returntrue\nreturn this\n",
    "JobParamjson,MasterParammaster_p": "def JobParamjson,MasterParammaster_p(json):\n    this={}#JobParamjson,MasterParammaster_param)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'expr' in json:\n        this['expr'] = json['expr']\n    if 'mdl' in json:\n        this['model'] = json['mdl']\n    if 'ac2d' in json:\n        this['ac2d'] = json['ac2d']\n    if 'mdlp' in json:\n        this['modelp'] = json['mdlp']\n    if 'pet' in json:\n        this['pet'] = json['pet']\n    if 'buki' in json:\n        this['buki'] = json['buki']\n    if 'origin' in json:\n        this['origin'] = json['origin']\n    if 'type' in json:\n        this['type'] = ENUM['JobTypes'][json['type']]\n    if 'role' in json:\n        this['role'] = ENUM['RoleTypes'][json['role']]\n    if 'wepmdl' in json:\n        this['wepmdl'] = json['wepmdl']\n    if 'jmov' in json:\n        this['mov'] = json['jmov']\n    if 'jjmp' in json:\n        this['jmp'] = json['jjmp']\n    if 'atkskl' in json:\n        this['atkskill'][0] = string.IsNullOrEmpty?string.Empty:json['atkskl']\n    if 'atkfi' in json:\n        this['atkskill'][1] = string.IsNullOrEmpty?string.Empty:json['atkfi']\n    if 'atkwa' in json:\n        this['atkskill'][2] = string.IsNullOrEmpty?string.Empty:json['atkwa']\n    if 'atkwi' in json:\n        this['atkskill'][3] = string.IsNullOrEmpty?string.Empty:json['atkwi']\n    if 'atkth' in json:\n        this['atkskill'][4] = string.IsNullOrEmpty?string.Empty:json['atkth']\n    if 'atksh' in json:\n        this['atkskill'][5] = string.IsNullOrEmpty?string.Empty:json['atksh']\n    if 'atkda' in json:\n        this['atkskill'][6] = string.IsNullOrEmpty?string.Empty:json['atkda']\n    if 'fixabl' in json:\n        this['fixed_ability'] = json['fixabl']\n    if 'artifact' in json:\n        this['artifact'] = json['artifact']\n    if 'ai' in json:\n        this['ai'] = json['ai']\n    if 'master' in json:\n        this['master'] = json['master']\n    if 'me_abl' in json:\n        this['MapEffectAbility'] = json['me_abl']\n    if 'is_me_rr' in json:\n        this['IsMapEffectRevReso'] = json['is_me_rr']!=0\n    if 'desc_ch' in json:\n        this['DescCharacteristic'] = json['desc_ch']\n    if 'desc_ot' in json:\n        this['DescOther'] = json['desc_ot']\n    this['']\n    this['status']\n    if 'hp' in json:\n        this['status']['hp'] = json['hp']\n    this['status']\n    if 'mp' in json:\n        this['status']['mp'] = json['mp']\n    this['status']\n    if 'atk' in json:\n        this['status']['atk'] = json['atk']\n    this['status']\n    if 'def' in json:\n        this['status']['def'] = json['def']\n    this['status']\n    if 'mag' in json:\n        this['status']['mag'] = json['mag']\n    this['status']\n    if 'mnd' in json:\n        this['status']['mnd'] = json['mnd']\n    this['status']\n    if 'dex' in json:\n        this['status']['dex'] = json['dex']\n    this['status']\n    if 'spd' in json:\n        this['status']['spd'] = json['spd']\n    this['status']\n    if 'cri' in json:\n        this['status']['cri'] = json['cri']\n    this['status']\n    if 'luk' in json:\n        this['status']['luk'] = json['luk']\n    if 'avoid' in json:\n        this['avoid'] = json['avoid']\n    if 'inimp' in json:\n        this['inimp'] = json['inimp']\n    #Array.Clear((Array)this.ranks,0,this.ranks.Length)\n    #if(json.ranks!=null)\n        #for(intindex=0index<json.ranks.Length++index)\n            #this.ranks=newJobRankParam()\n            #if(!this.ranks.Deserialize(json.ranks))\n            #returnfalse\n    #if(master_param!=null)\n    #this.CreateBuffList(master_param)\n    if 'unit_image' in json:\n        this['unit_image'] = json['unit_image']\n    #returntrue\nreturn this\n",
    "JobRankParam": "def JobRankParam(json):\n    this={}#JobRankParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'chcost' in json:\n        this['JobChangeCost'] = json['chcost']\n    if 'chitm1' in json:\n        this['JobChangeItems'][0] = json['chitm1']\n    if 'chitm2' in json:\n        this['JobChangeItems'][1] = json['chitm2']\n    if 'chitm3' in json:\n        this['JobChangeItems'][2] = json['chitm3']\n    if 'chnum1' in json:\n        this['JobChangeItemNums'][0] = json['chnum1']\n    if 'chnum2' in json:\n        this['JobChangeItemNums'][1] = json['chnum2']\n    if 'chnum3' in json:\n        this['JobChangeItemNums'][2] = json['chnum3']\n    if 'cost' in json:\n        this['cost'] = json['cost']\n    if 'eqid1' in json:\n        this['equips'][0] = json['eqid1']\n    if 'eqid2' in json:\n        this['equips'][1] = json['eqid2']\n    if 'eqid3' in json:\n        this['equips'][2] = json['eqid3']\n    if 'eqid4' in json:\n        this['equips'][3] = json['eqid4']\n    if 'eqid5' in json:\n        this['equips'][4] = json['eqid5']\n    if 'eqid6' in json:\n        this['equips'][5] = json['eqid6']\n    #this.learnings=(OString)null\n    #intlength=0\n    #if(!string.IsNullOrEmpty(json.learn1))\n    #++length\n    #if(!string.IsNullOrEmpty(json.learn2))\n    #++length\n    #if(!string.IsNullOrEmpty(json.learn3))\n    #++length\n    #if(length>0)\n        #this.learnings=newOString[length]\n        #intnum1=0\n        #if(!string.IsNullOrEmpty(json.learn1))\n        if 'learn1' in json:\n            this['learnings'][n][u][m][1][+][+] = json['learn1']\n        #if(!string.IsNullOrEmpty(json.learn2))\n        if 'learn2' in json:\n            this['learnings'][n][u][m][1][+][+] = json['learn2']\n        #if(!string.IsNullOrEmpty(json.learn3))\n            #OStringlearnings=this.learnings\n            #intindex=num1\n            #intnum2=index+1\n            #learnings=(OString)json.learn3\n    #returntrue\nreturn this\n",
    "JobSetParam": "def JobSetParam(json):\n    this={}#JobSetParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'job' in json:\n        this['job'] = json['job']\n    if 'cjob' in json:\n        this['jobchange'] = json['cjob']\n    if 'target_unit' in json:\n        this['target_unit'] = json['target_unit']\n    if 'lrare' in json:\n        this['lock_rarity'] = json['lrare']\n    if 'lplus' in json:\n        this['lock_awakelv'] = json['lplus']\n    #this.lock_jobs=(JobSetParam.JobLock)null\n    #intlength=0\n    #if(!string.IsNullOrEmpty(json.ljob1))\n    #++length\n    #if(!string.IsNullOrEmpty(json.ljob2))\n    #++length\n    #if(!string.IsNullOrEmpty(json.ljob3))\n    #++length\n    #if(length>0)\n        #this.lock_jobs=newJobSetParam.JobLock[length]\n        #intindex=0\n        #if(!string.IsNullOrEmpty(json.ljob1))\n            #this.lock_jobs=newJobSetParam.JobLock()\n            this['']\n            this['lock_jobs']\n            if 'ljob1' in json:\n                this['lock_jobs']['iname'] = json['ljob1']\n            this['lock_jobs']\n            if 'llv1' in json:\n                this['lock_jobs']['lv'] = json['llv1']\n            #++index\n        #if(!string.IsNullOrEmpty(json.ljob2))\n            #this.lock_jobs=newJobSetParam.JobLock()\n            if 'ljob2' in json:\n                this['lock_jobs']['iname'] = json['ljob2']\n            if 'llv2' in json:\n                this['lock_jobs']['lv'] = json['llv2']\n            #++index\n        #if(!string.IsNullOrEmpty(json.ljob3))\n            #this.lock_jobs=newJobSetParam.JobLock()\n            if 'ljob3' in json:\n                this['lock_jobs']['iname'] = json['ljob3']\n            if 'llv3' in json:\n                this['lock_jobs']['lv'] = json['llv3']\n            #intnum=index+1\n    #returntrue\nreturn this\n",
    "LimitedShopItemListSet": "def LimitedShopItemListSet(json):\n    this={}#LimitedShopItemListSetjson)\n    #if(json==null||json.item==null||(string.IsNullOrEmpty(json.item.iname)||json.cost==null)||string.IsNullOrEmpty(json.cost.type))\n    #returnfalse\n    if 'id' in json:\n        this['id'] = json['id']\n    if 'item' in json:\n        this['iname'] = json['item'].iname\n    if 'item' in json:\n        this['num'] = json['item'].num\n    if 'item' in json:\n        this['max_num'] = json['item'].maxnum\n    if 'item' in json:\n        this['bougthnum'] = json['item'].boughtnum\n    if 'cost' in json:\n        this['saleValue'] = json['cost'].value\n    if 'cost' in json:\n        this['saleType'] = ShopData.String2SaleType\n    if 'isreset' in json:\n        this['is_reset'] = json['isreset']==1\n    if 'start' in json:\n        this['start'] = json['start']\n    if 'end' in json:\n        this['end'] = json['end']\n    if 'sold' in json:\n        this['is_soldout'] = json['sold']>0\n    #if(json.children!=null)\n    if 'children' in json:\n        this['children'] = json['children']\n    #if(json.children!=null)\n        #this.shopItemType=EShopItemType.Set\n    #else\n        if 'item' in json:\n            this['shopItemType'] = ShopData.String2ShopItemType\n        #if(this.shopItemType==EShopItemType.Unknown)\n        if 'item' in json:\n            this['shopItemType'] = ShopData.Iname2ShopItemType\n    #if(this.IsConceptCard)\n    #MonoSingleton<GameManager>.Instance.Player.SetConceptCardNum(this.iname,json.item.has_count)\n    #returntrue\nreturn this\n",
    "LoginInfoParam": "def LoginInfoParam(json):\n    this={}#LoginInfoParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'path' in json:\n        this['path'] = json['path']\n    if 'scene' in json:\n        this['scene'] = json['scene']\n    #DateTimeresult1=DateTime.MinValue\n    #DateTimeresult2=DateTime.MaxValue\n    #if(!string.IsNullOrEmpty(json.begin_at))\n    #DateTime.TryParse(json.begin_at,outresult1)\n    #if(!string.IsNullOrEmpty(json.end_at))\n    #DateTime.TryParse(json.end_at,outresult2)\n    #this.begin_at=TimeManager.FromDateTime(result1)\n    #this.end_at=TimeManager.FromDateTime(result2)\n    if 'conditions' in json:\n        this['conditions'] = json['conditions']\n    if 'conditions_value' in json:\n        this['conditions_value'] = json['conditions_value']\n    #returntrue\nreturn this\n",
    "MagnificationParam": "def MagnificationParam(json):\n    this={}#MagnificationParamjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'atk' in json:\n        this['atkMagnifications'] = json['atk']\nreturn this\n",
    "MapEffectParam": "def MapEffectParam(json):\n    this={}#MapEffectParamjson)\n    #if(json==null)\n    #return\n    #this.mIndex=++MapEffectParam.CurrentIndex\n    if 'iname' in json:\n        this['mIname'] = json['iname']\n    if 'name' in json:\n        this['mName'] = json['name']\n    if 'expr' in json:\n        this['mExpr'] = json['expr']\n    #this.mValidSkillLists.Clear()\n    #if(json.skills==null)\n    #return\n    #foreach(stringskillinjson.skills)\n    #this.mValidSkillLists.Add(skill)\nreturn this\n",
    "MapParam": "def MapParam(json):\n    this={}#MapParamjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'scn' in json:\n        this['mapSceneName'] = json['scn']\n    if 'set' in json:\n        this['mapSetName'] = json['set']\n    if 'btl' in json:\n        this['battleSceneName'] = json['btl']\n    if 'ev' in json:\n        this['eventSceneName'] = json['ev']\n    if 'bgm' in json:\n        this['bgmName'] = json['bgm']\nreturn this\n",
    "MasterParam": "def MasterParam(json):\n    this={}#MasterParamjson)\n    #if(this.Loaded)\n    #returntrue\n    #DebugUtility.Verify((object)json,typeof(JSON_MasterParam))\n    #this.mLocalNotificationParam=(LocalNotificationParam)null\n    #this.mFixParam.Deserialize(json.Fix[0])\n    #if(json.Unit!=null)\n        #if(this.mUnitParam==null)\n        if 'Unit' in json:\n            this['mUnitParam'] = newList<UnitParam>\n        #if(this.mUnitDictionary==null)\n        if 'Unit' in json:\n            this['mUnitDictionary'] = newDictionary<string,UnitParam>\n        #for(intindex=0index<json.Unit.Length++index)\n            #JSON_UnitParamdata=json.Unit\n            #UnitParamunitParam=this.mUnitParam.Find((Predicate<UnitParam>)(p=>p.iname==data.iname))\n            #if(unitParam==null)\n                #unitParam=newUnitParam()\n                #this.mUnitParam.Add(unitParam)\n            #unitParam.Deserialize(data)\n            #if(this.mUnitDictionary.ContainsKey(data.iname))\n            #thrownewException(\"重複エラー：Unit[\"+data.iname+\"]\")\n            #this.mUnitDictionary.Add(data.iname,unitParam)\n    #if(json.UnitJobOverwrite!=null)\n        #if(this.mUnitJobOverwriteParam==null)\n        #this.mUnitJobOverwriteParam=newList<UnitJobOverwriteParam>()\n        #if(this.mUnitJobOverwriteDictionary==null)\n        #this.mUnitJobOverwriteDictionary=newDictionary<string,Dictionary<string,UnitJobOverwriteParam>>()\n        #foreach(JSON_UnitJobOverwriteParamjson1injson.UnitJobOverwrite)\n            #UnitJobOverwriteParamjobOverwriteParam=newUnitJobOverwriteParam()\n            #this.mUnitJobOverwriteParam.Add(jobOverwriteParam)\n            #jobOverwriteParam.Deserialize(json1)\n            #Dictionary<string,UnitJobOverwriteParam>dictionary\n            #this.mUnitJobOverwriteDictionary.TryGetValue(json1.unit_iname,outdictionary)\n            #if(dictionary==null)\n                #dictionary=newDictionary<string,UnitJobOverwriteParam>()\n                #this.mUnitJobOverwriteDictionary.Add(json1.unit_iname,dictionary)\n            #if(!dictionary.ContainsKey(json1.job_iname))\n            #dictionary.Add(json1.job_iname,jobOverwriteParam)\n    #if(json.Skill!=null)\n        #if(this.mSkillParam==null)\n        if 'Skill' in json:\n            this['mSkillParam'] = newList<SkillParam>\n        #if(this.mSkillDictionary==null)\n        if 'Skill' in json:\n            this['mSkillDictionary'] = newDictionary<string,SkillParam>\n        #for(intindex=0index<json.Skill.Length++index)\n            #JSON_SkillParamdata=json.Skill\n            #SkillParamskillParam=this.mSkillParam.Find((Predicate<SkillParam>)(p=>p.iname==data.iname))\n            #if(skillParam==null)\n                #skillParam=newSkillParam()\n                #this.mSkillParam.Add(skillParam)\n            #skillParam.Deserialize(data)\n            #if(this.mSkillDictionary.ContainsKey(data.iname))\n            #thrownewException(\"重複エラー：Skill[\"+data.iname+\"]\")\n            #this.mSkillDictionary.Add(data.iname,skillParam)\n        #SkillParam.UpdateReplaceSkill(this.mSkillParam)\n    #if(json.Buff!=null)\n        #if(this.mBuffEffectParam==null)\n        if 'Buff' in json:\n            this['mBuffEffectParam'] = newList<BuffEffectParam>\n        #for(intindex=0index<json.Buff.Length++index)\n            #JSON_BuffEffectParamdata=json.Buff\n            #BuffEffectParambuffEffectParam=this.mBuffEffectParam.Find((Predicate<BuffEffectParam>)(p=>p.iname==data.iname))\n            #if(buffEffectParam==null)\n                #buffEffectParam=newBuffEffectParam()\n                #this.mBuffEffectParam.Add(buffEffectParam)\n            #buffEffectParam.Deserialize(data)\n    #if(json.Cond!=null)\n        #if(this.mCondEffectParam==null)\n        if 'Cond' in json:\n            this['mCondEffectParam'] = newList<CondEffectParam>\n        #for(intindex=0index<json.Cond.Length++index)\n            #JSON_CondEffectParamdata=json.Cond\n            #CondEffectParamcondEffectParam=this.mCondEffectParam.Find((Predicate<CondEffectParam>)(p=>p.iname==data.iname))\n            #if(condEffectParam==null)\n                #condEffectParam=newCondEffectParam()\n                #this.mCondEffectParam.Add(condEffectParam)\n            #condEffectParam.Deserialize(data)\n    #if(json.Ability!=null)\n        #if(this.mAbilityParam==null)\n        if 'Ability' in json:\n            this['mAbilityParam'] = newList<AbilityParam>\n        #if(this.mAbilityDictionary==null)\n        if 'Ability' in json:\n            this['mAbilityDictionary'] = newDictionary<string,AbilityParam>\n        #for(intindex=0index<json.Ability.Length++index)\n            #JSON_AbilityParamdata=json.Ability\n            #AbilityParamabilityParam=this.mAbilityParam.Find((Predicate<AbilityParam>)(p=>p.iname==data.iname))\n            #if(abilityParam==null)\n                #abilityParam=newAbilityParam()\n                #this.mAbilityParam.Add(abilityParam)\n            #abilityParam.Deserialize(data)\n            #if(this.mAbilityDictionary.ContainsKey(data.iname))\n            #thrownewException(\"重複エラー：Ability[\"+data.iname+\"]\")\n            #this.mAbilityDictionary.Add(data.iname,abilityParam)\n    #if(json.Item!=null)\n        #if(this.mItemParam==null)\n        if 'Item' in json:\n            this['mItemParam'] = newList<ItemParam>\n        #if(this.mItemDictionary==null)\n        if 'Item' in json:\n            this['mItemDictionary'] = newDictionary<string,ItemParam>\n        #for(intindex=0index<json.Item.Length++index)\n            #JSON_ItemParamdata=json.Item\n            #ItemParamitemParam=this.mItemParam.Find((Predicate<ItemParam>)(p=>p.iname==data.iname))\n            #if(itemParam==null)\n                #itemParam=newItemParam()\n                #this.mItemParam.Add(itemParam)\n            #itemParam.Deserialize(data)\n            #itemParam.no=index+1\n            #if(this.mItemDictionary.ContainsKey(data.iname))\n            #thrownewException(\"重複エラー：Item[\"+data.iname+\"]\")\n            #this.mItemDictionary.Add(data.iname,itemParam)\n        #this.AddUnitToItem()\n    #if(json.Artifact!=null)\n        #if(this.mArtifactParam==null)\n        if 'Artifact' in json:\n            this['mArtifactParam'] = newList<ArtifactParam>\n        #if(this.mArtifactDictionary==null)\n        if 'Artifact' in json:\n            this['mArtifactDictionary'] = newDictionary<string,ArtifactParam>\n        #for(intindex=0index<json.Artifact.Length++index)\n            #JSON_ArtifactParamdata=json.Artifact\n            #if(data.iname!=null)\n                #ArtifactParamartifactParam=this.mArtifactParam.Find((Predicate<ArtifactParam>)(p=>p.iname==data.iname))\n                #if(artifactParam==null)\n                    #artifactParam=newArtifactParam()\n                    #this.mArtifactParam.Add(artifactParam)\n                #artifactParam.Deserialize(data)\n                #if(this.mArtifactDictionary.ContainsKey(data.iname))\n                #thrownewException(\"重複エラー：Artifact[\"+data.iname+\"]\")\n                #this.mArtifactDictionary.Add(data.iname,artifactParam)\n    #if(json.Weapon!=null)\n        #if(this.mWeaponParam==null)\n        if 'Weapon' in json:\n            this['mWeaponParam'] = newList<WeaponParam>\n        #for(intindex=0index<json.Weapon.Length++index)\n            #JSON_WeaponParamdata=json.Weapon\n            #WeaponParamweaponParam=this.mWeaponParam.Find((Predicate<WeaponParam>)(p=>p.iname==data.iname))\n            #if(weaponParam==null)\n                #weaponParam=newWeaponParam()\n                #this.mWeaponParam.Add(weaponParam)\n            #weaponParam.Deserialize(data)\n    #if(json.Recipe!=null)\n        #if(this.mRecipeParam==null)\n        if 'Recipe' in json:\n            this['mRecipeParam'] = newList<RecipeParam>\n        #for(intindex=0index<json.Recipe.Length++index)\n            #JSON_RecipeParamjson1=json.Recipe\n            #RecipeParamrecipeParam=newRecipeParam()\n            #this.mRecipeParam.Add(recipeParam)\n            #recipeParam.Deserialize(json1)\n    #if(json.Job!=null)\n        #if(this.mJobParam==null)\n        if 'Job' in json:\n            this['mJobParam'] = newList<JobParam>\n        #for(intindex=0index<json.Job.Length++index)\n            #JSON_JobParamdata=json.Job\n            #JobParamjobParam=this.mJobParam.Find((Predicate<JobParam>)(p=>p.iname==data.iname))\n            #if(jobParam==null)\n                #jobParam=newJobParam()\n                #this.mJobParam.Add(jobParam)\n                #this.mJobParamDict[data.iname]=jobParam\n            #jobParam.Deserialize(data,this)\n    #if(json.JobSet!=null)\n        #if(this.mJobSetParam==null)\n        if 'JobSet' in json:\n            this['mJobSetParam'] = newList<JobSetParam>\n        #if(this.mJobsetDictionary==null)\n        if 'Unit' in json:\n            this['mJobsetDictionary'] = newDictionary<string,List<JobSetParam>>\n        #for(intindex=0index<json.JobSet.Length++index)\n            #JSON_JobSetParamdata=json.JobSet\n            #JobSetParamjobSetParam=this.mJobSetParam.Find((Predicate<JobSetParam>)(p=>p.iname==data.iname))\n            #if(jobSetParam==null)\n                #jobSetParam=newJobSetParam()\n                #this.mJobSetParam.Add(jobSetParam)\n            #jobSetParam.Deserialize(data)\n            #if(!string.IsNullOrEmpty(jobSetParam.target_unit))\n                #List<JobSetParam>jobSetParamList\n                #if(this.mJobsetDictionary.ContainsKey(jobSetParam.target_unit))\n                    #jobSetParamList=this.mJobsetDictionary[jobSetParam.target_unit]\n                #else\n                    #jobSetParamList=newList<JobSetParam>(3)\n                    #this.mJobsetDictionary.Add(jobSetParam.target_unit,jobSetParamList)\n                #jobSetParamList.Add(jobSetParam)\n    #if(json.Grow!=null)\n        #if(this.mGrowParam==null)\n        if 'Grow' in json:\n            this['mGrowParam'] = newList<GrowParam>\n        #for(intindex=0index<json.Grow.Length++index)\n            #JSON_GrowParamdata=json.Grow\n            #GrowParamgrowParam=this.mGrowParam.Find((Predicate<GrowParam>)(p=>p.type==data.type))\n            #if(growParam==null)\n                #growParam=newGrowParam()\n                #this.mGrowParam.Add(growParam)\n            #growParam.Deserialize(data)\n    #if(json.AI!=null)\n        #if(this.mAIParam==null)\n        if 'AI' in json:\n            this['mAIParam'] = newList<AIParam>\n        #for(intindex=0index<json.AI.Length++index)\n            #JSON_AIParamdata=json.AI\n            #AIParamaiParam=this.mAIParam.Find((Predicate<AIParam>)(p=>p.iname==data.iname))\n            #if(aiParam==null)\n                #aiParam=newAIParam()\n                #this.mAIParam.Add(aiParam)\n            #aiParam.Deserialize(data)\n    #if(json.Geo!=null)\n        #if(this.mGeoParam==null)\n        if 'Geo' in json:\n            this['mGeoParam'] = newList<GeoParam>\n        #for(intindex=0index<json.Geo.Length++index)\n            #JSON_GeoParamdata=json.Geo\n            #GeoParamgeoParam=this.mGeoParam.Find((Predicate<GeoParam>)(p=>p.iname==data.iname))\n            #if(geoParam==null)\n                #geoParam=newGeoParam()\n                #this.mGeoParam.Add(geoParam)\n            #geoParam.Deserialize(data)\n    #if(json.Rarity!=null)\n        #if(this.mRarityParam==null)\n        if 'Rarity' in json:\n            this['mRarityParam'] = newList<RarityParam>\n        #for(intindex=0index<json.Rarity.Length++index)\n            #RarityParamrarityParam\n            #if(this.mRarityParam.Count>index)\n                #rarityParam=this.mRarityParam\n            #else\n                #rarityParam=newRarityParam()\n                #this.mRarityParam.Add(rarityParam)\n            #rarityParam.Deserialize(json.Rarity)\n    #if(json.Shop!=null)\n        #if(this.mShopParam==null)\n        if 'Shop' in json:\n            this['mShopParam'] = newList<ShopParam>\n        #for(intindex=0index<json.Shop.Length++index)\n            #ShopParamshopParam\n            #if(this.mShopParam.Count>index)\n                #shopParam=this.mShopParam\n            #else\n                #shopParam=newShopParam()\n                #this.mShopParam.Add(shopParam)\n            #shopParam.Deserialize(json.Shop)\n    #if(json.Player!=null)\n        if 'Player' in json:\n            this['mPlayerParamTbl'] = newPlayerParam[json['Player'].Length]\n        #for(intindex=0index<json.Player.Length++index)\n            #JSON_PlayerParamjson1=json.Player\n            #this.mPlayerParamTbl=newPlayerParam()\n            #this.mPlayerParamTbl.Deserialize(json1)\n    #if(json.PlayerLvTbl!=null)\n        #for(intindex=0index<json.PlayerLvTbl.Length++index)\n        if 'PlayerLvTbl' in json:\n            this['mPlayerExpTbl'] = json['PlayerLvTbl']\n    #if(json.UnitLvTbl!=null)\n        #for(intindex=0index<json.UnitLvTbl.Length++index)\n        if 'UnitLvTbl' in json:\n            this['mUnitExpTbl'] = json['UnitLvTbl']\n    #if(json.ArtifactLvTbl!=null)\n        #for(intindex=0index<json.ArtifactLvTbl.Length++index)\n        if 'ArtifactLvTbl' in json:\n            this['mArtifactExpTbl'] = json['ArtifactLvTbl']\n    #if(json.AbilityRank!=null)\n        #for(intindex=0index<json.AbilityRank.Length++index)\n        if 'AbilityRank' in json:\n            this['mAbilityExpTbl'] = json['AbilityRank']\n    #if(json.AwakePieceTbl!=null)\n        #for(intindex=0index<json.AwakePieceTbl.Length++index)\n        if 'AwakePieceTbl' in json:\n            this['mAwakePieceTbl'] = json['AwakePieceTbl']\n    #this.mLocalNotificationParam=newLocalNotificationParam()\n    #if(json.LocalNotification!=null)\n        this['']\n        this['mLocalNotificationParam']\n        if 'LocalNotification' in json:\n            this['mLocalNotificationParam']['msg_stamina'] = json['LocalNotification'][0].msg_stamina\n        this['mLocalNotificationParam']\n        if 'LocalNotification' in json:\n            this['mLocalNotificationParam']['iOSAct_stamina'] = json['LocalNotification'][0].iOSAct_stamina\n        this['mLocalNotificationParam']\n        if 'LocalNotification' in json:\n            this['mLocalNotificationParam']['limitSec_stamina'] = json['LocalNotification'][0].limitSec_stamina\n    #Dictionary<int,TrophyCategoryParam>dictionary1=newDictionary<int,TrophyCategoryParam>()\n    #if(json.TrophyCategory!=null)\n        #List<TrophyCategoryParam>trophyCategoryParamList=newList<TrophyCategoryParam>(json.TrophyCategory.Length)\n        #for(intindex=0index<json.TrophyCategory.Length++index)\n            #TrophyCategoryParamtrophyCategoryParam=newTrophyCategoryParam()\n            #if(trophyCategoryParam.Deserialize(json.TrophyCategory))\n                #trophyCategoryParamList.Add(trophyCategoryParam)\n                #if(!dictionary1.ContainsKey(trophyCategoryParam.hash_code))\n                #dictionary1.Add(trophyCategoryParam.hash_code,trophyCategoryParam)\n        #this.mTrophyCategory=trophyCategoryParamList.ToArray()\n    #if(json.Trophy!=null)\n        #List<TrophyParam>trophyParamList=newList<TrophyParam>(json.Trophy.Length)\n        #for(intindex=0index<json.Trophy.Length++index)\n            #TrophyParamtrophyParam=newTrophyParam()\n            #if(trophyParam.Deserialize(json.Trophy))\n                #if(dictionary1.ContainsKey(trophyParam.category_hash_code))\n                #trophyParam.CategoryParam=dictionary1[trophyParam.category_hash_code]\n                #if(trophyParam.IsPlanningToUse())\n                #trophyParamList.Add(trophyParam)\n        #this.mTrophy=trophyParamList.ToArray()\n        #this.mTrophyInameDict=newDictionary<string,TrophyParam>()\n        #foreach(TrophyParamtrophyParaminthis.mTrophy)\n        #this.mTrophyInameDict.Add(trophyParam.iname,trophyParam)\n    #Dictionary<string,ChallengeCategoryParam>dictionary2=newDictionary<string,ChallengeCategoryParam>()\n    #if(json.ChallengeCategory!=null)\n        #List<ChallengeCategoryParam>challengeCategoryParamList=newList<ChallengeCategoryParam>(json.ChallengeCategory.Length)\n        #for(intindex=0index<json.ChallengeCategory.Length++index)\n            #ChallengeCategoryParamchallengeCategoryParam=newChallengeCategoryParam()\n            #if(challengeCategoryParam.Deserialize(json.ChallengeCategory))\n                #dictionary2[challengeCategoryParam.iname]=challengeCategoryParam\n                #challengeCategoryParamList.Add(challengeCategoryParam)\n        #this.mChallengeCategory=challengeCategoryParamList.ToArray()\n    #if(json.Challenge!=null)\n        #List<TrophyParam>trophyParamList=newList<TrophyParam>(json.Challenge.Length)\n        #for(intindex=0index<json.Challenge.Length++index)\n            #TrophyParamtrophyParam=newTrophyParam()\n            #if(trophyParam.Deserialize(json.Challenge))\n                #if(dictionary2.ContainsKey(trophyParam.Category))\n                #trophyParam.ChallengeCategoryParam=dictionary2[trophyParam.Category]\n                #trophyParam.Challenge=1\n                #trophyParamList.Add(trophyParam)\n        #this.mChallenge=trophyParamList.ToArray()\n        #intlength=this.mTrophy.Length\n        #Array.Resize<TrophyParam>(refthis.mTrophy,length+this.mChallenge.Length)\n        #Array.Copy((Array)this.mChallenge,0,(Array)this.mTrophy,length,this.mChallenge.Length)\n        #foreach(TrophyParamtrophyParaminthis.mChallenge)\n        #this.mTrophyInameDict.Add(trophyParam.iname,trophyParam)\n    #this.CreateTrophyDict()\n    #if(json.Unlock!=null)\n        #List<UnlockParam>unlockParamList=newList<UnlockParam>(json.Unlock.Length)\n        #for(intindex=0index<json.Unlock.Length++index)\n            #UnlockParamunlockParam=newUnlockParam()\n            #if(unlockParam.Deserialize(json.Unlock))\n            #unlockParamList.Add(unlockParam)\n        #this.mUnlock=unlockParamList.ToArray()\n    #if(json.Vip!=null)\n        #List<VipParam>vipParamList=newList<VipParam>(json.Vip.Length)\n        #for(intindex=0index<json.Vip.Length++index)\n            #VipParamvipParam=newVipParam()\n            #if(vipParam.Deserialize(json.Vip))\n            #vipParamList.Add(vipParam)\n        #this.mVip=vipParamList.ToArray()\n    #if(json.Premium!=null)\n        #List<PremiumParam>premiumParamList=newList<PremiumParam>(json.Premium.Length)\n        #for(intindex=0index<json.Premium.Length++index)\n            #PremiumParampremiumParam=newPremiumParam()\n            #if(premiumParam.Deserialize(json.Premium))\n            #premiumParamList.Add(premiumParam)\n        #this.mPremium=premiumParamList.ToArray()\n    #if(json.Mov!=null)\n        if 'Mov' in json:\n            this['mStreamingMovies'] = newJSON_StreamingMovie[json['Mov'].Length]\n        #for(intindex=0index<json.Mov.Length++index)\n            #this.mStreamingMovies=newJSON_StreamingMovie()\n            this['']\n            this['mStreamingMovies']\n            if 'Mov' in json:\n                this['mStreamingMovies']['alias'] = json['Mov'].alias\n            this['mStreamingMovies']\n            if 'Mov' in json:\n                this['mStreamingMovies']['path'] = json['Mov'].path\n    #if(json.Banner!=null)\n        #List<BannerParam>bannerParamList=newList<BannerParam>(json.Banner.Length)\n        #for(intindex=0index<json.Banner.Length++index)\n            #BannerParambannerParam=newBannerParam()\n            #if(bannerParam.Deserialize(json.Banner))\n            #bannerParamList.Add(bannerParam)\n        #this.mBanner=bannerParamList.ToArray()\n    #if(json.QuestClearUnlockUnitData!=null)\n        #List<QuestClearUnlockUnitDataParam>unlockUnitDataParamList=newList<QuestClearUnlockUnitDataParam>(json.QuestClearUnlockUnitData.Length)\n        #for(intindex=0index<json.QuestClearUnlockUnitData.Length++index)\n            #QuestClearUnlockUnitDataParamunlockUnitDataParam=newQuestClearUnlockUnitDataParam()\n            #unlockUnitDataParam.Deserialize(json.QuestClearUnlockUnitData)\n            #unlockUnitDataParamList.Add(unlockUnitDataParam)\n        #this.mUnlockUnitDataParam=unlockUnitDataParamList\n    #if(json.Award!=null)\n        #if(this.mAwardParam==null)\n        if 'Award' in json:\n            this['mAwardParam'] = newList<AwardParam>\n        #if(this.mAwardDictionary==null)\n        if 'Award' in json:\n            this['mAwardDictionary'] = newDictionary<string,AwardParam>\n        #for(intindex=0index<json.Award.Length++index)\n            #JSON_AwardParamdata=json.Award\n            #if(data.iname!=null)\n                #AwardParamawardParam=this.mAwardParam.Find((Predicate<AwardParam>)(p=>p.iname==data.iname))\n                #if(awardParam==null)\n                    #awardParam=newAwardParam()\n                    #this.mAwardParam.Add(awardParam)\n                #awardParam.Deserialize(data)\n                #if(this.mAwardDictionary.ContainsKey(awardParam.iname))\n                #thrownewException(\"Overlap:Award[\"+awardParam.iname+\"]\")\n                #this.mAwardDictionary.Add(awardParam.iname,awardParam)\n    #if(json.LoginInfo!=null)\n        #List<LoginInfoParam>loginInfoParamList=newList<LoginInfoParam>(json.LoginInfo.Length)\n        #for(intindex=0index<json.LoginInfo.Length++index)\n            #LoginInfoParamloginInfoParam=newLoginInfoParam()\n            #if(loginInfoParam.Deserialize(json.LoginInfo))\n            #loginInfoParamList.Add(loginInfoParam)\n        #this.mLoginInfoParam=loginInfoParamList.ToArray()\n    #if(json.CollaboSkill!=null)\n        #List<CollaboSkillParam>collaboSkillParamList=newList<CollaboSkillParam>(json.CollaboSkill.Length)\n        #for(intindex=0index<json.CollaboSkill.Length++index)\n            #CollaboSkillParamcollaboSkillParam=newCollaboSkillParam()\n            #collaboSkillParam.Deserialize(json.CollaboSkill)\n            #collaboSkillParamList.Add(collaboSkillParam)\n        #this.mCollaboSkillParam=collaboSkillParamList\n        #CollaboSkillParam.UpdateCollaboSkill(this.mCollaboSkillParam)\n    #if(json.Trick!=null)\n        #List<TrickParam>trickParamList=newList<TrickParam>(json.Trick.Length)\n        #for(intindex=0index<json.Trick.Length++index)\n            #TrickParamtrickParam=newTrickParam()\n            #trickParam.Deserialize(json.Trick)\n            #trickParamList.Add(trickParam)\n        #this.mTrickParam=trickParamList\n    #if(json.BreakObj!=null)\n        #List<BreakObjParam>breakObjParamList=newList<BreakObjParam>(json.BreakObj.Length)\n        #for(intindex=0index<json.BreakObj.Length++index)\n            #BreakObjParambreakObjParam=newBreakObjParam()\n            #breakObjParam.Deserialize(json.BreakObj)\n            #breakObjParamList.Add(breakObjParam)\n        #this.mBreakObjParam=breakObjParamList\n    #if(json.VersusMatchKey!=null)\n        if 'VersusMatchKey' in json:\n            this['mVersusMatching'] = newList<VersusMatchingParam>\n        #for(intindex=0index<json.VersusMatchKey.Length++index)\n            #VersusMatchingParamversusMatchingParam=newVersusMatchingParam()\n            #versusMatchingParam.Deserialize(json.VersusMatchKey)\n            #this.mVersusMatching.Add(versusMatchingParam)\n    #if(json.VersusMatchCond!=null)\n        if 'VersusMatchCond' in json:\n            this['mVersusMatchCond'] = newList<VersusMatchCondParam>\n        #for(intindex=0index<json.VersusMatchCond.Length++index)\n            #VersusMatchCondParamversusMatchCondParam=newVersusMatchCondParam()\n            #versusMatchCondParam.Deserialize(json.VersusMatchCond)\n            #this.mVersusMatchCond.Add(versusMatchCondParam)\n    #if(json.TowerScore!=null)\n        if 'TowerScore' in json:\n            this['mTowerScores'] = newDictionary<string,TowerScoreParam>\n        #for(intindex1=0index1<json.TowerScore.Length++index1)\n            #JSON_TowerScorejsonTowerScore=json.TowerScore[index1]\n            #intlength=jsonTowerScore.threshold_vals.Length\n            #TowerScoreParamtowerScoreParamArray=newTowerScoreParam[length]\n            #for(intindex2=0index2<length++index2)\n                #JSON_TowerScoreThresholdthresholdVal=jsonTowerScore.threshold_vals[index2]\n                #towerScoreParamArray[index2]=newTowerScoreParam()\n                #towerScoreParamArray[index2].Deserialize(thresholdVal)\n            #this.mTowerScores.Add(jsonTowerScore.iname,towerScoreParamArray)\n    #if(json.TowerRank!=null)\n        #for(intindex=0index<json.TowerRank.Length++index)\n        if 'TowerRank' in json:\n            this['mTowerRankTbl'] = json['TowerRank']\n    #if(json.MultilimitUnitLv!=null)\n        #for(intindex=0index<json.MultilimitUnitLv.Length++index)\n        if 'MultilimitUnitLv' in json:\n            this['mMultiLimitUnitLv'] = json['MultilimitUnitLv']\n    #if(json.FriendPresentItem!=null)\n        #this.mFriendPresentItemParam=newDictionary<string,FriendPresentItemParam>()\n        #for(intindex=0index<json.FriendPresentItem.Length++index)\n            #FriendPresentItemParampresentItemParam=newFriendPresentItemParam()\n            #presentItemParam.Deserialize(json.FriendPresentItem,this)\n            #this.mFriendPresentItemParam.Add(presentItemParam.iname,presentItemParam)\n    #if(json.Weather!=null)\n        #List<WeatherParam>weatherParamList=newList<WeatherParam>(json.Weather.Length)\n        #for(intindex=0index<json.Weather.Length++index)\n            #WeatherParamweatherParam=newWeatherParam()\n            #weatherParam.Deserialize(json.Weather)\n            #weatherParamList.Add(weatherParam)\n        #this.mWeatherParam=weatherParamList\n    #if(json.UnitUnlockTime!=null)\n        #this.mUnitUnlockTimeParam=newDictionary<string,UnitUnlockTimeParam>()\n        #for(intindex=0index<json.UnitUnlockTime.Length++index)\n            #UnitUnlockTimeParamunitUnlockTimeParam=newUnitUnlockTimeParam()\n            #unitUnlockTimeParam.Deserialize(json.UnitUnlockTime)\n            #this.mUnitUnlockTimeParam.Add(unitUnlockTimeParam.iname,unitUnlockTimeParam)\n    #if(json.Tobira!=null)\n        #for(intindex=0index<json.Tobira.Length++index)\n            #TobiraParamtobiraParam=newTobiraParam()\n            #tobiraParam.Deserialize(json.Tobira)\n            #this.mTobiraParam.Add(tobiraParam)\n    #if(json.TobiraCategories!=null)\n        #for(intindex=0index<json.TobiraCategories.Length++index)\n            #TobiraCategoriesParamtobiraCategoriesParam=newTobiraCategoriesParam()\n            #tobiraCategoriesParam.Deserialize(json.TobiraCategories)\n            #this.mTobiraCategoriesParam.Add(tobiraCategoriesParam.TobiraCategory,tobiraCategoriesParam)\n    #if(json.TobiraConds!=null)\n        #for(intindex=0index<json.TobiraConds.Length++index)\n            #TobiraCondsParamtobiraCondsParam=newTobiraCondsParam()\n            #tobiraCondsParam.Deserialize(json.TobiraConds)\n            #this.mTobiraCondParam.Add(tobiraCondsParam)\n    #if(json.TobiraCondsUnit!=null)\n        #for(intindex=0index<json.TobiraCondsUnit.Length++index)\n            #TobiraCondsUnitParamtobiraCondsUnitParam=newTobiraCondsUnitParam()\n            #tobiraCondsUnitParam.Deserialize(json.TobiraCondsUnit)\n            #this.mTobiraCondUnitParam.Add(tobiraCondsUnitParam.Id,tobiraCondsUnitParam)\n    #if(json.TobiraRecipe!=null)\n        #for(intindex=0index<json.TobiraRecipe.Length++index)\n            #TobiraRecipeParamtobiraRecipeParam=newTobiraRecipeParam()\n            #tobiraRecipeParam.Deserialize(json.TobiraRecipe)\n            #this.mTobiraRecipeParam.Add(tobiraRecipeParam)\n    #if(json.ConceptCard!=null)\n        #this.mConceptCard=newDictionary<string,ConceptCardParam>()\n        #for(intindex=0index<json.ConceptCard.Length++index)\n            #ConceptCardParamconceptCardParam=newConceptCardParam()\n            #conceptCardParam.Deserialize(json.ConceptCard,this)\n            #this.mConceptCard.Add(conceptCardParam.iname,conceptCardParam)\n    #intnumArray=newint[6]{json.ConceptCardLvTbl1,json.ConceptCardLvTbl2,json.ConceptCardLvTbl3,json.ConceptCardLvTbl4,json.ConceptCardLvTbl5,json.ConceptCardLvTbl6}\n    #if(0<numArray.Length&&0<numArray[0].Length)\n        #this.mConceptCardLvTbl=newOInt[numArray.Length,numArray[0].Length]\n        #for(intindex1=0index1<numArray.Length++index1)\n            #for(intindex2=0index2<numArray[index1].Length++index2)\n            #this.mConceptCardLvTbl[index1,index2]=(OInt)numArray[index1][index2]\n    #if(json.ConceptCardConditions!=null)\n        #this.mConceptCardConditions=newDictionary<string,ConceptCardConditionsParam>()\n        #for(intindex=0index<json.ConceptCardConditions.Length++index)\n            #ConceptCardConditionsParamcardConditionsParam=newConceptCardConditionsParam()\n            #cardConditionsParam.Deserialize(json.ConceptCardConditions)\n            #this.mConceptCardConditions.Add(cardConditionsParam.iname,cardConditionsParam)\n    #if(json.ConceptCardTrustReward!=null)\n        #this.mConceptCardTrustReward=newDictionary<string,ConceptCardTrustRewardParam>()\n        #for(intindex=0index<json.ConceptCardTrustReward.Length++index)\n            #ConceptCardTrustRewardParamtrustRewardParam=newConceptCardTrustRewardParam()\n            #trustRewardParam.Deserialize(json.ConceptCardTrustReward)\n            #this.mConceptCardTrustReward.Add(trustRewardParam.iname,trustRewardParam)\n    #if(json.UnitGroup!=null)\n        #this.mUnitGroup=newDictionary<string,UnitGroupParam>()\n        #for(intindex=0index<json.UnitGroup.Length++index)\n            #UnitGroupParamunitGroupParam=newUnitGroupParam()\n            #unitGroupParam.Deserialize(json.UnitGroup)\n            #this.mUnitGroup.Add(unitGroupParam.iname,unitGroupParam)\n    #if(json.JobGroup!=null)\n        #this.mJobGroup=newDictionary<string,JobGroupParam>()\n        #for(intindex=0index<json.JobGroup.Length++index)\n            #JobGroupParamjobGroupParam=newJobGroupParam()\n            #jobGroupParam.Deserialize(json.JobGroup)\n            #this.mJobGroup.Add(jobGroupParam.iname,jobGroupParam)\n    #if(json.StatusCoefficient!=null&&json.StatusCoefficient.Length>0)\n        #this.mStatusCoefficient=newStatusCoefficientParam()\n        #this.mStatusCoefficient.Deserialize(json.StatusCoefficient[0])\n    #if(json.CustomTarget!=null)\n        #this.mCustomTarget=newDictionary<string,CustomTargetParam>()\n        #for(intindex=0index<json.CustomTarget.Length++index)\n            #CustomTargetParamcustomTargetParam=newCustomTargetParam()\n            #customTargetParam.Deserialize(json.CustomTarget)\n            #this.mCustomTarget.Add(customTargetParam.iname,customTargetParam)\n    #if(json.SkillAbilityDerive!=null&&json.SkillAbilityDerive.Length>0)\n        if 'SkillAbilityDerive' in json:\n            this['mSkillAbilityDeriveParam'] = newSkillAbilityDeriveParam[json['SkillAbilityDerive'].Length]\n        #for(intindex=0index<json.SkillAbilityDerive.Length++index)\n            #this.mSkillAbilityDeriveParam=newSkillAbilityDeriveParam(index)\n            #this.mSkillAbilityDeriveParam.Deserialize(json.SkillAbilityDerive,this)\n        #for(intindex=0index<this.mSkillAbilityDeriveParam.Length++index)\n            #SkillAbilityDeriveDataabilityDeriveData=newSkillAbilityDeriveData()\n            #List<SkillAbilityDeriveParam>abilityDeriveParam=this.FindAditionalSkillAbilityDeriveParam(this.mSkillAbilityDeriveParam)\n            #abilityDeriveData.Setup(this.mSkillAbilityDeriveParam,abilityDeriveParam)\n            #this.mSkillAbilityDerives.Add(abilityDeriveData)\n    #if(json.Tips!=null&&json.Tips.Length>0)\n        if 'Tips' in json:\n            this['mTipsParam'] = newTipsParam[json['Tips'].Length]\n        #for(intindex=0index<json.Tips.Length++index)\n            #this.mTipsParam=newTipsParam()\n            #this.mTipsParam.Deserialize(json.Tips)\n    #if(json.GuildEmblem!=null)\n        #if(this.mGuildEmblemParam==null)\n        if 'GuildEmblem' in json:\n            this['mGuildEmblemParam'] = newList<GuildEmblemParam>\n        #if(this.mGuildEmblemDictionary==null)\n        if 'GuildEmblem' in json:\n            this['mGuildEmblemDictionary'] = newDictionary<string,GuildEmblemParam>\n        #for(intindex=0index<json.GuildEmblem.Length++index)\n            #JSON_GuildEmblemParamdata=json.GuildEmblem\n            #if(!string.IsNullOrEmpty(data.iname))\n                #GuildEmblemParamguildEmblemParam=this.mGuildEmblemParam.Find((Predicate<GuildEmblemParam>)(p=>p.Iname==data.iname))\n                #if(guildEmblemParam==null)\n                    #guildEmblemParam=newGuildEmblemParam()\n                    #this.mGuildEmblemParam.Add(guildEmblemParam)\n                #guildEmblemParam.Deserialize(data)\n                #if(this.mGuildEmblemDictionary.ContainsKey(guildEmblemParam.Iname))\n                #thrownewException(\"Overlap:GuildEmblem[\"+guildEmblemParam.Iname+\"]\")\n                #this.mGuildEmblemDictionary.Add(guildEmblemParam.Iname,guildEmblemParam)\n    #if(json.GuildFacility!=null)\n        #if(this.mGuildFacilityParam==null)\n        if 'GuildFacility' in json:\n            this['mGuildFacilityParam'] = newList<GuildFacilityParam>\n        #if(this.mGuildFacilityDictionary==null)\n        if 'GuildFacility' in json:\n            this['mGuildFacilityDictionary'] = newDictionary<string,GuildFacilityParam>\n        #for(intindex=0index<json.GuildFacility.Length++index)\n            #JSON_GuildFacilityParamdata=json.GuildFacility\n            #if(!string.IsNullOrEmpty(data.iname))\n                #GuildFacilityParamguildFacilityParam=this.mGuildFacilityParam.Find((Predicate<GuildFacilityParam>)(p=>p.Iname==data.iname))\n                #if(guildFacilityParam==null)\n                    #guildFacilityParam=newGuildFacilityParam()\n                    #this.mGuildFacilityParam.Add(guildFacilityParam)\n                #guildFacilityParam.Deserialize(data)\n                #if(this.mGuildFacilityDictionary.ContainsKey(guildFacilityParam.Iname))\n                #thrownewException(\"Overlap:GuildFacilityParam[\"+guildFacilityParam.Iname+\"]\")\n                #this.mGuildFacilityDictionary.Add(guildFacilityParam.Iname,guildFacilityParam)\n    #if(json.GuildFacilityLvTbl!=null)\n        #if(this.mGuildFacilityLvParam==null)\n        if 'GuildFacilityLvTbl' in json:\n            this['mGuildFacilityLvParam'] = newGuildFacilityLvParam[json['GuildFacilityLvTbl'].Length]\n        #for(intindex=0index<json.GuildFacilityLvTbl.Length++index)\n            #GuildFacilityLvParamguildFacilityLvParam=newGuildFacilityLvParam()\n            #guildFacilityLvParam.Deserialize(json.GuildFacilityLvTbl)\n            #this.mGuildFacilityLvParam=guildFacilityLvParam\n    #if(json.DynamicTransformUnit!=null)\n        #List<DynamicTransformUnitParam>transformUnitParamList=newList<DynamicTransformUnitParam>(json.DynamicTransformUnit.Length)\n        #for(intindex=0index<json.DynamicTransformUnit.Length++index)\n            #DynamicTransformUnitParamtransformUnitParam=newDynamicTransformUnitParam()\n            #transformUnitParam.Deserialize(json.DynamicTransformUnit)\n            #transformUnitParamList.Add(transformUnitParam)\n        #this.mDynamicTransformUnitParam=transformUnitParamList\n    #if(json.ConvertUnitPieceExclude!=null&&json.ConvertUnitPieceExclude.Length>0)\n        if 'ConvertUnitPieceExclude' in json:\n            this['mConvertUnitPieceExcludeParam'] = newConvertUnitPieceExcludeParam[json['ConvertUnitPieceExclude'].Length]\n        #for(intindex=0index<json.ConvertUnitPieceExclude.Length++index)\n            #this.mConvertUnitPieceExcludeParam=newConvertUnitPieceExcludeParam()\n            #this.mConvertUnitPieceExcludeParam.Deserialize(json.ConvertUnitPieceExclude)\n    #if(json.RecommendedArtifact!=null&&json.RecommendedArtifact.Length>0)\n        #this.mRecommendedArtifactList=newRecommendedArtifactList()\n        #this.mRecommendedArtifactList.Deserialize(json.RecommendedArtifact)\n    #RaidMaster.Deserialize<RaidPeriodParam,JSON_RaidPeriodParam>(refthis.mRaidPeriodParam,json.RaidPeriod)\n    #RaidMaster.Deserialize<RaidAreaParam,JSON_RaidAreaParam>(refthis.mRaidAreaParam,json.RaidArea)\n    #RaidMaster.Deserialize<RaidBossParam,JSON_RaidBossParam>(refthis.mRaidBossParam,json.RaidBoss)\n    #RaidMaster.Deserialize<RaidBattleRewardParam,JSON_RaidBattleRewardParam>(refthis.mRaidBattleRewardParam,json.RaidBattleReward)\n    #RaidMaster.Deserialize<RaidBeatRewardParam,JSON_RaidBeatRewardParam>(refthis.mRaidBeatRewardParam,json.RaidBeatReward)\n    #RaidMaster.Deserialize<RaidDamageRatioRewardParam,JSON_RaidDamageRatioRewardParam>(refthis.mRaidDamageRatioRewardParam,json.RaidDamageRatioReward)\n    #RaidMaster.Deserialize<RaidAreaClearRewardParam,JSON_RaidAreaClearRewardParam>(refthis.mRaidAreaClearRewardParam,json.RaidAreaClearReward)\n    #RaidMaster.Deserialize<RaidCompleteRewardParam,JSON_RaidCompleteRewardParam>(refthis.mRaidCompleteRewardParam,json.RaidCompleteReward)\n    #RaidMaster.Deserialize<RaidRewardParam,JSON_RaidRewardParam>(refthis.mRaidRewardParam,json.RaidReward)\n    #if(json.SkillMotion!=null)\n        #List<SkillMotionParam>skillMotionParamList=newList<SkillMotionParam>(json.SkillMotion.Length)\n        #for(intindex=0index<json.SkillMotion.Length++index)\n            #SkillMotionParamskillMotionParam=newSkillMotionParam()\n            #skillMotionParam.Deserialize(json.SkillMotion)\n            #skillMotionParamList.Add(skillMotionParam)\n        #this.mSkillMotionParam=skillMotionParamList\n    #this.Loaded=true\n    #returntrue\nreturn this\n",
    "MultiTowerFloorParam": "def MultiTowerFloorParam(json):\n    this={}#MultiTowerFloorParamjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'id' in json:\n        this['id'] = json['id']\n    if 'title' in json:\n        this['title'] = json['title']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'expr' in json:\n        this['expr'] = json['expr']\n    if 'cond' in json:\n        this['cond'] = json['cond']\n    if 'tower_id' in json:\n        this['tower_id'] = json['tower_id']\n    if 'cond_floor' in json:\n        this['cond_floor'] = json['cond_floor']\n    if 'pt' in json:\n        this['pt'] = json['pt']\n    if 'lv' in json:\n        this['lv'] = json['lv']\n    if 'joblv' in json:\n        this['joblv'] = json['joblv']\n    if 'reward_id' in json:\n        this['reward_id'] = json['reward_id']\n    if 'floor' in json:\n        this['floor'] = json['floor']\n    if 'unitnum' in json:\n        this['unitnum'] = json['unitnum']\n    if 'notcon' in json:\n        this['notcon'] = json['notcon']\n    if 'me_id' in json:\n        this['me_id'] = json['me_id']\n    if 'is_wth_no_chg' in json:\n        this['is_wth_no_chg'] = json['is_wth_no_chg']\n    if 'wth_set_id' in json:\n        this['wth_set_id'] = json['wth_set_id']\n    if 'is_skip' in json:\n        this['is_skip'] = json['is_skip']!=0\n    #this.map.Clear()\n    #if(json.map!=null)\n        #for(intindex=0index<json.map.Length++index)\n            #MapParammapParam=newMapParam()\n            #mapParam.Deserialize(json.map)\n            #this.map.Add(mapParam)\n    #GameManagerinstance=MonoSingleton<GameManager>.Instance\n    #this.BaseQuest=instance.FindQuest(this.tower_id)\n    #QuestParamquestParam=this.GetQuestParam()\n    #instance.AddMTQuest(questParam.iname,questParam)\nreturn this\n",
    "MultiTowerRewardItem": "def MultiTowerRewardItem(json):\n    this={}#MultiTowerRewardItemjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'round_st' in json:\n        this['round_st'] = json['round_st']\n    if 'round_ed' in json:\n        this['round_ed'] = json['round_ed']\n    if 'itemname' in json:\n        this['itemname'] = json['itemname']\n    if 'num' in json:\n        this['num'] = json['num']\n    if 'type' in json:\n        this['type'] = json['type']\nreturn this\n",
    "MultiTowerRewardParam": "def MultiTowerRewardParam(json):\n    this={}#MultiTowerRewardParamjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    #if(json.rewards==null)\n    #return\n    if 'rewards' in json:\n        this['mReward'] = newMultiTowerRewardItem[json['rewards'].Length]\n    #for(intindex=0index<json.rewards.Length++index)\n        #this.mReward=newMultiTowerRewardItem()\n        #this.mReward.Deserialize(json.rewards)\nreturn this\n",
    "ObjectiveParam": "def ObjectiveParam(json):\n    this={}#ObjectiveParamjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    #if(json.objective==null)\n    #thrownewInvalidJSONException()\n    if 'objective' in json:\n        this['objective'] = json['objective']\nreturn this\n",
    "ConceptCardconcept_c": "def ConceptCardconcept_c(json):\n    this={}#ConceptCardconcept_cards)\n    #if(concept_cards==null)\n    #return\n    #ConceptCardDataconceptCardByUniqueId=this.FindConceptCardByUniqueID(concept_cards.iid)\n    #if(conceptCardByUniqueId!=null)\n        #try\n            #conceptCardByUniqueId.Deserialize(concept_cards)\n        #catch(Exceptionex)\n            #DebugUtility.LogException(ex)\n    #UnitDataunitData=this.Units.Find((Predicate<UnitData>)(ud=>\n        #if(ud.ConceptCard!=null)\n        #return(long)ud.ConceptCard.UniqueID==concept_cards.iid\n        #returnfalse\n        #}))\n        #if(unitData==null)\n        #return\n        #unitData.ConceptCard=conceptCardByUniqueId\n    #\n    #publicvoidDeserialize(JSON_ConceptCardconcept_cards,boolis_data_override=true)\n        #if(is_data_override&&(concept_cards==null||concept_cards.Length<=0))\n            #this.mConceptCards.Clear()\n            #this.mConceptCardNum.Clear()\n        #else\n            #if(concept_cards==null)\n            #return\n            #for(inti=0i<concept_cards.Length++i)\n                #ConceptCardDataconceptCardData=this.FindConceptCardByUniqueID(concept_cards[i].iid)\n                #if(conceptCardData==null)\n                    #try\n                        #conceptCardData=newConceptCardData()\n                        #conceptCardData.Deserialize(concept_cards[i])\n                        #this.mConceptCards.Add(conceptCardData)\n                    #catch(Exceptionex)\n                        #DebugUtility.LogException(ex)\n                        #continue\n                #UnitDataunitData=this.Units.Find((Predicate<UnitData>)(ud=>\n                    #if(ud.ConceptCard!=null)\n                    #return(long)ud.ConceptCard.UniqueID==concept_cards[i].iid\n                    #returnfalse\n                    #}))\n                    #if(unitData!=null)\n                    #unitData.ConceptCard=conceptCardData\n                #if(is_data_override)\n                    #inti=0\n                    #while(i<this.mConceptCards.Count)\n                        #if(Array.Find<JSON_ConceptCard>(concept_cards,(Predicate<JSON_ConceptCard>)(p=>p.iid==(long)this.mConceptCards[i].UniqueID))!=null)\n                            #++i\n                        #else\n                            #UnitDataunitData=this.Units.Find((Predicate<UnitData>)(ud=>\n                                #if(ud.ConceptCard!=null)\n                                #return(long)ud.ConceptCard.UniqueID==(long)this.mConceptCards[i].UniqueID\n                                #returnfalse\n                                #}))\n                                #if(unitData!=null)\n                                #unitData.ConceptCard=(ConceptCardData)null\n                                #this.mConceptCards.RemoveAt(i)\n                    #this.UpdateConceptCardNum()\n            #\n            #publicvoidDeserialize(JSON_ConceptCardMaterialconcept_card_materials,boolis_data_override=true)\n                #if(is_data_override&&(concept_card_materials==null||concept_card_materials.Length<=0))\n                    #this.mConceptCardExpMaterials.Clear()\n                    #this.mConceptCardTrustMaterials.Clear()\n                #else\n                    #if(concept_card_materials==null)\n                    #return\n                    #this.mConceptCardExpMaterials.Clear()\n                    #this.mConceptCardTrustMaterials.Clear()\n                    #for(intindex=0index<concept_card_materials.Length++index)\n                        #ConceptCardParamconceptCardParam=MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam(concept_card_materials.iname)\n                        #if(conceptCardParam!=null)\n                            #try\n                                #ConceptCardMaterialDatacardMaterialData=newConceptCardMaterialData()\n                                #cardMaterialData.Deserialize(concept_card_materials)\n                                #if(conceptCardParam.type==eCardType.Enhance_exp)\n                                #this.mConceptCardExpMaterials.Add(cardMaterialData)\n                                #elseif(conceptCardParam.type==eCardType.Enhance_trust)\n                                #this.mConceptCardTrustMaterials.Add(cardMaterialData)\n                            #catch(Exceptionex)\n                                #DebugUtility.LogException(ex)\n            #\n            #publicvoidDeserialize(stringinames)\n                #this.mSkinConceptCards.Clear()\n                #if(inames==null)\n                #return\n                #for(intindex=0index<inames.Length++index)\n                    #SkinConceptCardDataskinConceptCardData=newSkinConceptCardData()\n                    #skinConceptCardData.Deserialize(inames)\n                    #this.mSkinConceptCards.Add(skinConceptCardData)\n            #\n            #publicvoidDeserialize(Json_Skinskins)\n                #if(this.mSkins==null)\n                #this.mSkins=newList<string>()\n                #this.mSkins.Clear()\n                #if(skins==null||skins.Length<1)\n                #return\n                #for(intindex=0index<skins.Length++index)\n                    #if(skins!=null&&!string.IsNullOrEmpty(skins.iname))\n                    #this.mSkins.Add(skins.iname)\n            #\n            #publicvoidDeserialize(Json_Partyparties)\n                #for(intindex=0index<this.mPartys.Count++index)\n                #this.mPartys.Reset()\n                #if(parties==null)\n                #thrownewInvalidJSONException()\n                #for(intindex1=0index1<parties.Length++index1)\n                    #intindex2=index1\n                    #if(!string.IsNullOrEmpty(parties[index1].ptype))\n                    #index2=(int)PartyData.GetPartyTypeFromString(parties[index1].ptype)\n                    #this.mPartys[index2].Deserialize(parties[index1])\n                    #intlastSelectionIndex=0\n                    #PartyWindow2.EditPartyTypeseditPartyType=((PlayerPartyTypes)index2).ToEditPartyType()\n                    #if(PartyUtility.LoadTeamPresets(editPartyType,outlastSelectionIndex,false)==null)\n                        #intmaxTeamCount=editPartyType.GetMaxTeamCount()\n                        #List<PartyEditData>teams=newList<PartyEditData>()\n                        #for(intindex3=0index3<maxTeamCount++index3)\n                            #PartyEditDatapartyEditData=newPartyEditData(PartyUtility.CreateDefaultPartyNameFromIndex(index3),this.mPartys[index2])\n                            #teams.Add(partyEditData)\n                        #PartyUtility.SaveTeamPresets(editPartyType,0,teams,false)\n            #\n            #publicboolDeserialize(Json_Mailmails)\n                #this.Mails.Clear()\n                #if(mails==null)\n                #returntrue\n                #for(intindex=0index<mails.Length++index)\n                    #MailDatamailData=newMailData()\n                    #if(!mailData.Deserialize(mails))\n                        #DebugUtility.Assert(\"FailedMailDeserialize.\")\n                        #returnfalse\n                    #this.Mails.Add(mailData)\n                #returntrue\n            #\n            #publicboolDeserialize(Json_Mailsmails)\n                #this.MailPage=newMailPageData()\n                #if(mails==null)\n                #returnfalse\n                #this.MailPage.Deserialize(mails.list)\n                #this.MailPage.Deserialize(mails.option)\n                #returntrue\n            #\n            #publicvoidDeserialize(Json_Friendfriends)\n                #this.Deserialize(friends,FriendStates.Friend)\n                #this.Deserialize(friends,FriendStates.Follwer)\n                #this.Deserialize(friends,FriendStates.Follow)\n            #\n            #publicvoidDeserialize(Json_Friendfriends,FriendStatesstate)\n                #switch(state)\n                    #caseFriendStates.Friend:\n                    #this.Friends.Clear()\n                    #break\n                    #caseFriendStates.Follow:\n                    #this.FriendsFollow.Clear()\n                    #break\n                    #caseFriendStates.Follwer:\n                    #this.FriendsFollower.Clear()\n                    #break\n                    #default:\n                    #return\n                #if(friends==null)\n                #return\n                #for(intindex=0index<friends.Length++index)\n                    #FriendDatafriendData=newFriendData()\n                    #try\n                        #friendData.Deserialize(friends)\n                        #if(friendData.State==state)\n                            #switch(friendData.State)\n                                #caseFriendStates.Friend:\n                                #this.Friends.Add(friendData)\n                                #continue\n                                #caseFriendStates.Follow:\n                                #this.FriendsFollow.Add(friendData)\n                                #continue\n                                #caseFriendStates.Follwer:\n                                #this.FriendsFollower.Add(friendData)\n                                #continue\n                                #default:\n                                #continue\n                    #catch(Exceptionex)\n                        #DebugUtility.LogException(ex)\n                #if(state!=FriendStates.Friend)\n                    #if(state!=FriendStates.Follwer)\n                    #return\n                    #this.FollowerNum=this.FriendsFollower.Count\n                #else\n                #this.FriendNum=this.Friends.Count\n            #\n            #publicvoidDeserialize(Json_Supportsupports)\n                #this.Supports.Clear()\n                #if(supports==null)\n                #return\n                #for(intindex=0index<supports.Length++index)\n                    #SupportDatasupportData=newSupportData()\n                    #try\n                        #supportData.Deserialize(supports)\n                        #this.Supports.Add(supportData)\n                    #catch(Exceptionex)\n                        #DebugUtility.LogException(ex)\n            #\n            #publicvoidDeserialize(Json_MultiFuidsfuids)\n                #this.MultiFuids.Clear()\n                #if(fuids==null)\n                #return\n                #for(intindex=0index<fuids.Length++index)\n                    #MultiFuidmultiFuid=newMultiFuid()\n                    #try\n                        #multiFuid.Deserialize(fuids)\n                        #this.MultiFuids.Add(multiFuid)\n                    #catch(Exceptionex)\n                        #DebugUtility.LogException(ex)\n            #\n            #publicvoidDeserialize(FriendPresentWishList.Jsonjsons)\n                #try\n                    #this.FriendPresentWishList.Clear()\n                    #if(jsons==null)\n                    #return\n                    #this.FriendPresentWishList.Deserialize(jsons)\n                #catch(Exceptionex)\n                    #DebugUtility.LogException(ex)\n            #\n            #publicvoidDeserialize(FriendPresentReceiveList.Jsonjsons)\n                #try\n                    #this.FriendPresentReceiveList.Clear()\n                    #if(jsons==null)\n                    #return\n                    #this.FriendPresentReceiveList.Deserialize(jsons)\n                #catch(Exceptionex)\n                    #DebugUtility.LogException(ex)\n            #\n            #publicboolDeserialize(Json_Notifynotify)\n                #if(notify==null)\n                #returntrue\n                #this.mFirstLogin=(notify.bonus>>5&1)!=0\n                #this.mLoginBonusCount=notify.bonus&31\n                #this.mLoginBonus=notify.logbonus\n                #this.mLoginBonus28days=(Json_LoginBonusTable)null\n                #this.mPremiumLoginBonus=(Json_LoginBonusTable)null\n                #if(notify.logbotables!=null)\n                    #for(intindex=0index<notify.logbotables.Length++index)\n                        #if(notify.logbotables!=null&&!string.IsNullOrEmpty(notify.logbotables.type))\n                            #this.mLoginBonusTables[notify.logbotables.type]=notify.logbotables\n                            #if(this.mFirstLogin)\n                            #this.mLoginBonusQueue.Enqueue(notify.logbotables.type)\n                            #if(notify.logbotables.bonus_units!=null&&notify.logbotables.premium_bonuses==null)\n                            #this.mLoginBonus28days=notify.logbotables\n                            #elseif(notify.logbotables.premium_bonuses!=null)\n                            #this.mPremiumLoginBonus=notify.logbotables\n                #this.SupportCount=1\n                #this.SupportGold=notify.supgold\n                #returntrue\n            #\n            #publicvoidDeserialize(Json_Versusjson)\n                #VERSUS_TYPEtype=VERSUS_TYPE.Free\n                if 'point' in json:\n                    this['mVersusPoint'] = json['point']\n                #if(json.counts==null)\n                #return\n                #for(intindex=0index<json.counts.Length++index)\n                    #if(string.Compare(json.counts.type,VERSUS_TYPE.Free.ToString().ToLower())==0)\n                    #type=VERSUS_TYPE.Free\n                    #elseif(string.Compare(json.counts.type,VERSUS_TYPE.Tower.ToString().ToLower())==0)\n                    #type=VERSUS_TYPE.Tower\n                    #elseif(string.Compare(json.counts.type,VERSUS_TYPE.Friend.ToString().ToLower())==0)\n                    #type=VERSUS_TYPE.Friend\n                    #this.SetVersusWinCount(type,json.counts.win)\n                    #this.SetVersusTotalCount(type,json.counts.win+json.counts.lose)\n            #\n            #publicvoidSetVersusWinCount(VERSUS_TYPEtype,intwincnt)\n                #if(type!=VERSUS_TYPE.Free&&type!=VERSUS_TYPE.Tower&&type!=VERSUS_TYPE.Friend)\n                #return\n                #this.mVersusWinCount[(int)type]=wincnt\n            #\n            #publicvoidAddVersusTotalCount(VERSUS_TYPEtype,intaddcnt)\n                #if(type!=VERSUS_TYPE.Free&&type!=VERSUS_TYPE.Tower&&type!=VERSUS_TYPE.Friend)\n                #return\n                #this.mVersusTotalCount[(int)type]=addcnt+this.mVersusTotalCount[(int)type]\n            #\n            #publicvoidSetVersusTotalCount(VERSUS_TYPEtype,intcnt)\n                #if(type!=VERSUS_TYPE.Free&&type!=VERSUS_TYPE.Tower&&type!=VERSUS_TYPE.Friend)\n                #return\n                #this.mVersusTotalCount[(int)type]=cnt\n            #\n            #publicvoidSetVersusRankpoint(intpoint)\n                #this.mVersusPoint=point\n            #\n            #publicvoidSetHaveAward(stringawards)\n                #if(awards==null||awards.Length<=0)\n                #return\n                #this.mHaveAward.Clear()\n                #for(intindex=0index<awards.Length++index)\n                    #if(!string.IsNullOrEmpty(awards))\n                    #this.mHaveAward.Add(awards)\n            #\n            #publicvoidDeserialize(JSON_PlayerGuildplayer_guild)\n                #this.mPlayerGuild=(PlayerGuildData)null\n                #if(player_guild==null)\n                #return\n                #try\n                    #this.mPlayerGuild=newPlayerGuildData()\n                    #this.mPlayerGuild.Deserialize(player_guild)\n                #catch(Exceptionex)\n                    #DebugUtility.LogException(ex)\n            #\n            #publicvoidDeserialize(JSON_Guildguild)\n                #if(guild!=null)\n                    #try\n                        #if(this.mGuild==null)\n                        #this.mGuild=newGuildData()\n                        #this.mGuild.Deserialize(guild)\n                    #catch(Exceptionex)\n                        #DebugUtility.LogException(ex)\n                #else\n                #this.mGuild=(GuildData)null\n            #\n            #publicboolIsFirstLogin\n                #get\n                    #returnthis.mFirstLogin\n            #\n            #publicvoidForceFirstLogin()\n                #this.mFirstLogin=true\n            #\n            #publicintLoginCountWithType(stringtype)\n                #if(string.IsNullOrEmpty(type)||!this.mLoginBonusTables.ContainsKey(type))\n                #return0\n                #returnthis.mLoginBonusTables[type].count\n            #\n            #publicJson_LoginBonusRecentLoginBonus\n                #get\n                    #if(this.LoginBonus!=null&&0<this.mLoginBonusCount&&this.mLoginBonusCount<=this.LoginBonus.Length)\n                    #returnthis.LoginBonus[this.mLoginBonusCount-1]\n                    #return(Json_LoginBonus)null\n            #\n            #publicJson_LoginBonusFindRecentLoginBonus(stringtype)\n                #Json_LoginBonusloginBonuses=this.FindLoginBonuses(type)\n                #if(loginBonuses==null)\n                #return(Json_LoginBonus)null\n                #intnum=this.LoginCountWithType(type)\n                #if(num<1||loginBonuses.Length<num)\n                #return(Json_LoginBonus)null\n                #returnloginBonuses[num-1]\n            #\n            #publicJson_LoginBonusTableLoginBonus28days\n                #get\n                    #returnthis.mLoginBonus28days\n            #\n            #publicJson_LoginBonusLoginBonus\n                #get\n                    #returnthis.mLoginBonus\n            #\n            #publicJson_LoginBonusFindLoginBonuses(stringtype)\n                #if(string.IsNullOrEmpty(type))\n                #returnthis.mLoginBonus\n                #if(!this.mLoginBonusTables.ContainsKey(type))\n                #return(Json_LoginBonus)null\n                #returnthis.mLoginBonusTables[type].bonuses\n            #\n            #publicJson_LoginBonusTablePremiumLoginBonus\n                #get\n                    #returnthis.mPremiumLoginBonus\n            #\n            #publicintLoginBonusCount\n                #get\n                    #returnthis.mLoginBonusCount\n            #\n            #publicstringGetLoginBonusePrefabName(stringtype)\n                #if(string.IsNullOrEmpty(type))\n                #return(string)null\n                #if(!this.mLoginBonusTables.ContainsKey(type))\n                #return(string)null\n                #returnthis.mLoginBonusTables[type].prefab\n            #\n            #publicstringGetLoginBonuseUnitIDs(stringtype)\n                #if(string.IsNullOrEmpty(type))\n                #return(string)null\n                #if(!this.mLoginBonusTables.ContainsKey(type))\n                #return(string)null\n                #returnthis.mLoginBonusTables[type].bonus_units\n            #\n            #publicboolIsLastLoginBonus(stringtype)\n                #if(string.IsNullOrEmpty(type)||!this.mLoginBonusTables.ContainsKey(type))\n                #returnfalse\n                #returnthis.mLoginBonusTables[type].lastday>0\n            #\n            #publicboolCheckUnlock(UnlockTargetstarget)\n                #return((UnlockTargets)(int)this.mUnlocks&target)!=(UnlockTargets)0\n            #\n            #publicvoidSetParty(intindex,PartyDataparty)\n                #if(index<0||index>this.mPartys.Count-1)\n                #return\n                #this.mPartys.SetParty(party)\n            #\n            #publicUnitDataFindUnitDataByUnitID(stringiname)\n                #for(intindex=0index<this.mUnits.Count++index)\n                    #if(iname==this.mUnits.UnitParam.iname)\n                    #returnthis.mUnits\n                #return(UnitData)null\n            #\n            #publicUnitDataFindUnitDataByUniqueID(longiid)\n                #try\n                    #returnthis.mUniqueID2UnitData[iid]\n                #catch(Exceptionex)\n                    #return(UnitData)null\n            #\n            #publicUnitDataFindUnitDataByUniqueParam(UnitParamunit)\n                #for(intindex=0index<this.mUnits.Count++index)\n                    #if(unit==this.mUnits.UnitParam)\n                    #returnthis.mUnits\n                #return(UnitData)null\n            #\n            #publicPartyDataFindPartyOfType(PlayerPartyTypestype)\n                #returnthis.mPartys[(int)type]\n            #\n            #publicvoidSetQuestState(stringname,QuestStatesst)\n                #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(name)\n                #if(quest==null)\n                #return\n                #quest.state=st\n                #this.mQuestListDirty=true\n            #\n            #publicvoidResetQuestStates()\n                #QuestParamquests=MonoSingleton<GameManager>.Instance.Quests\n                #for(intindex=quests.Length-1index>=0--index)\n                #quests.state=QuestStates.New\n                #this.mQuestListDirty=true\n            #\n            #publicvoidResetQuestChallengeResets()\n                #QuestParamquests=MonoSingleton<GameManager>.Instance.Quests\n                #for(intindex=quests.Length-1index>=0--index)\n                    #if(quests.dayReset>0)\n                        #DateTimedateTime=TimeManager.FromUnixTime(quests.end-quests.start)\n                        #if(quests.dayReset>=dateTime.Day)\n                        #quests.dailyReset=(short)0\n                #this.mQuestListDirty=true\n            #\n            #publicvoidResetQuestChallenges()\n                #QuestParamquests=MonoSingleton<GameManager>.Instance.Quests\n                #for(intindex=quests.Length-1index>=0--index)\n                    #if(quests.dayReset>0)\n                        #DateTimedateTime=TimeManager.FromUnixTime(quests.end-quests.start)\n                        #if(quests.dayReset>=dateTime.Day)\n                        #quests.dailyCount=(short)0\n                #this.mQuestListDirty=true\n            #\n            #publicvoidMarkQuestChallenged(stringname)\n                #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(name)\n                #if(quest==null||quest.state!=QuestStates.New)\n                #return\n                #this.SetQuestState(name,QuestStates.Challenged)\n            #\n            #publicvoidMarkQuestCleared(stringname)\n                #this.SetQuestState(name,QuestStates.Cleared)\n            #\n            #publicQuestParamFindLastStoryQuest()\n                #QuestParamavailableQuests=this.AvailableQuests\n                #intnum=0\n                #stringiname=PlayerPrefsUtility.GetString(PlayerPrefsUtility.LAST_SELECTED_STORY_QUEST_ID,string.Empty)\n                #if(!string.IsNullOrEmpty(iname))\n                    #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(iname)\n                    #if(quest!=null&&quest.Chapter!=null&&(quest.Chapter.sectionParam!=null&&quest.Chapter.sectionParam.storyPart>0))\n                    #num=quest.Chapter.sectionParam.storyPart\n                #for(intindex1=0index1<availableQuests.Length++index1)\n                    #if(availableQuests[index1].IsStory&&!string.IsNullOrEmpty(availableQuests[index1].ChapterID)&&(num<=0||availableQuests[index1].Chapter==null||(availableQuests[index1].Chapter.sectionParam==null||num==availableQuests[index1].Chapter.sectionParam.storyPart)))\n                        #QuestParamquestParam=availableQuests[index1]\n                        #for(intindex2=index1+1index2<availableQuests.Length++index2)\n                            #if(availableQuests[index2].IsStory&&(num<=0||availableQuests[index2].Chapter==null||(availableQuests[index2].Chapter.sectionParam==null||num==availableQuests[index2].Chapter.sectionParam.storyPart)))\n                                #questParam=availableQuests[index2]\n                                #if(availableQuests[index2].state!=QuestStates.Cleared)\n                                #returnavailableQuests[index2]\n                        #returnquestParam\n                #return(QuestParam)null\n            #\n            #publicvoidSetQuestMissionFlags(stringname,boolmissions)\n                #intmissions1=0\n                #if(missions!=null)\n                    #for(intindex=0index<missions.Length++index)\n                        #if(missions)\n                        #missions1|=1<<index\n                #this.SetQuestMissionFlags(name,missions1)\n            #\n            #publicvoidSetQuestMissionFlags(stringname,intmissions)\n                #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(name)\n                #if(quest==null)\n                #return\n                #quest.clear_missions|=missions\n            #\n            #publicboolIsQuestArchiveOpenByArea(stringchapterIname)\n                #ArchiveParamarchiveByArea=MonoSingleton<GameManager>.Instance.FindArchiveByArea(chapterIname)\n                #if(archiveByArea!=null)\n                #returnthis.IsQuestArchiveOpen(archiveByArea.iname)\n                #returnfalse\n            #\n            #publicboolIsQuestArchiveOpen(stringiname)\n                #return!string.IsNullOrEmpty(iname)&&this.OpenedQuestArchives!=null&&(this.OpenedQuestArchives.Any<OpenedQuestArchive>((Func<OpenedQuestArchive,bool>)(t=>t.iname.Equals(iname)))&&this.OpenedQuestArchives.Find((Predicate<OpenedQuestArchive>)(t=>t.iname.Equals(iname))).end_at>TimeManager.ServerTime)\n            #\n            #publicOpenedQuestArchiveGetOpenedQuestArchive(stringiname)\n                #OpenedQuestArchiveopenedQuestArchive=this.OpenedQuestArchives.Find((Predicate<OpenedQuestArchive>)(t=>t.iname.Equals(iname)))\n                #if(openedQuestArchive!=null&&openedQuestArchive.end_at>TimeManager.ServerTime)\n                #returnopenedQuestArchive\n                #return(OpenedQuestArchive)null\n            #\n            #publicvoidSetQuestChallengeNumDaily(stringname,intnum)\n                #MonoSingleton<GameManager>.Instance.FindQuest(name)?.SetChallangeCount(num)\n            #\n            #publicvoidIncrementQuestChallangeNumDaily(stringname)\n                #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(name)\n                #if(quest==null)\n                #return\n                #intnum=quest.GetChallangeCount()+1\n                #this.SetQuestChallengeNumDaily(name,num)\n            #\n            #publicboolHasItem(stringiname)\n                #ItemDataitemDataByItemId=this.FindItemDataByItemID(iname)\n                #if(itemDataByItemId!=null)\n                #returnitemDataByItemId.Num>0\n                #returnfalse\n            #\n            #publicintGetItemAmount(stringiname)\n                #ItemDataitemDataByItemId=this.FindItemDataByItemID(iname)\n                #if(itemDataByItemId!=null)\n                #returnitemDataByItemId.Num\n                #return0\n            #\n            #publicItemDataFindItemDataByItemID(stringiname)\n                #if(string.IsNullOrEmpty(iname))\n                #return(ItemData)null\n                #returnthis.mItems.Find((Predicate<ItemData>)(p=>p.ItemID==iname))\n            #\n            #publicItemDataFindItemDataByItemParam(ItemParamparam)\n                #returnthis.mItems.Find((Predicate<ItemData>)(p=>p.Param==param))\n            #\n            #publicItemDataFindInventoryByItemID(stringiname)\n                #if(string.IsNullOrEmpty(iname))\n                #return(ItemData)null\n                #for(intindex=0index<this.mInventory.Length++index)\n                    #if(this.mInventory!=null&&iname==this.mInventory.ItemID)\n                    #returnthis.mInventory\n                #return(ItemData)null\n            #\n            #publicArtifactDataFindArtifactByUniqueID(longiid)\n                #returnthis.mArtifacts.Find((Predicate<ArtifactData>)(p=>(long)p.UniqueID==iid))\n            #\n            #publicList<ArtifactData>FindArtifactsByIDs(HashSet<string>ids)\n                #returnthis.mArtifacts.FindAll((Predicate<ArtifactData>)(artifact=>ids.Contains(artifact.ArtifactParam.iname)))\n            #\n            #publicList<ArtifactData>FindArtifactsByArtifactID(stringiname)\n                #returnthis.mArtifacts.FindAll((Predicate<ArtifactData>)(p=>p.ArtifactParam.iname==iname))\n            #\n            #publicboolFindOwner(ArtifactDataarti,outUnitDataunit,outJobDatajob)\n                #unit=(UnitData)null\n                #job=(JobData)null\n                #for(intindex1=0index1<this.mUnits.Count++index1)\n                    #for(intindex2=0index2<this.mUnits[index1].Jobs.Length++index2)\n                        #for(intindex3=0index3<this.mUnits[index1].Jobs[index2].Artifacts.Length++index3)\n                            #if(this.mUnits[index1].Jobs[index2].Artifacts[index3]==(long)arti.UniqueID)\n                                #unit=this.mUnits[index1]\n                                #job=this.mUnits[index1].Jobs[index2]\n                                #returntrue\n                #returnfalse\n            #\n            #publicvoidSetPartyCurrentIndex(intindex)\n                #for(intindex1=0index1<this.mPartys.Count++index1)\n                #this.mPartys[index1].Selected=index==index1\n            #\n            #publicintGetDefensePartyIndex()\n                #for(intindex=1index<this.mPartys.Count++index)\n                    #if(this.mPartys.IsDefense)\n                    #returnindex\n                #return0\n            #\n            #publicvoidSetDefenseParty(intindex)\n                #for(intindex1=0index1<this.mPartys.Count++index1)\n                #this.mPartys[index1].IsDefense=index==index1\n            #\n            #publicintGetPartyCurrentIndex()\n                #for(intindex=0index<this.mPartys.Count++index)\n                    #if(this.mPartys.Selected)\n                    #returnindex\n                #return0\n            #\n            #publicPartyDataGetPartyCurrent()\n                #returnthis.Partys[this.GetPartyCurrentIndex()]\n            #\n            #publicvoidAutoSetLeaderUnit()\n                #List<UnitData>units=MonoSingleton<GameManager>.Instance.Player.Units\n                #if(units.Count<=0)\n                #return\n                #for(intindex1=0index1<this.mPartys.Count++index1)\n                    #PartyDatamParty=this.mPartys[index1]\n                    #if(mParty.GetUnitUniqueID(0)==0L)\n                        #for(intindex2=0index2<units.Count++index2)\n                            #UnitDataunitData=units[index2]\n                            #if(unitData!=null)\n                                #boolflag=false\n                                #for(intindex3=0index3<mParty.MAX_UNIT++index3)\n                                    #if(mParty.GetUnitUniqueID(index3)==unitData.UniqueID)\n                                        #flag=true\n                                        #break\n                                #if(!flag)\n                                    #mParty.SetUnitUniqueID(0,unitData.UniqueID)\n                                    #break\n            #\n            #publicstaticintCalcLevelFromExp(intcurrent)\n                #MasterParammasterParam=MonoSingleton<GameManager>.Instance.MasterParam\n                #intplayerLevelCap=masterParam.GetPlayerLevelCap()\n                #intnum=0\n                #intval1=0\n                #for(intindex=0index<playerLevelCap++index)\n                    #num+=masterParam.GetPlayerNextExp(index+1)\n                    #if(num>current)\n                    #returnval1\n                    #++val1\n                #returnMath.Min(Math.Max(val1,1),playerLevelCap)\n            #\n            #publicintCalcLevel()\n                #returnPlayerData.CalcLevelFromExp((int)this.mExp)\n            #\n            #publicintGetLevelExp()\n                #returnMonoSingleton<GameManager>.Instance.MasterParam.GetPlayerNextExp((int)this.mLv)\n            #\n            #publicintGetExp()\n                #return(int)this.mExp-MonoSingleton<GameManager>.Instance.MasterParam.GetPlayerLevelExp((int)this.mLv)\n            #\n            #publicintGetNextExp()\n                #MasterParammasterParam=MonoSingleton<GameManager>.Instance.MasterParam\n                #intplayerLevelCap=masterParam.GetPlayerLevelCap()\n                #intnum=0\n                #for(intindex=0index<playerLevelCap++index)\n                    #num+=masterParam.GetPlayerNextExp(index+1)\n                    #if(num>(int)this.mExp)\n                    #returnnum-(int)this.mExp\n                #return0\n            #\n            #publicvoidGainExp(intexp)\n                #intmLv=(int)this.mLv\n                #PlayerDataplayerData=this\n                #playerData.mExp=(OInt)((int)playerData.mExp+exp)\n                #this.mLv=(OInt)this.CalcLevel()\n                #if(mLv==(int)this.mLv)\n                #return\n                #this.PlayerLevelUp((int)this.mLv-mLv)\n            #\n            #privatevoidPlayerLevelUp(intdelta)\n                #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                #this.mStamina.valMax=instance.MasterParam.GetPlayerParam((int)this.mLv).pt\n                #this.mStamina.val=(OInt)Math.Min((int)this.mStamina.val+(int)instance.MasterParam.FixParam.StaminaAdd2*delta,this.StaminaStockCap)\n                #this.UpdateUnlocks()\n                #if(Network.Mode!=Network.EConnectMode.Offline)\n                #return\n                #this.SavePlayerPrefs()\n            #\n            #publicstaticintCalcVipRankFromPoint(intcurrent)\n                #if(current==0)\n                #return0\n                #MasterParammasterParam=MonoSingleton<GameManager>.Instance.MasterParam\n                #intnum1=0\n                #intnum2=0\n                #intvipRankCap=masterParam.GetVipRankCap()\n                #for(intindex=0index<vipRankCap++index)\n                    #num1+=masterParam.GetVipRankNextPoint(index+1)\n                    #if(num1<=current)\n                    #++num2\n                #returnnum2\n            #\n            #publicvoidGainVipPoint(intpoint)\n            #\n            #publicvoidAddPaymentInfo(stringproductId,intnum=1)\n                #if(this.PaymentInfos.ContainsKey(productId))\n                #this.PaymentInfos[productId].AddNum(num)\n                #else\n                #this.PaymentInfos.Add(productId,newPaymentInfo(productId,num))\n            #\n            #publicvoidUpdateUnlocks()\n                #UnlockTargetsunlockTargets=(UnlockTargets)0\n                #this.mUnlocks=(OInt)0\n                #foreach(UnlockParamunlockinMonoSingleton<GameManager>.Instance.MasterParam.Unlocks)\n                    #if(unlock!=null)\n                        #unlockTargets|=unlock.UnlockTarget\n                        #if(unlock.PlayerLevel<=this.Lv&&unlock.VipRank<=this.VipRank)\n                            #PlayerDataplayerData=this\n                            #playerData.mUnlocks=(OInt)((int)((UnlockTargets)(int)playerData.mUnlocks|unlock.UnlockTarget))\n                #PlayerDataplayerData1=this\n                #playerData1.mUnlocks=(OInt)((int)((UnlockTargets)(int)playerData1.mUnlocks|~unlockTargets))\n            #\n            #publicvoidGainGold(intgold)\n                #this.mGold=(OInt)Math.Max((int)this.mGold+gold,0)\n            #\n            #privateItemDataFindByItemID(stringitemID)\n                #try\n                    #returnthis.mID2ItemData[itemID]\n                #catch(Exceptionex)\n                    #return(ItemData)null\n            #\n            #publicboolCheckFreeGachaGold()\n                #DateTimedateTime1=TimeManager.FromUnixTime(Network.GetServerTime())\n                #DateTimedateTime2=TimeManager.FromUnixTime(this.FreeGachaGold.at)\n                #if(dateTime1.Year<dateTime2.Year||dateTime1.Month<dateTime2.Month||(dateTime1.Day<dateTime2.Day||this.FreeGachaGold.num==0))\n                #returntrue\n                #if(this.FreeGachaGold.num==(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.FreeGachaGoldMax)\n                #returnfalse\n                #returnthis.GetNextFreeGachaGoldCoolDownSec()==0L\n            #\n            #publicboolCheckFreeGachaGoldMax()\n                #DateTimedateTime1=TimeManager.FromUnixTime(Network.GetServerTime())\n                #DateTimedateTime2=TimeManager.FromUnixTime(this.FreeGachaGold.at)\n                #if(dateTime1.Year<dateTime2.Year||dateTime1.Month<dateTime2.Month||dateTime1.Day<dateTime2.Day)\n                #returnfalse\n                #returnthis.FreeGachaGold.num==(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.FreeGachaGoldMax\n            #\n            #publiclongGetNextFreeGachaGoldCoolDownSec()\n                #longserverTime=Network.GetServerTime()\n                #DateTimedateTime1=TimeManager.FromUnixTime(serverTime)\n                #DateTimedateTime2=TimeManager.FromUnixTime(this.FreeGachaGold.at)\n                #if(dateTime1.Year<dateTime2.Year||dateTime1.Month<dateTime2.Month||dateTime1.Day<dateTime2.Day)\n                #return0\n                #returnMath.Max((long)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.FreeGachaGoldCoolDownSec-(serverTime-this.FreeGachaGold.at),0L)\n            #\n            #publicboolCheckFreeGachaCoin()\n                #returnthis.GetNextFreeGachaCoinCoolDownSec()==0L\n            #\n            #publiclongGetNextFreeGachaCoinCoolDownSec()\n                #returnMath.Max((long)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.FreeGachaCoinCoolDownSec-(Network.GetServerTime()-this.FreeGachaCoin.at),0L)\n            #\n            #publicboolCheckPaidGacha()\n                #returnthis.PaidGacha.num==0\n            #\n            #publicvoidSetInventory(intindex,ItemDataitem)\n                #if(0>index||index>=this.mInventory.Length)\n                #return\n                #this.mInventory=item\n            #\n            #publicvoidSaveInventory()\n                #for(intindex=0index<this.mInventory.Length++index)\n                    #if(this.mInventory!=null)\n                    #PlayerPrefsUtility.SetString(PlayerPrefsUtility.PLAYERDATA_INVENTORY+(object)index,this.mInventory.ItemID,false)\n                    #else\n                    #PlayerPrefsUtility.DeleteKey(PlayerPrefsUtility.PLAYERDATA_INVENTORY+(object)index)\n            #\n            #publicvoidUpdateInventory()\n                #for(intindex=0index<this.mInventory.Length++index)\n                    #this.mInventory=(ItemData)null\n                    #if(PlayerPrefsUtility.HasKey(PlayerPrefsUtility.PLAYERDATA_INVENTORY+(object)index))\n                        #stringiname=PlayerPrefsUtility.GetString(PlayerPrefsUtility.PLAYERDATA_INVENTORY+(object)index,string.Empty)\n                        #if(!string.IsNullOrEmpty(iname))\n                            #ItemDataitemDataByItemId=this.FindItemDataByItemID(iname)\n                            #if(itemDataByItemId!=null)\n                            #this.mInventory=itemDataByItemId\n            #\n            #publicboolUseExpPotion(UnitDataunit,ItemDataitem)\n                #if(item==null||item.Param==null||(item.Num<=0||item.ItemType!=EItemType.ExpUpUnit))\n                #returnfalse\n                #unit.GainExp(item.Param.value,MonoSingleton<GameManager>.Instance.Player.Lv)\n                #item.Used(1)\n                #returntrue\n            #\n            #publicboolCheckFriend(stringfuid)\n                #if(string.IsNullOrEmpty(fuid))\n                #returnfalse\n                #FriendDatafriendData=this.Friends.Find((Predicate<FriendData>)(p=>p.FUID==fuid))\n                #if(friendData!=null)\n                #returnfriendData.IsFriend()\n                #returnfalse\n            #\n            #publicvoidRemoveFriendFollowerAll()\n                #MonoSingleton<GameManager>.Instance.Player.FriendsFollower.Clear()\n                #this.FollowerNum=0\n            #\n            #publicvoidRemoveFriendFollower(stringfuid)\n                #if(string.IsNullOrEmpty(fuid))\n                #return\n                #FriendDatafriendData=this.FriendsFollower.Find((Predicate<FriendData>)(p=>p.FUID==fuid))\n                #if(friendData==null)\n                #return\n                #this.FriendsFollower.Remove(friendData)\n                #--this.FollowerNum\n            #\n            #publicboolCheckEnableEquipUnit(ItemParamitem)\n                #if(item==null||item.type!=EItemType.Equip)\n                #returnfalse\n                #for(intindex=0index<this.Units.Count++index)\n                    #if(this.Units.CheckEnableEquipment(item))\n                    #returntrue\n                #returnfalse\n            #\n            #publicboolCheckEnableCreateItem(ItemParamparam,boolroot=true,intneedNum=1,NeedEquipItemListitem_list=null)\n                #boolis_ikkatsu=false\n                #returnthis.CheckEnableCreateItem(param,refis_ikkatsu,root,needNum,item_list)\n            #\n            #publicboolCheckEnableCreateItem(ItemParamparam,refboolis_ikkatsu,boolroot=true,intneedNum=1,NeedEquipItemListitem_list=null)\n                #if(root)\n                    #this.mConsumeMaterials.Clear()\n                    #this.mCreateItemCost=0\n                    #is_ikkatsu=false\n                #if(param==null||string.IsNullOrEmpty(param.recipe))\n                    #if(item_list!=null&&param.IsCommon&&(int)param.cmn_type-1==2)\n                    #item_list.Add(param,1,true)\n                    #returnfalse\n                #RecipeParamrecipe=param.Recipe\n                #if(recipe==null||recipe.items==null)\n                #returnfalse\n                #this.mCreateItemCost+=recipe.cost*needNum\n                #boolflag=true\n                #for(intindex=0index<recipe.items.Length++index)\n                    #RecipeItemrecipeItem=recipe.items\n                    #ItemDataitemDataByItemId=this.FindItemDataByItemID(recipeItem.iname)\n                    #intval1=itemDataByItemId==null?0:itemDataByItemId.Num\n                    #intnum1=recipeItem.num*needNum\n                    #if(this.mConsumeMaterials.ContainsKey(recipeItem.iname))\n                        #intnum2=Math.Min(Math.Max(val1-this.mConsumeMaterials[recipeItem.iname],0),num1)\n                        #if(num2>0)\n                            #Dictionary<string,int>consumeMaterials\n                            #stringiname\n                            #(consumeMaterials=this.mConsumeMaterials)[iname=recipeItem.iname]=consumeMaterials[iname]+num2\n                            #num1-=num2\n                    #else\n                        #intnum2=Math.Min(val1,num1)\n                        #if(num2>0)\n                            #this.mConsumeMaterials.Add(recipeItem.iname,num2)\n                            #num1-=num2\n                    #if(num1>0)\n                        #ItemParamitemParam=MonoSingleton<GameManager>.GetInstanceDirect().GetItemParam(recipeItem.iname)\n                        #if(item_list!=null)\n                            #boolis_common=itemParam.IsCommon&&index==0\n                            #if(is_common)\n                            #item_list.Add(itemParam,num1,false)\n                            #elseif(!itemParam.IsCommon&&string.IsNullOrEmpty(itemParam.recipe))\n                            #item_list.IsNotEnough=true\n                            #item_list.SetRecipeTree(newRecipeTree(itemParam),is_common)\n                        #if(!this.CheckEnableCreateItem(itemParam,refis_ikkatsu,false,num1,item_list))\n                        #flag=false\n                        #item_list?.UpRecipeTree()\n                        #if(itemParam.recipe!=null)\n                        #is_ikkatsu=true\n                #returnflag\n            #\n            #publicboolCheckEnableCreateItem(ItemParamparam,refboolis_ikkatsu,refintcost,refDictionary<string,int>consumes,NeedEquipItemListitem_list=null)\n                #returnthis.CheckEnableCreateItem(param,1,refis_ikkatsu,refcost,refconsumes,item_list)\n            #\n            #publicboolCheckEnableCreateItem(ItemParamparam,intcount,refboolis_ikkatsu,refintcost,refDictionary<string,int>consumes,NeedEquipItemListitem_list=null)\n                #boolflag=this.CheckEnableCreateItem(param,refis_ikkatsu,true,count,item_list)\n                #cost=this.mCreateItemCost\n                #consumes=this.mConsumeMaterials\n                #returnflag\n            #\n            #publicintGetCreateItemCost(ItemParamparam)\n                #boolis_ikkatsu=false\n                #this.CheckEnableCreateItem(param,refis_ikkatsu,true,1,(NeedEquipItemList)null)\n                #returnthis.mCreateItemCost\n            #\n            #publicboolCheckEnableCreateEquipItemAll(UnitDataself,EquipDataequips,refDictionary<string,int>consume,refintcost,NeedEquipItemListitem_list=null)\n                #if(self==null||equips==null)\n                #returnfalse\n                #this.mConsumeMaterials.Clear()\n                #this.mCreateItemCost=0\n                #for(intindex=0index<equips.Length++index)\n                    #EquipDataequip=equips\n                    #if(equip==null||equip.ItemParam.equipLv>self.Lv)\n                        #if(item_list!=null)\n                        #item_list.IsNotEnough=true\n                        #returnfalse\n                    #if(!equip.IsEquiped())\n                        #ItemDataitemDataByItemParam=this.FindItemDataByItemParam(equip.ItemParam)\n                        #intval1=itemDataByItemParam==null?0:itemDataByItemParam.Num\n                        #intnum1=1\n                        #if(this.mConsumeMaterials.ContainsKey(equip.ItemID))\n                            #intnum2=Math.Min(Math.Max(val1-this.mConsumeMaterials[equip.ItemID],0),num1)\n                            #if(num2>0)\n                                #Dictionary<string,int>consumeMaterials\n                                #stringitemId\n                                #(consumeMaterials=this.mConsumeMaterials)[itemId=equip.ItemID]=consumeMaterials[itemId]+num2\n                                #num1-=num2\n                        #else\n                            #intnum2=Math.Min(val1,num1)\n                            #if(num2>0)\n                                #this.mConsumeMaterials.Add(equip.ItemID,num2)\n                                #num1-=num2\n                        #if(num1!=0&&!this.CheckEnableCreateItem(equips.ItemParam,false,num1,item_list))\n                            #if(equips.ItemParam.Recipe==null&&(int)equips.ItemParam.cmn_type-1!=2)\n                                #if(item_list!=null)\n                                #item_list.IsNotEnough=true\n                                #returnfalse\n                            #if(item_list==null||!item_list.IsEnoughCommon())\n                            #returnfalse\n                #consume=this.mConsumeMaterials\n                #cost=this.mCreateItemCost\n                #if(this.Gold>=cost)\n                #returntrue\n                #if(item_list!=null)\n                #item_list.IsNotEnough=true\n                #returnfalse\n            #\n            #publicboolCheckEnableCreateEquipItemAll(UnitDataself,EquipDataequips,NeedEquipItemListitem_list=null)\n                #returnthis.CheckEnableCreateEquipItemAll(self,equips,refthis.mConsumeMaterials,refthis.mCreateItemCost,item_list)\n            #\n            #publicboolCheckEnable2(UnitDataself,EquipDataequips_base,refDictionary<string,int>consume,refintcost,refinttarget_rank,refboolcan_jobmaster,refboolcan_jobmax,NeedEquipItemListitem_list=null)\n                #JobParamjobParam=MonoSingleton<GameManager>.Instance.MasterParam.GetJobParam(self.CurrentJob.JobID)\n                #intrank=self.CurrentJob.Rank\n                #intjobRankCap=self.CurrentJob.GetJobRankCap(self)\n                #this.mConsumeMaterials.Clear()\n                #this.mCreateItemCost=0\n                #EquipDataequips=newEquipData[6]\n                #for(intlv=ranklv<=jobRankCap++lv)\n                    #boolequipItemAll2\n                    #if(lv==rank)\n                        #equipItemAll2=this.CheckEnableCreateEquipItemAll2(self,equips_base,item_list)\n                    #else\n                        #for(intindex=0index<equips.Length++index)\n                            #equips=newEquipData()\n                            #equips.Setup(jobParam.GetRankupItemID(lv,index))\n                        #equipItemAll2=this.CheckEnableCreateEquipItemAll2(self,equips,item_list)\n                    #if(equipItemAll2)\n                        #if(jobRankCap==JobParam.MAX_JOB_RANK&&lv==jobRankCap&&equipItemAll2)\n                        #can_jobmaster=true\n                        #if(lv==jobRankCap)\n                        #can_jobmax=true\n                        #consume=newDictionary<string,int>((IDictionary<string,int>)this.mConsumeMaterials)\n                        #cost=this.mCreateItemCost\n                        #target_rank=Mathf.Min(lv+1,jobRankCap)\n                    #else\n                    #break\n                #returntrue\n            #\n            #publicboolCheckEnableCreateEquipItemAll2(UnitDataself,EquipDataequips,NeedEquipItemListitem_list=null)\n                #if(self==null||equips==null)\n                #returnfalse\n                #for(intindex=0index<equips.Length++index)\n                    #EquipDataequip=equips\n                    #if(equip==null||string.IsNullOrEmpty(equip.ItemID)||equip.ItemParam.equipLv>self.Lv)\n                    #returnfalse\n                    #if(!equip.IsEquiped())\n                        #ItemDataitemDataByItemParam=this.FindItemDataByItemParam(equip.ItemParam)\n                        #intval1=itemDataByItemParam==null?0:itemDataByItemParam.Num\n                        #intnum1=1\n                        #if(this.mConsumeMaterials.ContainsKey(equip.ItemID))\n                            #intnum2=Math.Min(Math.Max(val1-this.mConsumeMaterials[equip.ItemID],0),num1)\n                            #if(num2>0)\n                                #Dictionary<string,int>consumeMaterials\n                                #stringitemId\n                                #(consumeMaterials=this.mConsumeMaterials)[itemId=equip.ItemID]=consumeMaterials[itemId]+num2\n                                #num1-=num2\n                        #else\n                            #intnum2=Math.Min(val1,num1)\n                            #if(num2>0)\n                                #this.mConsumeMaterials.Add(equip.ItemID,num2)\n                                #num1-=num2\n                        #if(num1!=0&&!this.CheckEnableCreateItem(equip.ItemParam,false,num1,item_list)&&(item_list==null||!item_list.IsEnoughCommon()))\n                            #item_list?.Remove()\n                            #returnfalse\n                #if(this.Gold>=this.mCreateItemCost)\n                #returntrue\n                #if(item_list!=null)\n                #item_list.IsNotEnough=true\n                #returnfalse\n            #\n            #publicboolSetUnitEquipment(UnitDataunit,intslotIndex)\n                #if(!unit.CurrentJob.CheckEnableEquipSlot(slotIndex))\n                    #Debug.LogError((object)\"指定スロットに装備を装着する事はできません。\")\n                    #returnfalse\n                #ItemDataitemDataByItemId=this.FindItemDataByItemID(unit.GetRankupEquipData(unit.JobIndex,slotIndex).ItemID)\n                #if(itemDataByItemId==null||itemDataByItemId.Num<=0)\n                    #Debug.LogError((object)\"装備アイテムを所持していません。\")\n                    #returnfalse\n                #unit.CurrentJob.Equip(slotIndex)\n                #unit.CalcStatus()\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)\n                #returntrue\n            #\n            #publicboolRarityUpUnit(UnitDataunit)\n                #if(!unit.CheckUnitRarityUp())\n                #returnfalse\n                #RecipeParamrarityUpRecipe=unit.GetRarityUpRecipe()\n                #if(rarityUpRecipe.cost>(int)this.mGold||!unit.UnitRarityUp())\n                #returnfalse\n                #PlayerDataplayerData=this\n                #playerData.mGold=(OInt)((int)playerData.mGold-rarityUpRecipe.cost)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.UnitUnlock)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)\n                #returntrue\n            #\n            #privatevoidConsumeAwakePieces(UnitDataunit,intnum)\n                #ItemDataitemDataByItemId1=this.FindItemDataByItemID(unit.UnitParam.piece)\n                #ItemDataitemDataByItemId2=this.FindItemDataByItemID(unit.UnitParam.piece)\n                #ItemDataitemDataByItemId3=this.FindItemDataByItemID(unit.UnitParam.piece)\n                #if(itemDataByItemId1!=null&&itemDataByItemId1.Num>0)\n                    #intnum1=itemDataByItemId1.Num<num?itemDataByItemId1.Num:num\n                    #itemDataByItemId1.Used(num1)\n                    #num-=num1\n                #if(num<1)\n                #return\n                #if(itemDataByItemId2!=null&&itemDataByItemId2.Num>0)\n                    #intnum1=itemDataByItemId2.Num<num?itemDataByItemId2.Num:num\n                    #itemDataByItemId2.Used(num1)\n                    #num-=num1\n                #if(num<1)\n                #return\n                #if(itemDataByItemId3!=null&&itemDataByItemId3.Num>0)\n                    #intnum1=itemDataByItemId3.Num<num?itemDataByItemId3.Num:num\n                    #itemDataByItemId3.Used(num1)\n                    #num-=num1\n                #if(num<1)\n                #return\n                #Debug.LogError((object)(\"減算できていない欠片個数:\"+(object)num))\n            #\n            #publicboolAwakingUnit(UnitDataunit)\n                #if(!unit.CheckUnitAwaking())\n                #returnfalse\n                #intawakeNeedPieces=unit.GetAwakeNeedPieces()\n                #if(!unit.UnitAwaking())\n                #returnfalse\n                #this.ConsumeAwakePieces(unit,awakeNeedPieces)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.UnitUnlock)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)\n                #returntrue\n            #\n            #publicList<ItemData>GetJobRankUpReturnItemData(UnitDataself,intjobNo,boolignoreEquiped=false)\n                #returnself.GetJobRankUpReturnItemData(jobNo,ignoreEquiped)\n            #\n            #publicboolJobRankUpUnit(UnitDataunit,intjobIndex)\n                #if(!unit.CheckJobRankUpAllEquip(jobIndex,true))\n                #returnfalse\n                #unit.JobRankUp(jobIndex)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.UnitUnlock)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)\n                #returntrue\n            #\n            #publicboolClassChangeUnit(UnitDataunit,intindex)\n                #if(!unit.CheckJobClassChange(index))\n                #returnfalse\n                #unit.JobClassChange(index)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.UnitUnlock)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)\n                #returntrue\n            #\n            #publicboolCheckRankUpAbility(AbilityDataability)\n                #returnability.Rank<ability.GetRankCap()&&this.AbilityRankUpCountNum!=0&&this.Gold>=MonoSingleton<GameManager>.Instance.MasterParam.GetAbilityNextGold(ability.Rank)\n            #\n            #publicboolRankUpAbility(AbilityDataability,boolis_update_badges=true)\n                #if(!this.CheckRankUpAbility(ability))\n                #returnfalse\n                #this.GainGold(-ability.GetNextGold())\n                #ability.GainExp(1)\n                #this.mAbilityRankUpCount.val=(OInt)Math.Max((int)(--this.mAbilityRankUpCount.val),0)\n                #if(is_update_badges)\n                #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)\n                #returntrue\n            #\n            #publicvoidGainItem(stringitemID,intnum)\n                #ItemDatabyItemId=this.FindByItemID(itemID)\n                #if(byItemId==null)\n                    #ItemDataitemData=newItemData()\n                    #itemData.Setup(0L,itemID,num)\n                    #itemData.IsNew=true\n                    #itemData.IsNewSkin=itemData.Param!=null&&itemData.Param.type==EItemType.UnitSkin\n                    #this.Items.Add(itemData)\n                #else\n                #byItemId.Gain(num)\n            #\n            #publicvoidGainUnit(stringunitID)\n                #UnitParamunitParam=MonoSingleton<GameManager>.Instance.MasterParam.GetUnitParam(unitID)\n                #UnitDataunitData=newUnitData()\n                #List<long>longList=newList<long>()\n                #foreach(UnitDatamUnitinthis.mUnits)\n                #longList.Add(mUnit.UniqueID)\n                #longuniqueID=1\n                #for(longindex=1index<1000L++index)\n                    #boolflag=false\n                    #foreach(longnuminlongList)\n                        #if(index==num)\n                            #flag=true\n                            #break\n                    #if(!flag)\n                        #uniqueID=index\n                        #break\n                #Json_Unitjson=newJson_Unit(){iid=uniqueID,iname=unitParam.iname,exp=0,lv=1,plus=0,rare=0,select=newJson_UnitSelectable()}\n                #json.select.job=0L\n                #json.jobs=(Json_Job)null\n                #json.abil=(Json_MasterAbility)null\n                #if(unitParam.jobsets!=null&&unitParam.jobsets.Length>0)\n                    #List<Json_Job>jsonJobList=newList<Json_Job>(unitParam.jobsets.Length)\n                    #intnum=1\n                    #for(intindex=0index<unitParam.jobsets.Length++index)\n                        #JobSetParamjobSetParam=MonoSingleton<GameManager>.Instance.GetJobSetParam(unitParam.jobsets)\n                        #if(jobSetParam!=null)\n                        #jsonJobList.Add(newJson_Job()\n                            #iid=(long)num++,\n                            #iname=jobSetParam.job,\n                            #rank=0,\n                            #equips=(Json_Equip)null,\n                            #abils=(Json_Ability)null,\n                            #artis=(Json_Artifact)null\n                            #})\n                        #for(intindex=0index<unitParam.jobsets.Length++index)\n                            #JobSetParamjobSetParam=MonoSingleton<GameManager>.Instance.GetJobSetParam(unitParam.jobsets)\n                            #while(!string.IsNullOrEmpty(jobSetParam.jobchange))\n                                #jobSetParam=MonoSingleton<GameManager>.Instance.GetJobSetParam(jobSetParam.jobchange)\n                                #if(jobSetParam!=null)\n                                #jsonJobList.Add(newJson_Job()\n                                    #iid=(long)num++,\n                                    #iname=jobSetParam.job,\n                                    #rank=0,\n                                    #equips=(Json_Equip)null,\n                                    #abils=(Json_Ability)null,\n                                    #artis=(Json_Artifact)null\n                                    #})\n                                    #else\n                                    #break\n                            #json.jobs=jsonJobList.ToArray()\n                        #unitData.Deserialize(json)\n                        #unitData.SetUniqueID(uniqueID)\n                        #unitData.JobRankUp(0)\n                        #this.mUnits.Add(unitData)\n                        #this.mUniqueID2UnitData[unitData.UniqueID]=unitData\n                    #\n                    #publicvoidGainUnit(UnitDataunit)\n                        #this.mUnits.Add(unit)\n                        #this.mUniqueID2UnitData[unit.UniqueID]=unit\n                    #\n                    #publicList<UnitData>GetSortedUnits(stringmenuID,boolincludeShujinko=true)\n                        #GameUtility.UnitSortModessortMode=GameUtility.UnitSortModes.Time\n                        #boolascending=false\n                        #if(!string.IsNullOrEmpty(menuID)&&PlayerPrefsUtility.HasKey(menuID))\n                            #stringstr=PlayerPrefsUtility.GetString(menuID,string.Empty)\n                            #ascending=PlayerPrefsUtility.GetInt(menuID+\"#\",0)!=0\n                            #try\n                                #sortMode=(GameUtility.UnitSortModes)Enum.Parse(typeof(GameUtility.UnitSortModes),str,true)\n                            #catch(Exceptionex)\n                        #returnthis.GetSortedUnits(sortMode,ascending,includeShujinko)\n                    #\n                    #publicList<UnitData>GetSortedUnits(GameUtility.UnitSortModessortMode,boolascending=false,boolincludeShujinko=true)\n                        #List<UnitData>units1=MonoSingleton<GameManager>.Instance.Player.Units\n                        #List<UnitData>units2=newList<UnitData>()\n                        #for(intindex=0index<units1.Count++index)\n                            #UnitDataunitData=units1\n                            #if(includeShujinko||!unitData.UnitParam.IsHero())\n                            #units2.Add(unitData)\n                        #intsortValues=(int)null\n                        #if(sortMode!=GameUtility.UnitSortModes.Time)\n                        #GameUtility.SortUnits(units2,sortMode,false,outsortValues,true)\n                        #else\n                        #ascending=!ascending\n                        #if(ascending)\n                        #units2.Reverse()\n                        #returnunits2\n                    #\n                    #publicUnitDataGetUnitData(longiid)\n                        #for(intindex=0index<this.mUnits.Count++index)\n                            #if(this.mUnits.UniqueID==iid)\n                            #returnthis.mUnits\n                        #return(UnitData)null\n                    #\n                    #publicintGetItemSlotAmount()\n                        #intnum=0\n                        #for(intindex=0index<this.mItems.Count++index)\n                            #if(this.mItems.Num!=0)\n                            #++num\n                        #returnnum\n                    #\n                    #publicboolCheckConceptCardCapacity(intadddValue)\n                        #return(int)GlobalVars.ConceptCardNum+adddValue<=this.ConceptCardCap\n                    #\n                    #publicboolCheckItemCapacity(ItemParamitem,intnum)\n                        #returnthis.GetItemAmount(item.iname)+num<=item.cap\n                    #\n                    #publicCreateItemResultCheckCreateItem(ItemParamitem)\n                        #if(item==null||string.IsNullOrEmpty(item.recipe))\n                        #returnCreateItemResult.NotEnough\n                        #RecipeParamrecipeParam=MonoSingleton<GameManager>.Instance.GetRecipeParam(item.recipe)\n                        #if(recipeParam==null)\n                        #returnCreateItemResult.NotEnough\n                        #boolflag=false\n                        #for(intindex=0index<recipeParam.items.Length++index)\n                            #RecipeItemrecipeItem=recipeParam.items\n                            #intnum=recipeItem.num\n                            #intitemAmount1=this.GetItemAmount(recipeItem.iname)\n                            #if(itemAmount1<num)\n                                #ItemParamitemParam=MonoSingleton<GameManager>.Instance.GetItemParam(recipeItem.iname)\n                                #if(itemParam==null||!itemParam.IsCommon)\n                                #returnCreateItemResult.NotEnough\n                                #intitemAmount2=this.GetItemAmount(MonoSingleton<GameManager>.Instance.MasterParam.GetCommonEquip(itemParam,false).iname)\n                                #if(itemAmount1+itemAmount2<num)\n                                #returnCreateItemResult.NotEnough\n                                #flag=true\n                        #returnflag?CreateItemResult.CanCreateCommon:CreateItemResult.CanCreate\n                    #\n                    #publicboolCreateItem(ItemParamitem)\n                        #RecipeParamrecipeParam=MonoSingleton<GameManager>.Instance.GetRecipeParam(item.recipe)\n                        #if(!this.CheckItemCapacity(item,1)||recipeParam.cost>this.Gold||this.CheckCreateItem(item)==CreateItemResult.NotEnough)\n                        #returnfalse\n                        #this.GainGold(-recipeParam.cost)\n                        #for(intindex=0index<recipeParam.items.Length++index)\n                            #RecipeItemrecipeItem=recipeParam.items\n                            #this.GainItem(recipeItem.iname,-recipeItem.num)\n                        #this.GainItem(item.iname,1)\n                        #returntrue\n                    #\n                    #publicboolCreateItemAll(ItemParamitem)\n                        #if(!this.CheckItemCapacity(item,1))\n                        #returnfalse\n                        #Dictionary<string,int>consumes=(Dictionary<string,int>)null\n                        #boolis_ikkatsu=false\n                        #intcost=0\n                        #if(!this.CheckEnableCreateItem(item,refis_ikkatsu,refcost,refconsumes,(NeedEquipItemList)null)||cost>this.Gold)\n                        #returnfalse\n                        #this.GainGold(-cost)\n                        #if(consumes!=null)\n                            #foreach(stringkeyinconsumes.Keys)\n                            #this.GainItem(key,-consumes[key])\n                        #this.GainItem(item.iname,1)\n                        #returntrue\n                    #\n                    #publicboolCheckEnableConvertGold()\n                        #returnthis.Items.Find((Predicate<ItemData>)(item=>\n                            #if(item.ItemType==EItemType.GoldConvert)\n                            #returnitem.Num>0\n                            #returnfalse\n                            #}))!=null\n                        #\n                        #publicShopDataGetShopData(EShopTypetype)\n                            #if(type==EShopType.Limited)\n                            #returnthis.GetLimitedShopData().GetShopData()\n                            #if(type==EShopType.Event)\n                            #returnthis.GetEventShopData().GetShopData()\n                            #returnthis.mShops[(int)type]\n                        #\n                        #publicvoidSetShopData(EShopTypetype,ShopDatashop)\n                            #switch(type)\n                                #caseEShopType.Event:\n                                #this.mEventShops.SetShopData(shop)\n                                #break\n                                #caseEShopType.Limited:\n                                #this.mLimitedShops.SetShopData(shop)\n                                #break\n                            #this.mShops[(int)type]=shop\n                        #\n                        #publicLimitedShopDataGetLimitedShopData()\n                            #returnthis.mLimitedShops\n                        #\n                        #publicvoidSetLimitedShopData(LimitedShopDatashop)\n                            #this.mLimitedShops=shop\n                        #\n                        #publicEventShopDataGetEventShopData()\n                            #returnthis.mEventShops\n                        #\n                        #publicvoidSetEventShopData(EventShopDatashop)\n                            #this.mEventShops=shop\n                        #\n                        #publicboolCheckUnlockShopType(EShopTypetype)\n                            #UnlockTargetsunlockTargets=type.ToUnlockTargets()\n                            #if(unlockTargets!=(UnlockTargets)0)\n                            #returnthis.CheckUnlock(unlockTargets)\n                            #returnfalse\n                        #\n                        #publicstringGetShopName(EShopTypetype)\n                            #stringkey=string.Empty\n                            #switch(type)\n                                #caseEShopType.Normal:\n                                #key=\"sys.SHOPNAME_NORMAL\"\n                                #break\n                                #caseEShopType.Tabi:\n                                #key=\"sys.SHOPNAME_TABI\"\n                                #break\n                                #caseEShopType.Kimagure:\n                                #key=\"sys.SHOPNAME_KIMAGURE\"\n                                #break\n                                #caseEShopType.Monozuki:\n                                #key=\"sys.SHOPNAME_MONOZUKI\"\n                                #break\n                                #caseEShopType.Tour:\n                                #key=\"sys.SHOPNAME_TOUR\"\n                                #break\n                                #caseEShopType.Arena:\n                                #key=\"sys.SHOPNAME_ARENA\"\n                                #break\n                                #caseEShopType.Multi:\n                                #key=\"sys.SHOPNAME_MULTI\"\n                                #break\n                                #caseEShopType.AwakePiece:\n                                #key=\"sys.SHOPNAME_KAKERA\"\n                                #break\n                                #caseEShopType.Artifact:\n                                #key=\"sys.SHOPNAME_ARTIFACT\"\n                                #break\n                                #caseEShopType.Event:\n                                #key=\"sys.SHOPNAME_EVENT\"\n                                #break\n                                #caseEShopType.Limited:\n                                #key=\"sys.SHOPNAME_LIMITED\"\n                                #break\n                            #if(key==string.Empty)\n                            #returnkey\n                            #returnLocalizedText.Get(key)\n                        #\n                        #publicintGetShopUpdateCost(EShopTypetype,boolgetOldCost=false)\n                            #ShopDatashopData=this.GetShopData(type)\n                            #if(shopData==null)\n                            #return0\n                            #ShopParamshopParam=MonoSingleton<GameManager>.Instance.MasterParam.GetShopParam(type)\n                            #if(shopParam==null||shopParam.UpdateCosts==null||shopParam.UpdateCosts.Length<=0)\n                            #return0\n                            #intupdateCount=shopData.UpdateCount\n                            #if(getOldCost)\n                            #--updateCount\n                            #intindex=Mathf.Clamp(updateCount,0,shopParam.UpdateCosts.Length-1)\n                            #returnshopParam.UpdateCosts\n                        #\n                        #publicintGetShopTypeCostAmount(ESaleTypetype)\n                            #switch(type)\n                                #caseESaleType.Gold:\n                                #returnthis.Gold\n                                #caseESaleType.Coin:\n                                #returnthis.Coin\n                                #caseESaleType.TourCoin:\n                                #returnthis.TourCoin\n                                #caseESaleType.ArenaCoin:\n                                #returnthis.ArenaCoin\n                                #caseESaleType.PiecePoint:\n                                #returnthis.PiecePoint\n                                #caseESaleType.MultiCoin:\n                                #returnthis.MultiCoin\n                                #caseESaleType.EventCoin:\n                                #DebugUtility.Assert(\"Thereisnocommonpriceintheeventcoin.\")\n                                #return0\n                                #caseESaleType.Coin_P:\n                                #returnthis.PaidCoin\n                                #default:\n                                #return0\n                        #\n                        #publicboolCheckShopUpdateCost(EShopTypetype)\n                            #if(this.GetShopData(type)==null)\n                            #returnfalse\n                            #ShopParamshopParam=MonoSingleton<GameManager>.Instance.MasterParam.GetShopParam(type)\n                            #if(shopParam==null)\n                            #returnfalse\n                            #returnthis.GetShopUpdateCost(type,false)<=this.GetShopTypeCostAmount(shopParam.UpdateCostType)\n                        #\n                        #publicvoidDEBUG_BUY_ITEM_UPDATED(EShopTypeshoptype)\n                            #ShopDatashopData=this.GetShopData(shoptype)\n                            #ShopParamshopParam=MonoSingleton<GameManager>.Instance.MasterParam.GetShopParam(shoptype)\n                            #if(shopData==null||shopParam==null||!this.CheckShopUpdateCost(shoptype))\n                            #return\n                            #for(intindex=0index<shopData.items.Count++index)\n                            #shopData.items.is_soldout=false\n                            #intshopUpdateCost=this.GetShopUpdateCost(shoptype,false)\n                            #switch(shopParam.UpdateCostType)\n                                #caseESaleType.Gold:\n                                #this.mGold=(OInt)Math.Max((int)this.mGold-shopUpdateCost,0)\n                                #break\n                                #caseESaleType.Coin:\n                                #this.DEBUG_CONSUME_COIN(shopUpdateCost)\n                                #break\n                                #caseESaleType.TourCoin:\n                                #this.mTourCoin=(OInt)Math.Max((int)this.mTourCoin-shopUpdateCost,0)\n                                #break\n                                #caseESaleType.ArenaCoin:\n                                #this.mArenaCoin=(OInt)Math.Max((int)this.mArenaCoin-shopUpdateCost,0)\n                                #break\n                                #caseESaleType.PiecePoint:\n                                #this.mPiecePoint=(OInt)Math.Max((int)this.mPiecePoint-shopUpdateCost,0)\n                                #break\n                                #caseESaleType.MultiCoin:\n                                #this.mMultiCoin=(OInt)Math.Max((int)this.mMultiCoin-shopUpdateCost,0)\n                                #break\n                                #caseESaleType.EventCoin:\n                                #stringshopCostIname=GlobalVars.EventShopItem.shop_cost_iname\n                                #this.SetEventCoinNum(shopCostIname,Math.Max(this.EventCoinNum(shopCostIname)-shopUpdateCost,0))\n                                #break\n                                #caseESaleType.Coin_P:\n                                #this.DEBUG_CONSUME_PAID_COIN(shopUpdateCost)\n                                #break\n                        #\n                        #publicvoidDEBUG_BUY_ITEM(EShopTypeshoptype,intindex)\n                            #ShopDatashopData=this.GetShopData(shoptype)\n                            #if(shopData==null)\n                            #return\n                            #ShopItemshopItem=shopData.items\n                            #if(shopItem.is_soldout)\n                            #return\n                            #ItemDataitemDataByItemId=this.FindItemDataByItemID(shopItem.iname)\n                            #if(itemDataByItemId!=null&&itemDataByItemId.Num==itemDataByItemId.HaveCap)\n                            #return\n                            #ItemParamitemParam=MonoSingleton<GameManager>.Instance.GetItemParam(shopItem.iname)\n                            #switch(shopItem.saleType)\n                                #caseESaleType.Gold:\n                                #this.mGold=(OInt)Math.Max((int)this.mGold-itemParam.buy*shopItem.num,0)\n                                #break\n                                #caseESaleType.Coin:\n                                #this.DEBUG_CONSUME_COIN(itemParam.coin*shopItem.num)\n                                #break\n                                #caseESaleType.TourCoin:\n                                #this.mTourCoin=(OInt)Math.Max((int)this.mTourCoin-itemParam.tour_coin*shopItem.num,0)\n                                #break\n                                #caseESaleType.ArenaCoin:\n                                #this.mArenaCoin=(OInt)Math.Max((int)this.mArenaCoin-itemParam.arena_coin*shopItem.num,0)\n                                #break\n                                #caseESaleType.PiecePoint:\n                                #this.mPiecePoint=(OInt)Math.Max((int)this.mPiecePoint-itemParam.piece_point*shopItem.num,0)\n                                #break\n                                #caseESaleType.MultiCoin:\n                                #this.mMultiCoin=(OInt)Math.Max((int)this.mMultiCoin-itemParam.multi_coin*shopItem.num,0)\n                                #break\n                                #caseESaleType.EventCoin:\n                                #DebugUtility.Assert(\"Thereisnocommonpriceintheeventcoin.\")\n                                #break\n                                #caseESaleType.Coin_P:\n                                #this.DEBUG_CONSUME_PAID_COIN(itemParam.coin*shopItem.num)\n                                #break\n                            #this.GainItem(shopItem.iname,shopItem.num)\n                            #shopItem.is_soldout=true\n                        #\n                        #publicDateTimeVipExpiredAt\n                            #get\n                                #returnTimeManager.FromUnixTime((long)this.mVipExpiredAt)\n                        #\n                        #publicboolCheckEnableVipCard()\n                            #returnNetwork.GetServerTime()<(long)this.mVipExpiredAt\n                        #\n                        #publicDateTimePremiumExpiredAt\n                            #get\n                                #returnTimeManager.FromUnixTime((long)this.mPremiumExpiredAt)\n                        #\n                        #publicboolCheckEnablePremiumMember()\n                            #returnNetwork.GetServerTime()<(long)this.mPremiumExpiredAt\n                        #\n                        #publicvoidSubAbilityRankUpCount(intvalue)\n                            #this.mAbilityRankUpCount.SubValue(value)\n                        #\n                        #publicvoidRestoreAbilityRankUpCount()\n                            #this.mAbilityRankUpCount.val=this.mAbilityRankUpCount.valMax\n                            #this.mAbilityRankUpCount.at=(OLong)Network.GetServerTime()\n                        #\n                        #publicvoidSubStamina(intvalue)\n                            #this.mStamina.SubValue(value)\n                        #\n                        #publiclongGetNextStaminaRecoverySec()\n                            #returnthis.mStamina.GetNextRecoverySec()\n                        #\n                        #publicvoidUpdateStamina()\n                            #this.mStamina.Update()\n                        #\n                        #publicintGetStaminaRecoveryCost(boolgetOldCost=false)\n                            #FixParamfixParam=MonoSingleton<GameManager>.Instance.MasterParam.FixParam\n                            #intmStaminaBuyNum=(int)this.mStaminaBuyNum\n                            #if(getOldCost)\n                            #--mStaminaBuyNum\n                            #intindex=Math.Max(Math.Min(mStaminaBuyNum,fixParam.StaminaAddCost.Length-1),0)\n                            #return(int)fixParam.StaminaAddCost\n                        #\n                        #publicvoidResetStaminaRecoverCount()\n                            #this.mStaminaBuyNum=(OInt)0\n                        #\n                        #publicvoidResetBuyGoldNum()\n                            #this.mGoldBuyNum=(OInt)0\n                        #\n                        #publicvoidSubCaveStamina(intvalue)\n                            #this.mCaveStamina.SubValue(value)\n                        #\n                        #publiclongGetNextCaveStaminaRecoverySec()\n                            #returnthis.mCaveStamina.GetNextRecoverySec()\n                        #\n                        #publicvoidUpdateCaveStamina()\n                            #this.mCaveStamina.Update()\n                        #\n                        #publicintGetCaveStaminaRecoveryCost()\n                            #FixParamfixParam=MonoSingleton<GameManager>.Instance.MasterParam.FixParam\n                            #intindex=Math.Max(Math.Min(0,fixParam.CaveStaminaAddCost.Length),0)\n                            #return(int)fixParam.CaveStaminaAddCost\n                        #\n                        #publiclongGetNextAbilityRankUpCountRecoverySec()\n                            #returnthis.mAbilityRankUpCount.GetNextRecoverySec()\n                        #\n                        #publicvoidUpdateAbilityRankUpCount()\n                            #this.mAbilityRankUpCount.Update()\n                        #\n                        #publicintArenaResetCount\n                            #get\n                                #returnthis.mArenaResetCount\n                        #\n                        #publicboolChallengeArena()\n                            #if(this.ChallengeArenaNum>=this.ChallengeArenaMax)\n                            #returnfalse\n                            #--this.mChallengeArenaNum\n                            #this.mChallengeArenaTimer.val=(OInt)0\n                            #this.mChallengeArenaTimer.at=(OLong)Network.GetServerTime()\n                            #returntrue\n                        #\n                        #publicboolCheckChangeArena()\n                            #if(this.ChallengeArenaNum>=this.ChallengeArenaMax)\n                            #returnfalse\n                            #return(int)this.mChallengeArenaTimer.val==(int)this.mChallengeArenaTimer.valMax\n                        #\n                        #publiclongGetNextChallengeArenaCoolDownSec()\n                            #returnthis.mChallengeArenaTimer.GetNextRecoverySec()\n                        #\n                        #publicvoidUpdateChallengeArenaTimer()\n                            #this.mChallengeArenaTimer.Update()\n                        #\n                        #publicintGetChallengeArenaCost()\n                            #FixParamfixParam=MonoSingleton<GameManager>.Instance.MasterParam.FixParam\n                            #if(fixParam.ArenaResetTicketCost==null)\n                            #return0\n                            #intindex=Math.Max(Math.Min(this.mArenaResetCount,fixParam.ArenaResetTicketCost.Length-1),0)\n                            #return(int)fixParam.ArenaResetTicketCost\n                        #\n                        #publicvoidInitPlayerPrefs()\n                        #\n                        #publicvoidDEBUG_GAIN_ALL_ITEMS()\n                            #List<ItemParam>items=MonoSingleton<GameManager>.GetInstanceDirect().MasterParam.Items\n                            #for(intindex=0index<items.Count++index)\n                            #this.GainItem(items.iname,10)\n                        #\n                        #publicvoidDEBUG_TRASH_ALL_ITEMS()\n                            #this.Items.Clear()\n                        #\n                        #publicvoidDEBUG_ADD_ARTIFACTS(ArtifactDataartifact)\n                            #if(this.mArtifacts==null)\n                            #this.mArtifacts=newList<ArtifactData>()\n                            #if(artifact==null||this.mArtifacts.Contains(artifact))\n                            #return\n                            #this.AddArtifact(artifact)\n                        #\n                        #publicvoidDEBUG_GAIN_ALL_ARTIFACT()\n                            #List<ArtifactParam>artifacts=MonoSingleton<GameManager>.Instance.MasterParam.Artifacts\n                            #longnum=1\n                            #for(intindex=0index<artifacts.Count++index)\n                                #ArtifactParamartifactParam=artifacts\n                                #if(artifactParam.is_create)\n                                    #Json_Artifactjson=newJson_Artifact()\n                                    #json.iid=num++\n                                    #json.exp=0\n                                    #json.iname=artifactParam.iname\n                                    #json.rare=artifactParam.rareini\n                                    #json.fav=0\n                                    #ArtifactDataartifactData=newArtifactData()\n                                    #artifactData.Deserialize(json)\n                                    #this.AddArtifact(artifactData)\n                        #\n                        #publicvoidDEBUG_TRASH_ALL_ARTIFACT()\n                            #this.mArtifacts.Clear()\n                            #this.mArtifactsNumByRarity.Clear()\n                        #\n                        #publicvoidLoadPlayerPrefs()\n                            #boolflag1=true\n                            #if(EditorPlayerPrefs.HasKey(\"Version\"))\n                            #flag1=PlayerData.PLAYRE_DATA_VERSION!=EditorPlayerPrefs.GetString(\"Version\")\n                            #if(flag1)\n                            #this.InitPlayerPrefs()\n                            #if(EditorPlayerPrefs.HasKey(\"Gold\"))\n                            #this.mGold=(OInt)EditorPlayerPrefs.GetInt(\"Gold\")\n                            #if(EditorPlayerPrefs.HasKey(\"PaidCoin\"))\n                            #this.mPaidCoin=(OInt)EditorPlayerPrefs.GetInt(\"PaidCoin\")\n                            #if(EditorPlayerPrefs.HasKey(\"FreeCoin\"))\n                            #this.mFreeCoin=(OInt)EditorPlayerPrefs.GetInt(\"FreeCoin\")\n                            #if(EditorPlayerPrefs.HasKey(\"ComCoin\"))\n                            #this.mComCoin=(OInt)EditorPlayerPrefs.GetInt(\"ComCoin\")\n                            #if(EditorPlayerPrefs.HasKey(\"TourCoin\"))\n                            #this.mTourCoin=(OInt)EditorPlayerPrefs.GetInt(\"TourCoin\")\n                            #if(EditorPlayerPrefs.HasKey(\"ArenaCoin\"))\n                            #this.mArenaCoin=(OInt)EditorPlayerPrefs.GetInt(\"ArenaCoin\")\n                            #if(EditorPlayerPrefs.HasKey(\"MultiCoin\"))\n                            #this.mMultiCoin=(OInt)EditorPlayerPrefs.GetInt(\"MultiCoin\")\n                            #if(EditorPlayerPrefs.HasKey(\"PiecePoint\"))\n                            #this.mPiecePoint=(OInt)EditorPlayerPrefs.GetInt(\"PiecePoint\")\n                            #if(EditorPlayerPrefs.HasKey(\"PlayerExp\"))\n                            #this.mExp=(OInt)EditorPlayerPrefs.GetInt(\"PlayerExp\")\n                            #if(string.IsNullOrEmpty(this.mCuid))\n                                #this.mCuid=\"1\"\n                                #this.mName=\"GUMI\"\n                                #this.mLv=(OInt)this.CalcLevel()\n                                #this.UpdateUnlocks()\n                            #if(EditorPlayerPrefs.HasKey(\"Stamina\"))\n                            #this.mStamina.val=(OInt)EditorPlayerPrefs.GetInt(\"Stamina\")\n                            #if(EditorPlayerPrefs.HasKey(\"StaminaAt\"))\n                            #this.mStamina.at=(OLong)Convert.ToInt64(EditorPlayerPrefs.GetString(\"StaminaAt\"))\n                            #if(EditorPlayerPrefs.HasKey(\"CaveStamina\"))\n                            #this.mCaveStamina.val=(OInt)EditorPlayerPrefs.GetInt(\"CaveStamina\")\n                            #if(EditorPlayerPrefs.HasKey(\"CaveStaminaAt\"))\n                            #this.mCaveStamina.at=(OLong)Convert.ToInt64(EditorPlayerPrefs.GetString(\"CaveStaminaAt\"))\n                            #if(EditorPlayerPrefs.HasKey(\"AbilRankUpCount\"))\n                            #this.mAbilityRankUpCount.val=(OInt)EditorPlayerPrefs.GetInt(\"AbilRankUpCount\")\n                            #if(EditorPlayerPrefs.HasKey(\"AbilRankUpCountAt\"))\n                            #this.mAbilityRankUpCount.at=(OLong)Convert.ToInt64(EditorPlayerPrefs.GetString(\"AbilRankUpCountAt\"))\n                            #PlayerParamplayerParam=MonoSingleton<GameManager>.Instance.MasterParam.GetPlayerParam((int)this.mLv)\n                            #if(playerParam!=null)\n                                #this.mUnitCap=playerParam.ucap\n                                #this.mStamina.valMax=playerParam.pt\n                            #FixParamfixParam=MonoSingleton<GameManager>.Instance.MasterParam.FixParam\n                            #this.mStamina.valRecover=fixParam.StaminaRecoveryVal\n                            #this.mStamina.interval=fixParam.StaminaRecoverySec\n                            #this.mCaveStamina.valMax=fixParam.CaveStaminaMax\n                            #this.mCaveStamina.valRecover=fixParam.CaveStaminaRecoveryVal\n                            #this.mCaveStamina.interval=fixParam.CaveStaminaRecoverySec\n                            #this.mAbilityRankUpCount.valMax=fixParam.AbilityRankUpCountMax\n                            #this.mAbilityRankUpCount.valRecover=fixParam.AbilityRankUpCountRecoveryVal\n                            #this.mAbilityRankUpCount.interval=fixParam.AbilityRankUpCountRecoverySec\n                            #if(EditorPlayerPrefs.HasKey(\"ARTI_NUM\"))\n                                #intnum=EditorPlayerPrefs.GetInt(\"ARTI_NUM\")\n                                #for(intindex=0index<num++index)\n                                    #stringsrc=EditorPlayerPrefs.GetString(\"ARTI_\"+(object)index)\n                                    #if(!string.IsNullOrEmpty(src))\n                                        #Json_ArtifactjsonObject=JSONParser.parseJSONObject<Json_Artifact>(src)\n                                        #if(jsonObject!=null)\n                                            #ArtifactDataartifactData=newArtifactData()\n                                            #artifactData.Deserialize(jsonObject)\n                                            #this.AddArtifact(artifactData)\n                            #if(this.mUnits==null)\n                            #this.mUnits=newList<UnitData>((int)this.mUnitCap)\n                            #this.mUnits.Clear()\n                            #this.mUniqueID2UnitData.Clear()\n                            #List<Json_Ability>jsonAbilityList1=newList<Json_Ability>(5)\n                            #intnum1=EditorPlayerPrefs.GetInt(\"UnitNum\")\n                            #for(intindex1=0index1<num1++index1)\n                                #UnitDataunitData=newUnitData()\n                                #if(unitData!=null)\n                                    #jsonAbilityList1.Clear()\n                                    #stringstr1=\"Unit\"+(object)index1+\"_\"\n                                    #Json_Unitjson1=newJson_Unit()\n                                    #json1.iname=EditorPlayerPrefs.GetString(str1+\"Iname\")\n                                    #json1.iid=(long)EditorPlayerPrefs.GetInt(str1+\"Iid\")\n                                    #json1.exp=EditorPlayerPrefs.GetInt(str1+\"Exp\")\n                                    #json1.plus=EditorPlayerPrefs.GetInt(str1+\"Plus\")\n                                    #json1.rare=EditorPlayerPrefs.GetInt(str1+\"Rarity\")\n                                    #List<Json_Job>jsonJobList=newList<Json_Job>(6)\n                                    #for(intindex2=0index2<6++index2)\n                                        #stringstr2=str1+\"Job\"+(object)index2+\"_\"\n                                        #if(EditorPlayerPrefs.HasKey(str2+\"Iname\")&&!string.IsNullOrEmpty(EditorPlayerPrefs.GetString(str2+\"Iname\")))\n                                            #Json_JobjsonJob=newJson_Job()\n                                            #jsonJob.iname=EditorPlayerPrefs.GetString(str2+\"Iname\")\n                                            #jsonJob.iid=(long)EditorPlayerPrefs.GetInt(str2+\"Iid\")\n                                            #jsonJob.rank=EditorPlayerPrefs.GetInt(str2+\"Rank\")\n                                            #jsonJob.equips=newJson_Equip[6]\n                                            #for(intindex3=0index3<jsonJob.equips.Length++index3)\n                                                #stringstr3=str2+\"Equip\"+(object)index3+\"_\"\n                                                #if(EditorPlayerPrefs.HasKey(str3+\"Iname\"))\n                                                    #jsonJob.equips[index3]=newJson_Equip()\n                                                    #jsonJob.equips[index3].iname=EditorPlayerPrefs.GetString(str3+\"Iname\")\n                                                    #jsonJob.equips[index3].iid=(long)EditorPlayerPrefs.GetInt(str3+\"Iid\")\n                                                    #jsonJob.equips[index3].exp=EditorPlayerPrefs.GetInt(str3+\"Exp\")\n                                                #else\n                                                #jsonJob.equips[index3]=(Json_Equip)null\n                                            #List<Json_Ability>jsonAbilityList2=newList<Json_Ability>(8)\n                                            #for(intindex3=0index3<8++index3)\n                                                #stringstr3=str2+\"Ability\"+(object)index3+\"_\"\n                                                #if(EditorPlayerPrefs.HasKey(str3+\"Iname\")&&!string.IsNullOrEmpty(EditorPlayerPrefs.GetString(str3+\"Iname\")))\n                                                    #Json_AbilityjsonAbility=newJson_Ability()\n                                                    #jsonAbility.iname=EditorPlayerPrefs.GetString(str3+\"Iname\")\n                                                    #jsonAbility.iid=(long)EditorPlayerPrefs.GetInt(str3+\"Iid\")\n                                                    #jsonAbility.exp=EditorPlayerPrefs.GetInt(str3+\"Exp\")\n                                                    #boolflag2=false\n                                                    #for(intindex4=0index4<jsonAbilityList2.Count++index4)\n                                                        #if(jsonAbilityList2[index4].iname==jsonAbility.iname)\n                                                        #flag2=true\n                                                    #if(!flag2)\n                                                    #jsonAbilityList2.Add(jsonAbility)\n                                            #jsonJob.abils=jsonAbilityList2.Count<=0?(Json_Ability)null:jsonAbilityList2.ToArray()\n                                            #jsonJob.select=newJson_JobSelectable()\n                                            #jsonJob.select.abils=newlong[5]\n                                            #Array.Clear((Array)jsonJob.select.abils,0,jsonJob.select.abils.Length)\n                                            #for(intindex3=0index3<jsonJob.select.abils.Length++index3)\n                                                #stringkey=str2+\"Select_Ability\"+(object)index3\n                                                #if(EditorPlayerPrefs.HasKey(key))\n                                                #jsonJob.select.abils[index3]=(long)EditorPlayerPrefs.GetInt(key)\n                                            #jsonJobList.Add(jsonJob)\n                                    #json1.jobs=jsonJobList.ToArray()\n                                    #json1.select=newJson_UnitSelectable()\n                                    #json1.select.job=(long)EditorPlayerPrefs.GetInt(str1+\"Select_Job\")\n                                    #try\n                                        #unitData.Deserialize(json1)\n                                        #for(intjob_index=0job_index<unitData.Jobs.Length++job_index)\n                                            #for(intslot=0slot<unitData.Jobs[job_index].Artifacts.Length++slot)\n                                                #stringkey=str1+\"Job\"+(object)job_index+\"_\"+\"Artifact\"+(object)slot+\"_Iid\"\n                                                #if(EditorPlayerPrefs.HasKey(key))\n                                                    #longiid=(long)EditorPlayerPrefs.GetInt(key)\n                                                    #ArtifactDataartifactData=MonoSingleton<GameManager>.Instance.Player.Artifacts.Find((Predicate<ArtifactData>)(adl=>(long)adl.UniqueID==iid))\n                                                    #if(artifactData!=null)\n                                                        #Json_Artifactjson2=newJson_Artifact()\n                                                        #json2.iid=(long)artifactData.UniqueID\n                                                        #json2.iname=artifactData.ArtifactParam.iname\n                                                        #json2.rare=artifactData.ArtifactParam.raremax\n                                                        #RarityParamrarityParam=MonoSingleton<GameManager>.Instance.MasterParam.GetRarityParam(artifactData.ArtifactParam.raremax)\n                                                        #json2.exp=ArtifactData.StaticCalcExpFromLevel((int)rarityParam.ArtifactLvCap)\n                                                        #ArtifactDataartifact=newArtifactData()\n                                                        #artifact.Reset()\n                                                        #artifact.Deserialize(json2)\n                                                        #unitData.SetEquipArtifactData(job_index,slot,artifact,true)\n                                        #this.mUnits.Add(unitData)\n                                        #this.mUniqueID2UnitData[unitData.UniqueID]=unitData\n                                    #catch(Exceptionex)\n                                        #DebugUtility.LogException(ex)\n                            #for(intindex1=0index1<12++index1)\n                                #Json_Partyjson=newJson_Party()\n                                #PartyDatapartyData=newPartyData((PlayerPartyTypes)index1)\n                                #json.units=newlong[partyData.MAX_UNIT]\n                                #for(intindex2=0index2<json.units.Length++index2)\n                                #json.units[index2]=(long)EditorPlayerPrefs.GetInt(\"Hensei\"+(object)index1+\"_UNIT\"+(object)index2+\"_ID\")\n                                #this.mPartys[index1].Deserialize(json)\n                            #Debug.Log((object)\"LoadPlayerPrefsItems\")\n                            #intcapacity=EditorPlayerPrefs.GetInt(\"ItemNum\")\n                            #if(this.mItems==null)\n                            #this.mItems=newList<ItemData>(capacity)\n                            #this.mItems.Clear()\n                            #this.mID2ItemData.Clear()\n                            #for(intindex=0index<capacity++index)\n                                #stringstr=\"Item\"+(object)index+\"_\"\n                                #Json_Itemjson=newJson_Item()\n                                #json.iname=EditorPlayerPrefs.GetString(str+\"Iname\")\n                                #json.iid=(long)EditorPlayerPrefs.GetInt(str+\"Iid\")\n                                #json.num=EditorPlayerPrefs.GetInt(str+\"Num\")\n                                #if(MonoSingleton<GameManager>.Instance.GetItemParam(json.iname)==null)\n                                    #DebugUtility.Log(\"存在しないアイテム[\"+json.iname+\"]が指定された\")\n                                #else\n                                    #ItemDataitemData=newItemData()\n                                    #itemData.Deserialize(json)\n                                    #this.mItems.Add(itemData)\n                                    #this.mID2ItemData[json.iname]=itemData\n                        #\n                        #[DebuggerHidden]\n                        #publicIEnumeratorSavePlayerPrefsAsync()\n                            #//ISSUE:objectofacompiler-generatedtypeiscreated\n                            #return(IEnumerator)newPlayerData.\\u003CSavePlayerPrefsAsync\\u003Ec__Iterator0(){\\u0024this=this}\n                        #\n                        #privatevoidInternalSavePlayerPrefsParty()\n                            #for(intindex1=0index1<this.mPartys.Count++index1)\n                                #for(intindex2=0index2<this.mPartys[index1].MAX_UNIT++index2)\n                                    #EditorPlayerPrefs.SetInt(\"Hensei\"+(object)index1+\"_UNIT\"+(object)index2+\"_ID\",(int)this.mPartys[index1].GetUnitUniqueID(index2))\n                                    #EditorPlayerPrefs.SetInt(\"Hensei\"+(object)index1+\"_UNIT\"+(object)index2+\"_LEADER\",this.mPartys[index1].LeaderIndex!=index2?0:1)\n                        #\n                        #publicvoidSavePlayerPrefsParty()\n                            #this.InternalSavePlayerPrefsParty()\n                            #EditorPlayerPrefs.Flush()\n                        #\n                        #publicvoidSavePlayerPrefs()\n                            #IEnumeratorenumerator=this.SavePlayerPrefsAsync()\n                            #do\n                            #\n                            #while(enumerator.MoveNext())\n                        #\n                        #publiclongGenerateUnitUniqueID()\n                            #longnum=0\n                            #for(intindex=0index<this.mUnits.Count++index)\n                                #if(this.mUnits.UniqueID>num)\n                                #num=this.mUnits.UniqueID\n                            #returnnum+1L\n                        #\n                        #publicvoidClearTrophies()\n                            #this.mTrophyStates=newList<TrophyState>()\n                            #this.mTrophyStatesInameDict=newDictionary<string,List<TrophyState>>()\n                        #\n                        #publicvoidDeleteTrophies(JSON_TrophyProgresstrophies)\n                            #if(trophies==null)\n                            #return\n                            #if(this.mTrophyStates!=null)\n                                #for(inti=0i<trophies.Length++i)\n                                #this.mTrophyStates.RemoveAll((Predicate<TrophyState>)(state=>state.iname==trophies[i].iname))\n                            #if(this.mTrophyStatesInameDict==null)\n                            #return\n                            #for(intindex=0index<trophies.Length++index)\n                                #if(this.mTrophyStatesInameDict.ContainsKey(trophies.iname))\n                                #this.mTrophyStatesInameDict.Remove(trophies.iname)\n                        #\n                        #publicboolIsTrophyDirty()\n                            #for(intindex=this.mTrophyStates.Count-1index>=0--index)\n                                #if(this.mTrophyStates.IsDirty)\n                                #returntrue\n                            #returnfalse\n                        #\n                        #privatevoidUpdateTrophyState(TrophyStatest,intcurrentYMD)\n                            #if(!st.Param.IsDaily)\n                            #return\n                            #intstartYmd=st.StartYMD\n                            #intnum=Math.Abs(currentYMD.FromYMD().Subtract(startYmd.FromYMD()).Days)\n                            #if(st.IsEnded)\n                                #if(num<1)\n                                #return\n                                #this.ClearTrophyCounter(st)\n                            #elseif(!st.IsCompleted)\n                                #if(num<1)\n                                #return\n                                #this.ClearTrophyCounter(st)\n                            #elseif(num>=2)\n                                #this.ClearTrophyCounter(st)\n                            #else\n                                #if(num<1)\n                                #return\n                                #for(intindex=0index<st.Param.Objectives.Length++index)\n                                    #if(st.Param.Objectives.type==TrophyConditionTypes.stamina)\n                                        #this.ClearTrophyCounter(st)\n                                        #break\n                        #\n                        #publicTrophyParamGetCompletedTrophies()\n                            #List<TrophyParam>trophyParamList=newList<TrophyParam>(this.mTrophyStates.Count)\n                            #for(intindex=this.mTrophyStates.Count-1index>=0--index)\n                                #TrophyStatemTrophyState=this.mTrophyStates\n                                #if(!mTrophyState.IsEnded&&mTrophyState.IsCompleted)\n                                #trophyParamList.Add(mTrophyState.Param)\n                            #returntrophyParamList.ToArray()\n                        #\n                        #publicvoidMarkTrophiesEnded(TrophyParamtrophies)\n                            #for(intindex=0index<trophies.Length++index)\n                                #TrophyStatetrophyCounter=this.GetTrophyCounter(trophies,true)\n                                #trophyCounter.IsEnded=true\n                                #trophyCounter.IsDirty=true\n                                #trophyCounter.RewardedAt=TimeManager.ServerTime\n                        #\n                        #privatevoidClearTrophyCounter(TrophyState_st)\n                            #if(this.mTrophyStates.Contains(_st))\n                            #this.mTrophyStates.Remove(_st)\n                            #if(!this.mTrophyStatesInameDict.ContainsKey(_st.iname))\n                            #return\n                            #this.mTrophyStatesInameDict[_st.iname].Remove(_st)\n                            #if(this.mTrophyStatesInameDict[_st.iname].Count>0)\n                            #return\n                            #this.mTrophyStatesInameDict.Remove(_st.iname)\n                        #\n                        #publicTrophyStateTrophyStates\n                            #get\n                                #returnthis.mTrophyStates.ToArray()\n                        #\n                        #publicIList<TrophyState>TrophyStatesList\n                            #get\n                                #return(IList<TrophyState>)this.mTrophyStates\n                        #\n                        #publicvoidUpdateTrophyStates()\n                            #intymd=TimeManager.ServerTime.ToYMD()\n                            #TrophyStatearray=this.mTrophyStates.ToArray()\n                            #for(intindex=0index<array.Length++index)\n                                #if(array!=null)\n                                #this.UpdateTrophyState(array,ymd)\n                        #\n                        #publicvoidOverwiteTrophyProgress(JSON_TrophyProgresstrophyProgressList)\n                            #if(trophyProgressList==null)\n                            #return\n                            #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                            #for(intindex=0index<trophyProgressList.Length++index)\n                                #JSON_TrophyProgresstrophyProgress=trophyProgressList\n                                #if(trophyProgress!=null)\n                                    #TrophyParamtrophy=instance.MasterParam.GetTrophy(trophyProgress.iname)\n                                    #if(trophy==null)\n                                        #DebugUtility.LogWarning(\"存在しないミッション:\"+trophyProgress.iname)\n                                    #else\n                                        #TrophyStatetrophyCounter=this.GetTrophyCounter(trophy,false)\n                                        #boolflag=trophyCounter.IsEnded||trophyCounter.IsCompleted\n                                        #trophyCounter.Setup(trophy,trophyProgress)\n                                        #if(!flag&&trophyCounter.IsCompleted)\n                                        #NotifyList.PushTrophy(trophy)\n                        #\n                        #publicTrophyStateRegistTrophyStateDictByProg(TrophyParam_trophy,JSON_TrophyProgress_prog)\n                            #TrophyStatetrophyState=this.CreateTrophyState(_trophy)\n                            #trophyState.Setup(_trophy,_prog)\n                            #this.AddTrophyStateDict(trophyState)\n                            #returntrophyState\n                        #\n                        #publicvoidRegistTrophyStateDictByProgExtra(JSON_TrophyProgress_prog)\n                            #if(_prog==null||_prog.Length<=0)\n                            #return\n                            #for(intindex=0index<_prog.Length++index)\n                            #MonoSingleton<GameManager>.Instance.Player.RegistTrophyStateDictByProgExtra(MonoSingleton<GameManager>.Instance.MasterParam.GetTrophy(_prog.iname),_prog)\n                        #\n                        #publicvoidRegistTrophyStateDictByProgExtra(TrophyParam_trophy,JSON_TrophyProgress_prog)\n                            #if(!this.mTrophyStatesInameDict.ContainsKey(_trophy.iname))\n                            #this.AddTrophyStateDict(this.CreateTrophyState(_trophy))\n                            #TrophyStatetrophyState=this.mTrophyStatesInameDict[_trophy.iname].Find((Predicate<TrophyState>)(x=>x.iname==_trophy.iname))\n                            #if(trophyState==null||trophyState.IsCompleted)\n                            #return\n                            #for(intindex=0index<_trophy.Objectives.Length&&index<_prog.pts.Length&&index<trophyState.Count.Length++index)\n                            #trophyState.Count=Math.Min(_prog.pts,_trophy.Objectives.ival)\n                            #if(trophyState.IsCompleted&&trophyState.Param.DispType==TrophyDispType.Award)\n                            #NotifyList.PushAward(trophyState.Param)\n                            #trophyState.StartYMD=_prog.ymd\n                            #trophyState.IsEnded=_prog.rewarded_at!=0\n                            #trophyState.IsDirty=true\n                        #\n                        #publicvoidCreateInheritingExtraTrophy(Dictionary<int,List<JSON_TrophyProgress>>progs)\n                            #TrophyParamtrophies=MonoSingleton<GameManager>.Instance.MasterParam.Trophies\n                            #for(intindex1=0index1<trophies.Length++index1)\n                                #TrophyParamparam=trophies[index1]\n                                #if(trophies[index1].Objectives[0].type.IsExtraClear())\n                                    #inttype=(int)trophies[index1].Objectives[0].type\n                                    #if(progs.ContainsKey(type))\n                                        #List<JSON_TrophyProgress>prog=progs[type]\n                                        #if(prog.Find((Predicate<JSON_TrophyProgress>)(x=>x.iname==param.iname))==null)\n                                            #intnum=0\n                                            #for(intindex2=0index2<prog.Count++index2)\n                                                #if(num<prog[index2].pts[0])\n                                                #num=prog[index2].pts[0]\n                                            #TrophyStatetrophyState=this.CreateTrophyState(param)\n                                            #this.SetTrophyCounter(trophyState.Param,0,num)\n                                            #this.AddTrophyStateDict(trophyState)\n                        #\n                        #publicTrophyStateGetTrophyCounter(TrophyParamtrophy,booldaily_old_data=false)\n                            #List<TrophyState>trophyStateList\n                            #if(this.mTrophyStatesInameDict.TryGetValue(trophy.iname,outtrophyStateList))\n                                #if(!trophy.IsDaily||daily_old_data)\n                                #returntrophyStateList[0]\n                                #for(intindex=0index<trophyStateList.Count++index)\n                                    #if(trophyStateList.StartYMD==TimeManager.ServerTime.ToYMD())\n                                    #returntrophyStateList\n                            #TrophyStatetrophyState=this.CreateTrophyState(trophy)\n                            #this.AddTrophyStateDict(trophyState)\n                            #returntrophyState\n                        #\n                        #privateTrophyStateCreateTrophyState(TrophyParam_trophy)\n                            #returnnewTrophyState(){iname=_trophy.iname,StartYMD=TimeManager.ServerTime.ToYMD(),Count=newint[_trophy.Objectives.Length],IsDirty=false,Param=_trophy}\n                        #\n                        #privatevoidAddTrophyStateDict(TrophyState_state)\n                            #this.mTrophyStates.Add(_state)\n                            #if(!this.mTrophyStatesInameDict.ContainsKey(_state.iname))\n                            #this.mTrophyStatesInameDict.Add(_state.iname,newList<TrophyState>())\n                            #this.mTrophyStatesInameDict[_state.iname].Add(_state)\n                            #this.mTrophyStatesInameDict[_state.iname].Sort((Comparison<TrophyState>)((a,b)=>a.StartYMD-b.StartYMD))\n                        #\n                        #privateboolIsMakeTrophyPlate(TrophyParamtrophy,TrophyStatest,boolis_achievement)\n                            #return!trophy.IsInvisibleVip()&&!trophy.IsInvisibleCard()&&!trophy.IsInvisibleStamina()&&((trophy.RequiredTrophies==null||TrophyParam.CheckRequiredTrophies(MonoSingleton<GameManager>.Instance,trophy,true,true))&&trophy.IsAvailablePeriod(TimeManager.ServerTime,is_achievement))\n                        #\n                        #publicvoidDailyAllCompleteCheck()\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.dailyall)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(this.IsDailyAllComplete())\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicboolIsDailyAllComplete()\n                            #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                            #TrophyParamtrophies=instance.Trophies\n                            #PlayerDataplayer=instance.Player\n                            #if(trophies==null||trophies.Length<=0)\n                            #returntrue\n                            #TrophyStatetrophyStateArray=newTrophyState[trophies.Length]\n                            #for(intindex=0index<trophies.Length++index)\n                            #trophyStateArray=!trophies.IsChallengeMission?player.GetTrophyCounter(trophies,false):(TrophyState)null\n                            #for(intindex1=0index1<trophies.Length++index1)\n                                #TrophyStatest=trophyStateArray[index1]\n                                #if(st!=null&&!st.IsCompleted)\n                                    #TrophyParamtrophy=trophies[index1]\n                                    #boolflag=false\n                                    #for(intindex2=0index2<trophy.Objectives.Length++index2)\n                                        #if(trophy.Objectives[index2].type==TrophyConditionTypes.dailyall)\n                                            #flag=true\n                                            #break\n                                    #if(!flag&&trophy.DispType!=TrophyDispType.Award&&(trophy.DispType!=TrophyDispType.Hide&&trophy.IsDaily)&&this.IsMakeTrophyPlate(trophy,st,false))\n                                    #returnfalse\n                            #returntrue\n                        #\n                        #privateboolCheckTrophyCount(TrophyParamtrophyParam,intcountIndex,intvalue,refTrophyStatestate)\n                            #if(countIndex<0||value<=0||(trophyParam==null||!trophyParam.IsAvailablePeriod(this.GetMissionClearAt(),false))||trophyParam.RequiredTrophies!=null&&!TrophyParam.CheckRequiredTrophies(MonoSingleton<GameManager>.Instance,trophyParam,trophyParam.IsChallengeMission,true))\n                            #returnfalse\n                            #state=this.GetTrophyCounter(trophyParam,false)\n                            #if(state.IsEnded)\n                            #returnfalse\n                            #if(state.Count.Length<=countIndex)\n                            #Array.Resize<int>(refstate.Count,countIndex+1)\n                            #return!state.IsCompleted\n                        #\n                        #privateboolCheckDailyMissionDayChange(TrophyStatestate,intcountIndex)\n                            #intymd=this.GetMissionClearAt().ToYMD()\n                            #return!state.Param.IsDaily||ymd<=state.StartYMD||state.IsCompleted\n                        #\n                        #publicvoidAddTrophyCounter(TrophyObjectiveobj,intvalue)\n                            #this.AddTrophyCounter(obj.Param,obj.index,value)\n                        #\n                        #publicvoidAddTrophyCounter(TrophyParamtrophyParam,intcountIndex,intvalue)\n                            #if(!this.AddTrophyCounterExec(trophyParam,countIndex,value))\n                            #return\n                            #this.DailyAllCompleteCheck()\n                        #\n                        #privateboolAddTrophyCounterExec(TrophyParamtrophyParam,intcountIndex,intvalue)\n                            #TrophyStatestate=(TrophyState)null\n                            #if(!this.CheckTrophyCount(trophyParam,countIndex,value,refstate))\n                            #returnfalse\n                            #intnum=state.Count[countIndex]\n                            #state.Count[countIndex]+=value\n                            #if(!this.CheckDailyMissionDayChange(state,countIndex))\n                                #state.Count[countIndex]=num\n                                #returnfalse\n                            #state.IsDirty=true\n                            #MonoSingleton<GameManager>.Instance.update_trophy_interval.SetSyncNow()\n                            #returnstate.IsCompleted\n                        #\n                        #publicvoidSetTrophyCounter(TrophyObjectiveobj,intvalue)\n                            #this.SetTrophyCounter(obj.Param,obj.index,value)\n                        #\n                        #privatevoidSetTrophyCounter(TrophyParamtrophyParam,intcountIndex,intvalue)\n                            #if(!this.SetTrophyCounterExec(trophyParam,countIndex,value))\n                            #return\n                            #this.DailyAllCompleteCheck()\n                        #\n                        #privateboolSetTrophyCounterExec(TrophyParamtrophyParam,intcountIndex,intvalue)\n                            #TrophyStatestate=(TrophyState)null\n                            #if(!this.CheckTrophyCount(trophyParam,countIndex,value,refstate)||state.Count[countIndex]==value)\n                            #returnfalse\n                            #intnum=state.Count[countIndex]\n                            #state.Count[countIndex]=value\n                            #if(!this.CheckDailyMissionDayChange(state,countIndex))\n                                #state.Count[countIndex]=num\n                                #returnfalse\n                            #state.IsDirty=true\n                            #MonoSingleton<GameManager>.Instance.update_trophy_interval.SetSyncNow()\n                            #returnstate.IsCompleted\n                        #\n                        #publicvoidOnQuestStart(stringquestID)\n                            #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(questID)\n                            #if(quest==null||quest.type==QuestTypes.Tutorial)\n                            #return\n                            #if(quest.type==QuestTypes.Arena)\n                                #TrophyParamtrophies=MonoSingleton<GameManager>.Instance.Trophies\n                                #for(intindex=trophies.Length-1index>=0--index)\n                                    #TrophyParamtrophyParam=trophies\n                                    #for(intcountIndex=trophyParam.Objectives.Length-1countIndex>=0--countIndex)\n                                        #if(trophyParam.Objectives[countIndex].type==TrophyConditionTypes.arena)\n                                        #this.AddTrophyCounter(trophyParam,countIndex,1)\n                            #if(quest.IsMulti&&GlobalVars.ResumeMultiplayPlayerID==0)\n                                #TrophyParamtrophies=MonoSingleton<GameManager>.Instance.Trophies\n                                #for(intindex=trophies.Length-1index>=0--index)\n                                    #TrophyParamtrophyParam=trophies\n                                    #for(intcountIndex=trophyParam.Objectives.Length-1countIndex>=0--countIndex)\n                                        #if(trophyParam.Objectives[countIndex].type==TrophyConditionTypes.multiplay)\n                                        #this.AddTrophyCounter(trophyParam,countIndex,1)\n                            #if(!quest.IsMultiTower||GlobalVars.ResumeMultiplayPlayerID!=0)\n                            #return\n                            #TrophyParamtrophies1=MonoSingleton<GameManager>.Instance.Trophies\n                            #for(intindex=trophies1.Length-1index>=0--index)\n                                #TrophyParamtrophyParam=trophies1\n                                #for(intcountIndex=trophyParam.Objectives.Length-1countIndex>=0--countIndex)\n                                    #if(trophyParam.Objectives[countIndex].type==TrophyConditionTypes.multitower)\n                                    #this.AddTrophyCounter(trophyParam,countIndex,1)\n                        #\n                        #publicvoidOnQuestWin(stringquestID,BattleCore.RecordbattleRecord=null)\n                            #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(questID)\n                            #if(quest==null||quest.type==QuestTypes.Tutorial)\n                            #return\n                            #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winquest)\n                            #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType1\n                                #if(!string.IsNullOrEmpty(trophyObjective.sval_base))\n                                    #if(!trophyObjective.sval.Contains(questID))\n                                    #continue\n                                #elseif(quest.type==QuestTypes.Event||quest.type==QuestTypes.Beginner||(quest.type==QuestTypes.Arena||quest.IsMulti)||(quest.type==QuestTypes.Character||quest.difficulty!=QuestDifficulties.Normal||(quest.type==QuestTypes.Tower||quest.IsVersus))||(quest.type==QuestTypes.Ordeal||quest.type==QuestTypes.RankMatch||quest.type==QuestTypes.Raid))\n                                #continue\n                                #this.AddTrophyCounter(trophyObjective,1)\n                            #if(battleRecord!=null&&quest.bonusObjective!=null)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.complete_all_quest_mission)\n                                #for(intindex1=trophiesOfType2.Length-1index1>=0--index1)\n                                    #if(!(trophiesOfType2[index1].sval_base!=questID))\n                                        #intnum=0\n                                        #for(intindex2=0index2<quest.bonusObjective.Length++index2)\n                                            #if((battleRecord.allBonusFlags&1<<index2)!=0)\n                                            #++num\n                                        #if(num>=quest.bonusObjective.Length)\n                                        #this.AddTrophyCounter(trophiesOfType2[index1],1)\n                            #if(battleRecord!=null&&quest.bonusObjective!=null)\n                                #intnum=0\n                                #for(intindex=0index<quest.bonusObjective.Length++index)\n                                    #if((battleRecord.allBonusFlags&1<<index)!=0||quest.IsMissionClear(index))\n                                    #++num\n                                #if(num>=quest.bonusObjective.Length)\n                                    #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.complete_all_quest_mission_total)\n                                    #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                        #if(!(trophiesOfType2.sval_base!=questID))\n                                        #this.AddTrophyCounter(trophiesOfType2,1)\n                                    #if(!quest.IsMissionCompleteALL())\n                                        #if(!string.IsNullOrEmpty(FlowNode_Variable.Get(\"COMPLETE_QUEST_MISSION\")))\n                                        #MonoSingleton<GameManager>.Instance.Player.UpdateCompleteAllQuestCountTrophy2(quest)\n                                        #else\n                                        #MonoSingleton<GameManager>.Instance.Player.UpdateCompleteAllQuestCountTrophy(quest)\n                            #if(quest.difficulty==QuestDifficulties.Extra)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winstory_extra)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #this.AddTrophyCounter(trophiesOfType2,1)\n                            #if(quest.difficulty==QuestDifficulties.Elite)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winelite)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #this.AddTrophyCounter(trophiesOfType2,1)\n                            #if(quest.type==QuestTypes.Arena)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winarena)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #this.AddTrophyCounter(trophiesOfType2,1)\n                            #if(quest.type==QuestTypes.Event||quest.type==QuestTypes.Tower)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winevent)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #this.AddTrophyCounter(trophiesOfType2,1)\n                            #SupportDatasupportData=(SupportData)GlobalVars.SelectedSupport\n                            #if(quest.type==QuestTypes.Ordeal)\n                                #supportData=(SupportData)null\n                                #if(GlobalVars.OrdealSupports!=null)\n                                    #foreach(SupportDataordealSupportinGlobalVars.OrdealSupports)\n                                        #if(ordealSupport!=null)\n                                            #supportData=ordealSupport\n                                            #break\n                            #if(supportData!=null)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winquestsoldier)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #this.AddTrophyCounter(trophiesOfType2,1)\n                            #if(quest.IsMulti)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winmulti)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType2\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                                #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winmultimore)\n                                #for(intindex=trophiesOfType3.Length-1index>=0--index)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType3\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                        #List<JSON_MyPhotonPlayerParam>myPlayersStarted=PunMonoSingleton<MyPhoton>.Instance.GetMyPlayersStarted()\n                                        #if(myPlayersStarted!=null&&myPlayersStarted.Count>=trophyObjective.ival)\n                                        #this.AddTrophyCounter(trophyObjective,1)\n                                #TrophyObjectivetrophiesOfType4=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winmultiless)\n                                #for(intindex=trophiesOfType4.Length-1index>=0--index)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType4\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                        #List<JSON_MyPhotonPlayerParam>myPlayersStarted=PunMonoSingleton<MyPhoton>.Instance.GetMyPlayersStarted()\n                                        #if(myPlayersStarted!=null&&myPlayersStarted.Count<=trophyObjective.ival)\n                                        #this.AddTrophyCounter(trophyObjective,1)\n                            #if(quest.type==QuestTypes.Tower)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.wintower)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType2\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                                #TowerFloorParamtowerFloor=MonoSingleton<GameManager>.Instance.FindTowerFloor(questID)\n                                #if(towerFloor!=null)\n                                    #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.tower)\n                                    #for(intindex=trophiesOfType3.Length-1index>=0--index)\n                                        #TrophyObjectivetrophyObjective=trophiesOfType3\n                                        #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==towerFloor.tower_id)\n                                        #this.AddTrophyCounter(trophyObjective,1)\n                            #if(quest.IsVersus)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.vswin)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType2\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                                #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.vs)\n                                #for(intindex=trophiesOfType3.Length-1index>=0--index)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType3\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                            #if(quest.type!=QuestTypes.Ordeal)\n                            #return\n                            #TrophyObjectivetrophiesOfType5=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.clear_ordeal)\n                            #for(intindex=trophiesOfType5.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType5\n                                #if(!string.IsNullOrEmpty(trophyObjective.sval_base))\n                                    #if(trophyObjective.sval_base==quest.iname)\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                                #else\n                                #DebugUtility.LogError(\"レコードミッション「\"+trophyObjective.Param.Name+\"」はクエストが指定されていません。\")\n                        #\n                        #publicvoidOnQuestLose(stringquestID)\n                            #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(questID)\n                            #if(questID==null||quest.type==QuestTypes.Tutorial)\n                            #return\n                            #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.losequest)\n                            #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType1\n                                #if(!string.IsNullOrEmpty(trophyObjective.sval_base))\n                                    #if(!trophyObjective.sval.Contains(questID))\n                                    #continue\n                                #elseif(quest.type==QuestTypes.Event||quest.type==QuestTypes.Beginner||(quest.type==QuestTypes.Arena||quest.IsMulti)||(quest.type==QuestTypes.Character||quest.difficulty!=QuestDifficulties.Normal||(quest.type==QuestTypes.Tower||quest.IsVersus))||(quest.type==QuestTypes.Ordeal||quest.type==QuestTypes.RankMatch))\n                                #continue\n                                #this.AddTrophyCounter(trophyObjective,1)\n                            #if(quest.difficulty==QuestDifficulties.Elite)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.loseelite)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #this.AddTrophyCounter(trophiesOfType2,1)\n                            #if(quest.type==QuestTypes.Arena)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.losearena)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #this.AddTrophyCounter(trophiesOfType2,1)\n                            #if(quest.type==QuestTypes.Event||quest.type==QuestTypes.Tower)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.loseevent)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #this.AddTrophyCounter(trophiesOfType2,1)\n                            #if(quest.type==QuestTypes.Tower)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.losetower)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType2\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                                #TowerFloorParamtowerFloor=MonoSingleton<GameManager>.Instance.FindTowerFloor(questID)\n                                #if(towerFloor!=null)\n                                    #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.tower)\n                                    #for(intindex=trophiesOfType3.Length-1index>=0--index)\n                                        #TrophyObjectivetrophyObjective=trophiesOfType3\n                                        #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==towerFloor.tower_id)\n                                        #this.AddTrophyCounter(trophyObjective,1)\n                            #if(!quest.IsVersus)\n                            #return\n                            #TrophyObjectivetrophiesOfType4=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.vslose)\n                            #for(intindex=trophiesOfType4.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType4\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                            #TrophyObjectivetrophiesOfType5=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.vs)\n                            #for(intindex=trophiesOfType5.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType5\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidOnGoldChange(intdelta)\n                            #if(delta==0)\n                            #return\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.has_gold_over)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #if(this.Gold>=trophiesOfType.ival)\n                                #this.AddTrophyCounter(trophiesOfType,1)\n                        #\n                        #publicvoidOnCoinChange(intdelta)\n                        #\n                        #publicvoidOnItemQuantityChange(stringitemID,intdelta)\n                            #if(delta<=0)\n                            #return\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.getitem)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(trophyObjective.sval_base==itemID)\n                                #this.AddTrophyCounter(trophyObjective,delta)\n                        #\n                        #publicvoidOnPlayerLevelChange(intdelta)\n                            #if(delta<=0)\n                            #return\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.playerlv)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(trophyObjective.ival<=this.Lv)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidOnEnemyKill(stringenemyID,intcount)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.killenemy)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(trophyObjective.sval_base==enemyID)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidOnDamageToEnemy(Unitunit,Unittarget,intdamage)\n                            #if(unit==null||unit.Side!=EUnitSide.Player||(!unit.IsPartyMember||target==null)||(target.Side!=EUnitSide.Enemy||UnityEngine.Object.op_Equality((UnityEngine.Object)SceneBattle.Instance,(UnityEngine.Object)null)||SceneBattle.Instance.IsPlayingArenaQuest)||SceneBattle.Instance.Battle!=null&&SceneBattle.Instance.Battle.IsMultiPlay&&(PunMonoSingleton<MyPhoton>.Instance.MyPlayerIndex<=0||PunMonoSingleton<MyPhoton>.Instance.MyPlayerIndex!=unit.OwnerPlayerIndex))\n                            #return\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.damage_over)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #if(trophiesOfType.ival<=damage)\n                                #this.AddTrophyCounter(trophiesOfType,1)\n                        #\n                        #publicvoidOnAbilityPowerUp(stringunitID,stringabilityID,intlevel,boolverify=false)\n                            #if(!verify)\n                                #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.ability)\n                                #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #this.AddTrophyCounter(trophiesOfType,1)\n                            #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeabilitylevel)\n                            #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType1\n                                #if(trophyObjective.ival<=level)\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                        #this.AddTrophyCounter(trophyObjective,1)\n                                    #else\n                                        #charchArray=newchar[1]{','}\n                                        #stringstrArray=trophyObjective.sval_base.Split(chArray)\n                                        #if((string.IsNullOrEmpty(strArray[1])||abilityID==strArray[1])&&(string.IsNullOrEmpty(strArray[0])||unitID==strArray[0]))\n                                        #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidOnSoubiPowerUp()\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.soubi)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType,1)\n                        #\n                        #publicvoidOnBuyGold()\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.buygold)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType,1)\n                        #\n                        #publicvoidOnFgGIDLogin()\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.fggid)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType,1)\n                        #\n                        #publicvoidOnGacha(GachaTypestype,intcount)\n                            #if(count<=0)\n                            #return\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.gacha)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(trophyObjective.sval_base==\"normal\")\n                                    #if(type!=GachaTypes.Normal)\n                                    #continue\n                                #elseif(trophyObjective.sval_base==\"rare\")\n                                    #if(type!=GachaTypes.Rare)\n                                    #continue\n                                #elseif(trophyObjective.sval_base==\"vip\"&&type!=GachaTypes.Vip)\n                                #continue\n                                #this.AddTrophyCounter(trophyObjective,count)\n                        #\n                        #publicvoidOnUnitLevelChange(stringunitID,intdelta,intlevel,boolverify=false)\n                            #if(delta<=0&&!verify)\n                            #return\n                            #if(!verify)\n                                #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.unitlevel)\n                                #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType\n                                    #if(trophyObjective.sval_base==unitID&&trophyObjective.ival<=level)\n                                    #this.AddTrophyCounter(trophyObjective,delta)\n                            #if(!verify)\n                                #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.upunitlevel)\n                                #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)\n                                    #this.AddTrophyCounter(trophyObjective,delta)\n                            #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeunitlevel)\n                            #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType1\n                                #if(trophyObjective.ival<=level&&(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID))\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidOnUnitLevelAndJobLevelChange(stringunitID,intlevel,paramsJobDatajobs)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeunitandjoblevel)\n                            #charchArray=newchar[1]{','}\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrohy=trophiesOfType\n                                #stringstrArray=trohy.sval_base.Split(chArray)\n                                #if(strArray.Length<4)\n                                    #this.PrintUnitAndJobLevelUsage(trohy)\n                                #else\n                                    #stringstr1=strArray[0]\n                                    #intresult1\n                                    #if(!int.TryParse(strArray[1],outresult1))\n                                    #this.PrintUnitAndJobLevelUsage(trohy)\n                                    #elseif(level>=result1&&!string.IsNullOrEmpty(str1)&&str1==unitID)\n                                        #stringstr2=strArray[2]\n                                        #intresult2\n                                        #if(!int.TryParse(strArray[3],outresult2))\n                                            #this.PrintUnitAndJobLevelUsage(trohy)\n                                        #else\n                                            #foreach(JobDatajobinjobs)\n                                                #if(job.Param.iname==str2&&result2<=job.Rank)\n                                                #this.AddTrophyCounter(trohy,1)\n                        #\n                        #privatevoidPrintUnitAndJobLevelUsage(TrophyObjectivetrohy)\n                            #DebugUtility.Log(trohy.Param.iname+\":[\"+trohy.sval_base+\"]は不正な文字列です。カンマ区切りで「ユニット名・ユニットレベル・ジョブ名・ジョブレベル」の順に設定してください。\")\n                        #\n                        #publicvoidOnEvolutionChange(stringunitID,intrarity)\n                            #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evolutionnum)\n                            #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType1\n                                #if(trophyObjective.sval_base==unitID&&trophyObjective.ival<=rarity)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evoltiontimes)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType2\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidOnJobLevelChange(stringunitID,stringjobID,intrank,boolverify=false,intrankDelta=1)\n                            #charchArray=newchar[1]{','}\n                            #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.joblevel)\n                            #if(!verify)\n                                #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType1\n                                    #stringstrArray=trophyObjective.sval_base.Split(chArray)\n                                    #if(strArray[0]==unitID&&strArray[1]==jobID&&trophyObjective.ival<=rank)\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.upjoblevel)\n                            #if(!verify)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType2\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                        #this.AddTrophyCounter(trophyObjective,rankDelta)\n                                    #else\n                                        #stringstrArray=trophyObjective.sval_base.Split(chArray)\n                                        #if(strArray[0]==unitID&&strArray[1]==jobID)\n                                        #this.AddTrophyCounter(trophyObjective,rankDelta)\n                            #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makejoblevel)\n                            #for(intindex=trophiesOfType3.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType3\n                                #if(trophyObjective.ival<=rank)\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                        #this.AddTrophyCounter(trophyObjective,1)\n                                    #else\n                                        #stringstrArray=trophyObjective.sval_base.Split(chArray)\n                                        #if(strArray[0]==unitID&&strArray[1]==jobID)\n                                        #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidOnMultiTowerHelp()\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.multitower_help)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType,1)\n                        #\n                        #publicvoidOnLoginCount()\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.logincount)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(trophyObjective.ival<=this.LoginBonusCount)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidOnLogin()\n                            #this.TrophyUpdateProgress()\n                            #this.ResetPrevCheckHour()\n                        #\n                        #publicvoidTrophyUpdateProgress()\n                            #MonoSingleton<GameManager>.Instance.Player.UpdateUnitTrophyStates(true)\n                            #MonoSingleton<GameManager>.Instance.Player.UpdatePlayerTrophyStates()\n                            #MonoSingleton<GameManager>.Instance.Player.UpdateArenaRankTrophyStates(-1,-1)\n                            #MonoSingleton<GameManager>.Instance.Player.UpdateArtifactTrophyStates()\n                            #MonoSingleton<GameManager>.Instance.Player.UpdateTobiraTrophyStates()\n                            #if(!string.IsNullOrEmpty(FlowNode_Variable.Get(\"COMPLETE_QUEST_MISSION\")))\n                            #MonoSingleton<GameManager>.Instance.Player.UpdateCompleteAllQuestCountTrophy2((QuestParam)null)\n                            #else\n                            #MonoSingleton<GameManager>.Instance.Player.UpdateCompleteAllQuestCountTrophy((QuestParam)null)\n                            #MonoSingleton<GameManager>.Instance.Player.CheckAllCompleteMissionTrophy()\n                        #\n                        #publicvoidOnSoubiSet(stringunitID,intcountUp=1)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.unitequip)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)\n                                #this.AddTrophyCounter(trophyObjective,countUp)\n                        #\n                        #publicvoidOnLimitBreak(stringunitID,intdelta=1)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)\n                                #this.AddTrophyCounter(trophyObjective,delta)\n                        #\n                        #publicvoidOnJobChange(stringunitID)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.changejob)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidOnChangeAbilitySet(stringunitID)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.changeability)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidOnBuyAtShop(stringshopID,stringitemID,intnum)\n                            #if(num<=0)\n                            #return\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.buyatshop)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                    #this.AddTrophyCounter(trophyObjective,num)\n                                #else\n                                    #charchArray=newchar[1]{','}\n                                    #stringstrArray=trophyObjective.sval_base.Split(chArray)\n                                    #if((string.IsNullOrEmpty(strArray[1])||itemID==strArray[1])&&(string.IsNullOrEmpty(strArray[0])||shopID==strArray[0]))\n                                    #this.AddTrophyCounter(trophyObjective,num)\n                        #\n                        #publicvoidOnArtifactTransmute(stringartifactID)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.artifacttransmute)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==artifactID)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidOnArtifactStrength(stringartifactID,intuseItemNum,intbeforeLevel,intcurrentLevel)\n                            #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.artifactstrength)\n                            #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType1\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==artifactID)\n                                #this.AddTrophyCounter(trophyObjective,useItemNum)\n                            #intnum=currentLevel-beforeLevel\n                            #if(num>=1)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.upartifactlevel)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType2\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base)||string.Equals(trophyObjective.sval_base,artifactID))\n                                    #this.AddTrophyCounter(trophyObjective,num)\n                            #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeartifactlevel)\n                            #for(intindex=trophiesOfType3.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType3\n                                #if(currentLevel>=trophyObjective.ival&&(string.IsNullOrEmpty(trophyObjective.sval_base)||string.Equals(trophyObjective.sval_base,artifactID)))\n                                #this.SetTrophyCounter(trophyObjective,currentLevel)\n                        #\n                        #publicvoidOnArtifactEvolution(stringartifactID)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.artifactevolution)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==artifactID)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidOnUnlockTobiraTrophy(longunitUniqueID)\n                            #UnitDataunitDataByUniqueId=this.FindUnitDataByUniqueID(unitUniqueID)\n                            #this.UpdateUnlockTobiraUnitCountTrophy()\n                            #this.UpdateUnlockTobiraUnitTrophy(unitDataByUniqueId)\n                        #\n                        #publicvoidOnOpenTobiraTrophy(longunitUniqueID)\n                            #this.UpdateSinsTobiraTrophy(this.FindUnitDataByUniqueID(unitUniqueID))\n                            #this.CheckAllSinsTobiraNonTargetTrophy()\n                        #\n                        #publicvoidUpdateTobiraTrophyStates()\n                            #this.UpdateUnlockTobiraUnitCountTrophy()\n                            #for(intindex=0index<this.Units.Count++index)\n                                #this.UpdateUnlockTobiraUnitTrophy(this.Units)\n                                #this.UpdateSinsTobiraTrophy(this.Units)\n                            #this.CheckAllSinsTobiraNonTargetTrophy()\n                        #\n                        #privatevoidUpdateSinsTobiraTrophy(UnitDataunitData)\n                            #if(!unitData.IsUnlockTobira)\n                            #return\n                            #List<TobiraParam.Category>unlockTobiraCategorys=this.GetUnlockTobiraCategorys(unitData)\n                            #for(intindex1=0index1<unlockTobiraCategorys.Count++index1)\n                                #TrophyConditionTypestype\n                                #switch(unlockTobiraCategorys[index1])\n                                    #caseTobiraParam.Category.Envy:\n                                    #type=TrophyConditionTypes.envy_unlock_unit\n                                    #break\n                                    #caseTobiraParam.Category.Wrath:\n                                    #type=TrophyConditionTypes.sloth_unlock_unit\n                                    #break\n                                    #caseTobiraParam.Category.Sloth:\n                                    #type=TrophyConditionTypes.lust_unlock_unit\n                                    #break\n                                    #caseTobiraParam.Category.Lust:\n                                    #type=TrophyConditionTypes.gluttonny_unlock_unit\n                                    #break\n                                    #caseTobiraParam.Category.Gluttony:\n                                    #type=TrophyConditionTypes.wrath_unlock_unit\n                                    #break\n                                    #caseTobiraParam.Category.Greed:\n                                    #type=TrophyConditionTypes.greed_unlock_unit\n                                    #break\n                                    #caseTobiraParam.Category.Pride:\n                                    #type=TrophyConditionTypes.pride_unlock_unit\n                                    #break\n                                    #default:\n                                    #continue\n                                #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(type)\n                                #for(intindex2=trophiesOfType.Length-1index2>=0--index2)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType[index2]\n                                    #if(string.Equals(trophyObjective.sval_base,unitData.UnitParam.iname))\n                                    #this.SetTrophyCounter(trophyObjective,1)\n                        #\n                        #privatevoidCheckAllSinsTobiraNonTargetTrophy()\n                            #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Envy,TrophyConditionTypes.envy_unlock_unit)\n                            #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Wrath,TrophyConditionTypes.sloth_unlock_unit)\n                            #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Sloth,TrophyConditionTypes.lust_unlock_unit)\n                            #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Lust,TrophyConditionTypes.gluttonny_unlock_unit)\n                            #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Gluttony,TrophyConditionTypes.wrath_unlock_unit)\n                            #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Greed,TrophyConditionTypes.greed_unlock_unit)\n                            #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Pride,TrophyConditionTypes.pride_unlock_unit)\n                        #\n                        #privatevoidSetSinsTobiraTrophyByAllUnit(TobiraParam.Categorycategory,TrophyConditionTypestrophyType)\n                            #intnum=0\n                            #for(intindex=0index<this.Units.Count++index)\n                                #if(this.Units.CheckTobiraIsUnlocked(category))\n                                #++num\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(trophyType)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                #this.SetTrophyCounter(trophyObjective,num)\n                        #\n                        #publicList<TobiraParam.Category>GetUnlockTobiraCategorys(UnitDataunitData)\n                            #List<TobiraParam.Category>categoryList=newList<TobiraParam.Category>()\n                            #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Envy))\n                            #categoryList.Add(TobiraParam.Category.Envy)\n                            #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Sloth))\n                            #categoryList.Add(TobiraParam.Category.Sloth)\n                            #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Lust))\n                            #categoryList.Add(TobiraParam.Category.Lust)\n                            #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Wrath))\n                            #categoryList.Add(TobiraParam.Category.Wrath)\n                            #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Greed))\n                            #categoryList.Add(TobiraParam.Category.Greed)\n                            #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Gluttony))\n                            #categoryList.Add(TobiraParam.Category.Gluttony)\n                            #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Pride))\n                            #categoryList.Add(TobiraParam.Category.Pride)\n                            #returncategoryList\n                        #\n                        #privatevoidUpdateUnlockTobiraUnitCountTrophy()\n                            #if(this.Units==null)\n                            #return\n                            #intnum=0\n                            #for(intindex=0index<this.Units.Count++index)\n                                #if(this.Units.IsUnlockTobira)\n                                #++num\n                            #if(num<=0)\n                            #return\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.unlock_tobira_total)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #this.SetTrophyCounter(trophiesOfType,num)\n                        #\n                        #privatevoidUpdateUnlockTobiraUnitTrophy(UnitDataunitData)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.unlock_tobira_unit)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #if(unitData.IsUnlockTobira)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                    #DebugUtility.LogError(\"トロフィー[\"+trophyObjective.Param.Name+\"]にはユニットが指定されていません。\")\n                                    #elseif(string.Equals(trophyObjective.sval_base,unitData.UnitParam.iname))\n                                    #this.SetTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidOnMixedConceptCard(stringconceptCardID,intbeforeLevel,intcurrentLevel,intbeforeAwakeCount,intcurrentAwakeCount,intbeforeTrust,intcurrentTrust)\n                            #MonoSingleton<GameManager>.Instance.Player.UpdateConceptCardLevelupTrophy(conceptCardID,beforeLevel,currentLevel)\n                            #MonoSingleton<GameManager>.Instance.Player.UpdateConceptCardLimitBreakTrophy(conceptCardID,beforeAwakeCount,currentAwakeCount)\n                            #MonoSingleton<GameManager>.Instance.Player.UpdateConceptCardTrustUpTrophy(conceptCardID,beforeTrust,currentTrust)\n                            #MonoSingleton<GameManager>.Instance.Player.UpdateConceptCardTrustMaxTrophy(conceptCardID,currentTrust)\n                        #\n                        #publicvoidUpdateConceptCardTrophyAll()\n                            #if(this.ConceptCards==null)\n                            #return\n                            #MonoSingleton<GameManager>.Instance.Player.CheckAllConceptCardLevelupTrophy()\n                            #MonoSingleton<GameManager>.Instance.Player.CheckAllConceptCardLimitBreakTrophy()\n                            #MonoSingleton<GameManager>.Instance.Player.CheckAllConceptCardTrustUpTrophy()\n                            #MonoSingleton<GameManager>.Instance.Player.CheckAllConceptCardTrustMaxTrophy()\n                        #\n                        #publicvoidUpdateConceptCardLevelupTrophy(stringconceptCardID,intbeforeLevel,intcurrentLevel)\n                            #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_level)\n                            #intnum=currentLevel-beforeLevel\n                            #if(num>=1)\n                                #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                                #this.AddTrophyCounter(trophiesOfType1,num)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_level_target)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType2\n                                #if(string.Equals(trophyObjective.sval_base,conceptCardID))\n                                    #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                    #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=currentLevel)\n                                    #this.SetTrophyCounter(trophyObjective,currentLevel)\n                        #\n                        #privatevoidCheckAllConceptCardLevelupTrophy()\n                            #MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_level)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_level_target)\n                            #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                #for(intindex2=0index2<this.ConceptCards.Count++index2)\n                                    #if(string.Equals(trophyObjective.sval_base,this.ConceptCards[index2].Param.iname))\n                                        #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                        #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=(int)this.ConceptCards[index2].Lv)\n                                        #this.SetTrophyCounter(trophyObjective,(int)this.ConceptCards[index2].Lv)\n                        #\n                        #publicvoidUpdateConceptCardLimitBreakTrophy(stringconceptCardID,intbeforeLimitBreak,intcurrentLimitBreak)\n                            #if(currentLimitBreak<=0)\n                            #return\n                            #intnum=currentLimitBreak-beforeLimitBreak\n                            #if(num>=1)\n                                #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak_conceptcard)\n                                #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #this.AddTrophyCounter(trophiesOfType,num)\n                            #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak_conceptcard_target)\n                            #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType1\n                                #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&string.Equals(trophyObjective.sval_base,conceptCardID))\n                                    #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                    #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=currentLimitBreak)\n                                    #this.SetTrophyCounter(trophyObjective,currentLimitBreak)\n                        #\n                        #publicvoidCheckAllConceptCardLimitBreakTrophy()\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak_conceptcard_target)\n                            #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                #for(intindex2=0index2<this.ConceptCards.Count++index2)\n                                    #if(string.Equals(trophyObjective.sval_base,this.ConceptCards[index2].Param.iname))\n                                        #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                        #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=(int)this.ConceptCards[index2].AwakeCount)\n                                        #this.SetTrophyCounter(trophyObjective,(int)this.ConceptCards[index2].AwakeCount)\n                        #\n                        #publicvoidUpdateConceptCardTrustUpTrophy(stringconceptCardID,intbeforeTrust,intcurrentTrust)\n                            #if(currentTrust==0)\n                            #return\n                            #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_trust)\n                            #intnum=currentTrust-beforeTrust\n                            #if(num>=1)\n                                #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                                #this.AddTrophyCounter(trophiesOfType1,num)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_trust_target)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType2\n                                #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&string.Equals(trophyObjective.sval_base,conceptCardID))\n                                    #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                    #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=currentTrust)\n                                    #this.SetTrophyCounter(trophyObjective,currentTrust)\n                        #\n                        #publicvoidCheckAllConceptCardTrustUpTrophy()\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_trust_target)\n                            #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                #for(intindex2=0index2<this.ConceptCards.Count++index2)\n                                    #if(string.Equals(trophyObjective.sval_base,this.ConceptCards[index2].Param.iname))\n                                        #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                        #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=(int)this.ConceptCards[index2].Trust)\n                                        #this.SetTrophyCounter(trophyObjective,(int)this.ConceptCards[index2].Trust)\n                        #\n                        #publicvoidUpdateConceptCardTrustMaxTrophy(stringconceptCardID,intcurrentTrust)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.max_conceptcard_trust)\n                            #intcardTrustMax=(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.CardTrustMax\n                            #if(currentTrust<cardTrustMax)\n                            #return\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                #this.AddTrophyCounter(trophyObjective,1)\n                                #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&string.Equals(trophyObjective.sval_base,conceptCardID))\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #privatevoidCheckAllConceptCardTrustMaxTrophy()\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.max_conceptcard_trust)\n                            #intcardTrustMax=(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.CardTrustMax\n                            #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                    #intnum=0\n                                    #for(intindex2=0index2<this.ConceptCards.Count++index2)\n                                        #if((int)this.ConceptCards[index2].Trust>=cardTrustMax)\n                                        #++num\n                                    #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                    #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=num)\n                                    #this.SetTrophyCounter(trophyObjective,num)\n                                #else\n                                    #intnum=0\n                                    #for(intindex2=0index2<this.ConceptCards.Count++index2)\n                                        #if(trophyObjective.sval_base==this.ConceptCards[index2].Param.iname&&(int)this.ConceptCards[index2].Trust>=cardTrustMax)\n                                        #++num\n                                    #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                    #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=num)\n                                    #this.SetTrophyCounter(trophyObjective,num)\n                        #\n                        #publicvoidUpdateSendFriendPresentTrophy()\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.send_present)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType,1)\n                        #\n                        #publicvoidUpdateClearOrdealTrophy(BattleCore.Recordrecord,QuestTypesquestType,stringquestIname)\n                            #if(record.result!=BattleCore.QuestResult.Win&&questType!=QuestTypes.Ordeal)\n                            #return\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.clear_ordeal)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(!string.IsNullOrEmpty(trophyObjective.sval_base))\n                                    #if(trophyObjective.sval_base==questIname)\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                                #else\n                                #DebugUtility.LogError(\"レコードミッション「\"+trophyObjective.Param.Name+\"」はクエストが指定されていません。\")\n                        #\n                        #publicvoidUpdateCompleteAllQuestCountTrophy(QuestParamquestParam=null)\n                            #this.UpdateCompleteMissionCount(TrophyConditionTypes.complete_story_mission_count,questParam)\n                            #this.UpdateCompleteMissionCount(TrophyConditionTypes.complete_event_mission_count,questParam)\n                            #this.UpdateCompleteMissionCount(TrophyConditionTypes.complete_ordeal_mission_count,questParam)\n                            #this.UpdateCompleteMissionCount(TrophyConditionTypes.complete_all_mission_count,questParam)\n                        #\n                        #privatevoidTrophyAllQuestTypeCompleteCount(QuestParamquest=null)\n                            #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                            #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(TrophyConditionTypes.complete_all_mission_count)\n                            #if(quest==null)\n                                #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                    #intnum=0\n                                    #for(intindex2=0index2<instance.Quests.Length++index2)\n                                        #if(instance.Quests[index2].IsMissionCompleteALL())\n                                        #++num\n                                    #this.SetTrophyCounter(trophyObjective,num)\n                            #else\n                                #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #this.AddTrophyCounter(trophiesOfType,1)\n                        #\n                        #privatevoidCheckAllCompleteMissionTrophy()\n                            #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                            #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(TrophyConditionTypes.complete_all_quest_mission_total)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(!string.IsNullOrEmpty(trophyObjective.sval_base))\n                                    #QuestParamquest=instance.FindQuest(trophyObjective.sval_base)\n                                    #if(quest!=null&&quest.IsMissionCompleteALL())\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #privatevoidUpdateCompleteMissionCount(TrophyConditionTypestype,QuestParamquest=null)\n                            #QuestTypesquestTypes\n                            #switch(type)\n                                #caseTrophyConditionTypes.complete_all_mission_count:\n                                #this.TrophyAllQuestTypeCompleteCount(quest)\n                                #return\n                                #caseTrophyConditionTypes.complete_story_mission_count:\n                                #questTypes=QuestTypes.Story\n                                #break\n                                #caseTrophyConditionTypes.complete_event_mission_count:\n                                #questTypes=QuestTypes.Event\n                                #break\n                                #caseTrophyConditionTypes.complete_ordeal_mission_count:\n                                #questTypes=QuestTypes.Ordeal\n                                #break\n                                #default:\n                                #DebugUtility.LogError(\"指定できないミッションが設定されています。\")\n                                #return\n                            #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                            #if(quest!=null)\n                                #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(type)\n                                #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                    #if(questTypes==quest.type)\n                                        #if(trophyObjective.sval!=null&&trophyObjective.sval.Count>0)\n                                            #for(intindex2=0index2<trophyObjective.sval.Count++index2)\n                                                #if(quest.Chapter!=null&&trophyObjective.sval[index2]==quest.Chapter.iname)\n                                                    #this.AddTrophyCounter(trophyObjective,1)\n                                                    #break\n                                        #else\n                                        #this.AddTrophyCounter(trophyObjective,1)\n                            #else\n                                #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(type)\n                                #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                    #intnum=0\n                                    #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                    #if(trophyObjective.sval!=null&&trophyObjective.sval.Count>0)\n                                        #for(intindex2=0index2<instance.Quests.Length++index2)\n                                            #if(questTypes==instance.Quests[index2].type&&instance.Quests[index2].IsMissionCompleteALL()&&instance.Quests[index2].Chapter!=null)\n                                                #for(intindex3=0index3<trophyObjective.sval.Count++index3)\n                                                    #if(trophyObjective.sval[index3]==instance.Quests[index2].Chapter.iname)\n                                                        #++num\n                                                        #break\n                                    #else\n                                        #for(intindex2=0index2<instance.Quests.Length++index2)\n                                            #if(instance.Quests[index2].type==questTypes&&instance.Quests[index2].IsMissionCompleteALL())\n                                            #++num\n                                    #this.SetTrophyCounter(trophyObjective,num)\n                        #\n                        #publicvoidUpdateViewNewsTrophy(stringurl)\n                            #if(!url.Contains(Network.NewsHost))\n                            #return\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.view_news)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType,1)\n                        #\n                        #publicvoidRecordAllCompleteCheck(TrophyCategoryParamcategory)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.view_news)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType,1)\n                        #\n                        #publicvoidUpdateCompleteAllQuestCountTrophy2(QuestParamquestParam=null)\n                            #CompleteQuestMapcompleteQuestMap=(CompleteQuestMap)null\n                            #if(questParam==null)\n                                #completeQuestMap=newCompleteQuestMap()\n                                #completeQuestMap.LoadData()\n                            #this.UpdateCompleteMissionCount2(TrophyConditionTypes.complete_story_mission_count,questParam,completeQuestMap)\n                            #this.UpdateCompleteMissionCount2(TrophyConditionTypes.complete_event_mission_count,questParam,completeQuestMap)\n                            #this.UpdateCompleteMissionCount2(TrophyConditionTypes.complete_ordeal_mission_count,questParam,completeQuestMap)\n                            #this.UpdateCompleteMissionCount2(TrophyConditionTypes.complete_all_mission_count,questParam,completeQuestMap)\n                        #\n                        #privatevoidUpdateCompleteMissionCount2(TrophyConditionTypestype,QuestParamquest=null,CompleteQuestMapcompleteQuestMap=null)\n                            #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                            #QuestTypeskey=QuestTypes.None\n                            #boolflag=false\n                            #switch(type)\n                                #caseTrophyConditionTypes.complete_all_mission_count:\n                                #if(quest==null)\n                                    #flag=true\n                                    #break\n                                #this.TrophyAllQuestTypeCompleteCount(quest)\n                                #return\n                                #caseTrophyConditionTypes.complete_story_mission_count:\n                                #key=QuestTypes.Story\n                                #break\n                                #caseTrophyConditionTypes.complete_event_mission_count:\n                                #key=QuestTypes.Event\n                                #break\n                                #caseTrophyConditionTypes.complete_ordeal_mission_count:\n                                #key=QuestTypes.Ordeal\n                                #break\n                                #default:\n                                #DebugUtility.LogError(\"指定できないミッションが設定されています。\")\n                                #return\n                            #if(quest!=null)\n                                #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(type)\n                                #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                    #if(key==quest.type)\n                                        #if(trophyObjective.sval!=null&&trophyObjective.sval.Count>0)\n                                            #for(intindex2=0index2<trophyObjective.sval.Count++index2)\n                                                #if(quest.Chapter!=null&&trophyObjective.sval[index2]==quest.Chapter.iname)\n                                                    #this.AddTrophyCounter(trophyObjective,1)\n                                                    #break\n                                        #else\n                                        #this.AddTrophyCounter(trophyObjective,1)\n                            #else\n                                #if(completeQuestMap==null)\n                                    #completeQuestMap=newCompleteQuestMap()\n                                    #completeQuestMap.LoadData()\n                                #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(type)\n                                #if(flag)\n                                    #intallCount=completeQuestMap.GetAllCount()\n                                    #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                    #this.SetTrophyCounter(trophiesOfType,allCount)\n                                #else\n                                    #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                        #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                        #intnum1=0\n                                        #if(!string.IsNullOrEmpty(trophyObjective.sval_base))\n                                            #for(intindex2=0index2<trophyObjective.sval.Count++index2)\n                                                #CompleteQuestMap.CompleteQuestDatacompleteQuestData\n                                                #completeQuestMap.mChapterMap.TryGetValue(trophyObjective.sval[index2],outcompleteQuestData)\n                                                #if(completeQuestData!=null)\n                                                    #if(key!=completeQuestData.mQuestType)\n                                                    #DebugUtility.LogError(\"「\"+trophyObjective.Param.iname+\"」に指定されたチャプター「\"+trophyObjective.sval[index2]+\"」は指定のクエストタイプに存在しません。\")\n                                                    #num1+=completeQuestData.mCount\n                                            #this.SetTrophyCounter(trophyObjective,num1)\n                                        #else\n                                            #intnum2=0\n                                            #completeQuestMap.mQuestTypeMap.TryGetValue(key,outnum2)\n                                            #intnum3=num1+num2\n                                            #this.SetTrophyCounter(trophyObjective,num3)\n                        #\n                        #publicvoidOnChallengeMissionComplete(stringtrophyID)\n                            #foreach(TrophyParamtrophyinMonoSingleton<GameManager>.Instance.Trophies)\n                                #if(trophy.IsChallengeMissionRoot&&trophy.iname==trophyID)\n                                #this.AddTrophyCounter(trophy,0,1)\n                        #\n                        #publicvoidOnTowerScore(boolisNow=true)\n                            #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                            #TowerResuponsetowerResuponse=instance.TowerResuponse\n                            #if(towerResuponse==null||string.IsNullOrEmpty(towerResuponse.TowerID)||towerResuponse.speedRank==0&&towerResuponse.techRank==0)\n                            #return\n                            #intnum=instance.CalcTowerScore(isNow)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.overtowerscore)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(num<=trophyObjective.ival&&(string.IsNullOrEmpty(trophyObjective.sval_base)||string.Equals(trophyObjective.sval_base,towerResuponse.TowerID)))\n                                #this.SetTrophyCounter(trophyObjective,num)\n                        #\n                        #publicvoidOnReadTips(stringtrophyIname)\n                            #foreach(TrophyObjectivetrophyObjectiveinMonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.read_tips))\n                                #if(!(trophyObjective.sval_base!=trophyIname))\n                                #this.AddTrophyCounter(trophyObjective,1)\n                            #foreach(TrophyObjectivetrophyObjectiveinMonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.read_tips_count))\n                            #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidUpdateVipDailyMission(intvipLv)\n                        #\n                        #publicvoidUpdateCardDailyMission()\n                            #if((long)this.mVipExpiredAt==0L||TimeManager.FromUnixTime((long)this.mVipExpiredAt)<TimeManager.ServerTime)\n                            #return\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.card)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #TrophyStatetrophyCounter=this.GetTrophyCounter(trophyObjective.Param,false)\n                                #if(trophyCounter!=null&&!trophyCounter.IsCompleted)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #privatevoidResetPrevCheckHour()\n                            #this.mPrevCheckHour=-1\n                        #\n                        #publicvoidUpdateStaminaDailyMission()\n                            #if(!this.mUpdateInterval.PlayCheckUpdate())\n                            #return\n                            #inthour=TimeManager.ServerTime.Hour\n                            #if(hour==this.mPrevCheckHour)\n                            #return\n                            #this.mUpdateInterval.SetUpdateInterval()\n                            #this.mPrevCheckHour=hour\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.stamina)\n                            #List<int>mealHours=MonoSingleton<WatchManager>.Instance.GetMealHours()\n                            #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                #TrophyStatetrophyCounter=this.GetTrophyCounter(trophyObjective.Param,false)\n                                #if(trophyCounter!=null&&!trophyCounter.IsCompleted)\n                                    #intnum1=int.Parse(trophyObjective.sval_base.Substring(0,2))\n                                    #intnum2=int.Parse(trophyObjective.sval_base.Substring(3,2))\n                                    #if(num1<=hour&&hour<num2)\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                                    #if(mealHours!=null)\n                                        #for(intindex2=0index2<mealHours.Count++index2)\n                                            #if(num1<=mealHours[index2]&&mealHours[index2]<num2)\n                                            #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidUpdateArtifactTrophyStates()\n                            #if(this.mArtifacts.Count<1)\n                            #return\n                            #intnum=1\n                            #Dictionary<string,ArtifactData>dictionary=newDictionary<string,ArtifactData>()\n                            #for(intindex=0index<this.mArtifacts.Count++index)\n                                #ArtifactDatamArtifact=this.mArtifacts\n                                #if(mArtifact!=null)\n                                    #num=Mathf.Max(num,(int)mArtifact.Lv)\n                                    #if(mArtifact.ArtifactParam!=null)\n                                        #if(!dictionary.ContainsKey(mArtifact.ArtifactParam.iname))\n                                        #dictionary.Add(mArtifact.ArtifactParam.iname,mArtifact)\n                                        #elseif((int)dictionary[mArtifact.ArtifactParam.iname].Lv<(int)mArtifact.Lv)\n                                        #dictionary[mArtifact.ArtifactParam.iname]=mArtifact\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeartifactlevel)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #if(string.IsNullOrEmpty(trophiesOfType.sval_base))\n                                #this.SetTrophyCounter(trophiesOfType,num)\n                                #elseif(dictionary.ContainsKey(trophiesOfType.sval_base))\n                                #this.SetTrophyCounter(trophiesOfType,(int)dictionary[trophiesOfType.sval_base].Lv)\n                        #\n                        #publicvoidUpdatePlayerTrophyStates()\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.playerlv)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(this.Lv>=trophyObjective.ival)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #\n                        #publicvoidUpdateArenaRankTrophyStates(intcurrentRank=-1,intbestRank=-1)\n                            #if(currentRank==-1)\n                            #currentRank=this.ArenaRank\n                            #if(bestRank==-1)\n                            #bestRank=this.ArenaRankBest\n                            #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.becomearenarank)\n                            #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType1\n                                #if(currentRank==trophyObjective.ival||bestRank==trophyObjective.ival)\n                                #this.SetTrophyCounter(trophyObjective,trophyObjective.ival)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.overarenarank)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType2\n                                #if(bestRank<=trophyObjective.ival)\n                                #this.SetTrophyCounter(trophyObjective,bestRank)\n                        #\n                        #publicvoidUpdateTowerTrophyStates()\n                            #this.OnTowerScore(false)\n                        #\n                        #publicvoidUpdateVersusTowerTrophyStates(stringtowerName,intcurrentFloor)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.overvsrankfloor)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if((string.IsNullOrEmpty(trophyObjective.sval_base)||string.Equals(trophyObjective.sval_base,towerName))&&currentFloor>=trophyObjective.ival)\n                                #this.SetTrophyCounter(trophyObjective,currentFloor)\n                        #\n                        #publicvoidClearNewItemFlags()\n                            #for(intindex=this.mItems.Count-1index>=0--index)\n                                #if(this.mItems!=null)\n                                #this.mItems.IsNew=false\n                        #\n                        #publicvoidClearItemFlags(ItemData.ItemFlagsflags)\n                            #if(flags==(ItemData.ItemFlags)0)\n                            #return\n                            #for(intindex=this.mItems.Count-1index>=0--index)\n                                #if(this.mItems!=null)\n                                #this.mItems.ResetFlag(flags)\n                        #\n                        #publicboolItemEntryExists(stringiname)\n                            #returnthis.mID2ItemData.ContainsKey(iname)\n                        #\n                        #publicvoidClearUnits()\n                            #if(this.mUnits!=null)\n                            #this.mUnits.Clear()\n                            #if(this.mUniqueID2UnitData==null)\n                            #return\n                            #this.mUniqueID2UnitData.Clear()\n                        #\n                        #publicvoidClearItems()\n                            #if(this.mItems!=null)\n                            #this.mItems.Clear()\n                            #if(this.mID2ItemData==null)\n                            #return\n                            #this.mID2ItemData.Clear()\n                        #\n                        #publicvoidClearArtifacts()\n                            #this.mArtifacts.Clear()\n                            #this.mArtifactsNumByRarity.Clear()\n                        #\n                        #publicvoidOfflineSellArtifacts(ArtifactDataartifacts)\n                            #if(artifacts==null)\n                            #return\n                            #for(intindex=0index<artifacts.Length++index)\n                                #this.RemoveArtifact(artifacts)\n                                #this.GainGold(artifacts.ArtifactParam.sell)\n                        #\n                        #publicvoidUpdateArtifactOwner()\n                            #for(intindex1=0index1<this.mUnits.Count++index1)\n                                #if(this.mUnits[index1].Jobs!=null)\n                                    #for(intindex2=0index2<this.mUnits[index1].Jobs.Length++index2)\n                                        #if(this.mUnits[index1].Jobs[index2]!=null&&this.mUnits[index1].Jobs[index2].ArtifactDatas!=null)\n                                            #for(intindex3=0index3<this.mUnits[index1].Jobs[index2].ArtifactDatas.Length++index3)\n                                            #this.mUnits[index1].Jobs[index2].ArtifactDatas[index3]=(ArtifactData)null\n                            #for(intindex=0index<this.mArtifacts.Count++index)\n                                #ArtifactDatamArtifact=this.mArtifacts\n                                #if(mArtifact!=null&&(long)mArtifact.UniqueID!=0L)\n                                    #UnitDataunit=(UnitData)null\n                                    #JobDatajob=(JobData)null\n                                    #if(this.FindOwner(mArtifact,outunit,outjob))\n                                        #intjob_index=Array.IndexOf<JobData>(unit.Jobs,job)\n                                        #if(job_index!=-1)\n                                            #for(intslot=0slot<job.Artifacts.Length++slot)\n                                                #if((long)mArtifact.UniqueID==job.Artifacts[slot])\n                                                    #unit.SetEquipArtifactData(job_index,slot,mArtifact,unit.JobIndex==job_index)\n                                                    #if(unit.JobIndex!=job_index)\n                                                        #unit.UpdateArtifact(unit.JobIndex,true,false)\n                                                        #break\n                                                    #break\n                        #\n                        #publicboolIsBeginner()\n                            #return(double)(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.BeginnerDays>newTimeSpan(TimeManager.FromUnixTime(Network.GetServerTime()).Ticks).TotalDays-newTimeSpan(TimeManager.FromUnixTime((long)(int)this.mNewGameAt).Ticks).TotalDays\n                        #\n                        #publicDateTimeGetBeginnerEndTime()\n                            #returnTimeManager.FromUnixTime((long)(int)this.mNewGameAt).AddDays((double)(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.BeginnerDays)\n                        #\n                        #publicDictionary<ItemParam,int>CreateItemSnapshot()\n                            #Dictionary<ItemParam,int>dictionary=newDictionary<ItemParam,int>()\n                            #for(intindex=0index<this.mItems.Count++index)\n                            #dictionary[this.mItems.Param]=this.mItems.NumNonCap\n                            #returndictionary\n                        #\n                        #publicvoidGainPiecePoint(intpoint)\n                            #this.mPiecePoint=(OInt)Math.Max((int)this.mPiecePoint+point,0)\n                        #\n                        #publicstringDequeueNextLoginBonusTableID()\n                            #if(this.mLoginBonusQueue.Count<1)\n                            #return(string)null\n                            #returnthis.mLoginBonusQueue.Dequeue()\n                        #\n                        #publicboolHasQueuedLoginBonus\n                            #get\n                                #returnthis.mLoginBonusQueue.Count>0\n                        #\n                        #publicvoidUpdateUnitTrophyStates(boolverbose)\n                            #intnum1=0\n                            #intnum2=0\n                            #intnum3=0\n                            #intnum4=0\n                            #intnum5=0\n                            #MasterParammasterParam=MonoSingleton<GameManager>.Instance.MasterParam\n                            #for(intindex1=0index1<this.mUnits.Count++index1)\n                                #UnitDatamUnit=this.mUnits[index1]\n                                #if(mUnit!=null)\n                                    #num1+=mUnit.Lv\n                                    #++num2\n                                    #JobDatajobs=mUnit.Jobs\n                                    #if(jobs!=null)\n                                        #for(intindex2=0index2<jobs.Length++index2)\n                                            #if(jobs[index2]!=null)\n                                                #if(jobs[index2].Rank>=11)\n                                                    #++num3\n                                                    #break\n                                                #if(jobs[index2].Rank>0)\n                                                    #JobSetParamjobSetFast=mUnit.UnitParam.GetJobSetFast(index2)\n                                                    #if(jobSetFast!=null&&!string.IsNullOrEmpty(jobSetFast.jobchange))\n                                                        #JobSetParamjobSetParam=masterParam.GetJobSetParam(jobSetFast.jobchange)\n                                                        #if(jobSetParam!=null&&jobSetParam.job==jobs[index2].JobID)\n                                                            #++num3\n                                                            #break\n                                    #if(mUnit.UnitParam!=null&&mUnit.Rarity-(int)mUnit.UnitParam.rare>0)\n                                    #++num4\n                                    #num5+=mUnit.AwakeLv\n                            #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.collectunits)\n                            #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                                #if(trophiesOfType1.ival<=num2)\n                                #this.AddTrophyCounter(trophiesOfType1,1)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.totaljoblv11)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #if(trophiesOfType2.ival<=num3)\n                                #this.AddTrophyCounter(trophiesOfType2,1)\n                            #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.totalunitlvs)\n                            #for(intindex=trophiesOfType3.Length-1index>=0--index)\n                                #if(trophiesOfType3.ival<=num1)\n                                #this.AddTrophyCounter(trophiesOfType3,1)\n                            #TrophyObjectivetrophiesOfType4=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evoltiontimes)\n                            #for(intindex=trophiesOfType4.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType4\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                #this.SetTrophyCounter(trophyObjective,num4)\n                            #TrophyObjectivetrophiesOfType5=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak)\n                            #for(intindex=trophiesOfType5.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType5\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                #this.SetTrophyCounter(trophyObjective,num5)\n                            #if(!verbose)\n                            #return\n                            #for(intindex1=0index1<this.mUnits.Count++index1)\n                                #UnitDatamUnit=this.mUnits[index1]\n                                #if(mUnit==null||mUnit.UnitParam==null)\n                                #break\n                                #stringiname=mUnit.UnitParam.iname\n                                #this.OnUnitLevelChange(iname,0,mUnit.Lv,true)\n                                #JobDatajobs=mUnit.Jobs\n                                #if(jobs!=null)\n                                    #for(intindex2=0index2<jobs.Length++index2)\n                                    #this.OnJobLevelChange(iname,jobs[index2].JobID,jobs[index2].Rank,true,1)\n                                #this.OnUnitLevelAndJobLevelChange(iname,mUnit.Lv,mUnit.Jobs)\n                                #List<AbilityData>learnAbilitys=mUnit.LearnAbilitys\n                                #for(intindex2=0index2<learnAbilitys.Count++index2)\n                                #this.OnAbilityPowerUp(iname,learnAbilitys[index2].AbilityID,learnAbilitys[index2].Rank,true)\n                                #if(mUnit.Rarity>(int)mUnit.UnitParam.rare)\n                                #this.OnEvolutionCheck(iname,mUnit.Rarity,(int)mUnit.UnitParam.rare)\n                                #this.OnLimitBreakCheck(iname,mUnit.AwakeLv)\n                        #\n                        #publicvoidOnEvolutionCheck(stringunitID,intrarity,intinitialRarity)\n                            #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evolutionnum)\n                            #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType1\n                                #if(trophyObjective.sval_base==unitID&&trophyObjective.ival<=rarity)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                            #intnum=rarity-initialRarity\n                            #if(num<1)\n                            #return\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evoltiontimes)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType2\n                                #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&trophyObjective.sval_base==unitID)\n                                #this.SetTrophyCounter(trophyObjective,num)\n                        #\n                        #publicvoidOnLimitBreakCheck(stringunitID,intawake)\n                            #if(awake<=0)\n                            #return\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&trophyObjective.sval_base==unitID)\n                                #this.SetTrophyCounter(trophyObjective,awake)\n                        #\n                        #publicvoidSetupEventCoin()\n                            #if(this.mEventCoinList.Count!=0||MonoSingleton<GameManager>.Instance.MasterParam.Items==null)\n                            #return\n                            #List<ItemParam>items=MonoSingleton<GameManager>.Instance.MasterParam.Items\n                            #for(intindex=0index<items.Count++index)\n                                #if(items.type==EItemType.EventCoin)\n                                #this.mEventCoinList.Add(newEventCoinData()\n                                    #iname=items.iname,\n                                    #param=items\n                                    #})\n                            #\n                            #publicvoidUpdateEventCoin()\n                                #this.SetupEventCoin()\n                                #for(inti=0i<this.mEventCoinList.Count++i)\n                                    #ItemDataitemData=MonoSingleton<GameManager>.Instance.Player.Items.Find((Predicate<ItemData>)(f=>f.Param.iname.Equals(this.mEventCoinList[i].iname)))\n                                    #if(itemData!=null)\n                                    #this.mEventCoinList[i].have=itemData\n                            #\n                            #publicintEventCoinNum(stringcost_iname)\n                                #if(cost_iname==null)\n                                #return0\n                                #EventCoinDataeventCoinData=this.mEventCoinList.Find((Predicate<EventCoinData>)(f=>f.iname.Equals(cost_iname)))\n                                #if(eventCoinData!=null&&eventCoinData.have!=null)\n                                #returneventCoinData.have.Num\n                                #return0\n                            #\n                            #publicvoidSetEventCoinNum(stringcost_iname,intnum)\n                                #if(cost_iname==null)\n                                #return\n                                #MonoSingleton<GameManager>.Instance.Player.Items.Find((Predicate<ItemData>)(f=>f.Param.iname.Equals(cost_iname)))?.SetNum(num)\n                            #\n                            #publicvoidSetVersusPlacement(stringkey,intidx)\n                                #PlayerPrefsUtility.SetInt(key,idx,false)\n                            #\n                            #publicintGetVersusPlacement(stringkey)\n                                #returnPlayerPrefsUtility.GetInt(key,0)\n                            #\n                            #publicvoidSetTowerMatchInfo(intfloor,intkey,intwincnt,boolgift)\n                                #this.mVersusTwFloor=floor\n                                #this.mVersusTwKey=key\n                                #this.mVersusTwWinCnt=wincnt\n                                #this.mVersusSeasonGift=gift\n                            #\n                            #publicvoidSetRankMatchInfo(int_rank,int_score,RankMatchClass_class,int_battle_point,int_streak_win,int_wincnt,int_losecnt)\n                                #this.mRankMatchOldClass=this.mRankMatchClass\n                                #this.mRankMatchOldRank=this.mRankMatchRank\n                                #this.mRankMatchOldScore=this.mRankMatchScore\n                                #this.mRankMatchRank=_rank\n                                #this.mRankMatchScore=_score\n                                #this.mRankMatchClass=_class\n                                #this.mRankMatchBattlePoint=_battle_point\n                                #this.mRankMatchStreakWin=_streak_win\n                                #this.RankMatchWinCount=_wincnt\n                                #this.RankMatchLoseCount=_losecnt\n                            #\n                            #publicboolIsHaveAward(stringaward)\n                                #if(this.mHaveAward==null)\n                                #returnfalse\n                                #returnthis.mHaveAward.Contains(award)\n                            #\n                            #publicvoidUpdateAchievementTrophyStates()\n                                #if(this.mTrophyStatesInameDict==null)\n                                #return\n                                #List<AchievementParam>achievementData=GameCenterManager.GetAchievementData()\n                                #if(achievementData==null||achievementData.Count<1)\n                                #return\n                                #for(intindex=0index<achievementData.Count++index)\n                                    #AchievementParamachievementParam=achievementData\n                                    #List<TrophyState>trophyStateList\n                                    #if(this.mTrophyStatesInameDict.TryGetValue(achievementParam.iname,outtrophyStateList)&&trophyStateList[0].IsCompleted)\n                                    #GameCenterManager.SendAchievementProgress(achievementParam)\n                            #\n                            #publicvoidSetWishList(stringiname,intpriority)\n                                #this.FriendPresentWishList.Set(iname,priority)\n                            #\n                            #publicvoidSetQuestListDirty()\n                                #this.mQuestListDirty=true\n                            #\n                            #publicList<ConceptCardData>ConceptCards\n                                #get\n                                    #returnthis.mConceptCards\n                            #\n                            #publicList<ConceptCardMaterialData>ConceptCardExpMaterials\n                                #get\n                                    #returnthis.mConceptCardExpMaterials\n                            #\n                            #publicList<ConceptCardMaterialData>ConceptCardTrustMaterials\n                                #get\n                                    #returnthis.mConceptCardTrustMaterials\n                            #\n                            #publicList<SkinConceptCardData>SkinConceptCards\n                                #get\n                                    #returnthis.mSkinConceptCards\n                            #\n                            #publicConceptCardDataFindConceptCardByUniqueID(longiid)\n                                #returnthis.mConceptCards.Find((Predicate<ConceptCardData>)(card=>(long)card.UniqueID==iid))\n                            #\n                            #publicvoidRemoveConceptCardData(longiids)\n                                #this.mConceptCards.RemoveAll((Predicate<ConceptCardData>)(card=>\n                                    #for(intindex=0index<iids.Length++index)\n                                        #if((long)card.UniqueID==iids)\n                                        #returntrue\n                                    #returnfalse\n                                    #}))\n                                    #for(inti=0i<iids.Length++i)\n                                        #UnitDataunitData=this.Units.Find((Predicate<UnitData>)(ud=>\n                                            #if(ud.ConceptCard!=null)\n                                            #return(long)ud.ConceptCard.UniqueID==iids[i]\n                                            #returnfalse\n                                            #}))\n                                            #if(unitData!=null)\n                                            #unitData.ConceptCard=(ConceptCardData)null\n                                        #this.UpdateConceptCardNum()\n                                    #\n                                    #publicvoidUpdateConceptCardNum()\n                                        #this.mConceptCardNum.Clear()\n                                        #for(intindex1=0index1<this.mConceptCards.Count++index1)\n                                            #stringiname=this.mConceptCards[index1].Param.iname\n                                            #if(this.mConceptCardNum.ContainsKey(iname))\n                                                #Dictionary<string,int>mConceptCardNum\n                                                #stringindex2\n                                                #(mConceptCardNum=this.mConceptCardNum)[index2=iname]=mConceptCardNum[index2]+1\n                                            #else\n                                            #this.mConceptCardNum.Add(iname,1)\n                                    #\n                                    #publicvoidUpdateConceptCardNum(stringinames)\n                                        #this.mConceptCardNum.Clear()\n                                        #for(intindex1=0index1<inames.Length++index1)\n                                            #stringiname=inames[index1]\n                                            #if(this.mConceptCardNum.ContainsKey(iname))\n                                                #Dictionary<string,int>mConceptCardNum\n                                                #stringindex2\n                                                #(mConceptCardNum=this.mConceptCardNum)[index2=iname]=mConceptCardNum[index2]+1\n                                            #else\n                                            #this.mConceptCardNum.Add(iname,1)\n                                    #\n                                    #publicintGetConceptCardNum(stringiname)\n                                        #intnum=0\n                                        #this.mConceptCardNum.TryGetValue(iname,outnum)\n                                        #returnnum\n                                    #\n                                    #publicintGetConceptCardMaterialNum(stringiname)\n                                        #intnum=0\n                                        #ConceptCardParamconceptCardParam=MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam(iname)\n                                        #if(conceptCardParam==null)\n                                        #returnnum\n                                        #ConceptCardMaterialDatacardMaterialData=(ConceptCardMaterialData)null\n                                        #if(conceptCardParam.type==eCardType.Enhance_exp)\n                                        #cardMaterialData=this.mConceptCardExpMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==iname))\n                                        #elseif(conceptCardParam.type==eCardType.Enhance_trust)\n                                        #cardMaterialData=this.mConceptCardTrustMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==iname))\n                                        #if(cardMaterialData!=null)\n                                        #num=(int)cardMaterialData.Num\n                                        #returnnum\n                                    #\n                                    #publicOLongGetConceptCardMaterialUniqueID(stringiname)\n                                        #OLongolong=(OLong)-1L\n                                        #ConceptCardParamconceptCardParam=MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam(iname)\n                                        #if(conceptCardParam==null)\n                                        #returnolong\n                                        #ConceptCardMaterialDatacardMaterialData=(ConceptCardMaterialData)null\n                                        #if(conceptCardParam.type==eCardType.Enhance_exp)\n                                        #cardMaterialData=this.mConceptCardExpMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==iname))\n                                        #elseif(conceptCardParam.type==eCardType.Enhance_trust)\n                                        #cardMaterialData=this.mConceptCardTrustMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==iname))\n                                        #if(cardMaterialData!=null)\n                                        #olong=cardMaterialData.UniqueID\n                                        #returnolong\n                                    #\n                                    #publicintGetEnhanceConceptCardMaterial()\n                                        #intnum=0\n                                        #if(this.mConceptCardExpMaterials!=null)\n                                        #num+=this.mConceptCardExpMaterials.Count\n                                        #if(this.mConceptCardTrustMaterials!=null)\n                                        #num+=this.mConceptCardTrustMaterials.Count\n                                        #returnnum\n                                    #\n                                    #publicvoidOverWriteConceptCardMaterials(JSON_ConceptCardMaterialconcept_card_materials)\n                                        #if(concept_card_materials==null)\n                                        #return\n                                        #ConceptCardMaterialDatacardMaterialData=(ConceptCardMaterialData)null\n                                        #for(intindex=0index<concept_card_materials.Length++index)\n                                            #ConceptCardParamparam=MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam(concept_card_materials.iname)\n                                            #if(param!=null)\n                                                #if(param.type==eCardType.Enhance_exp)\n                                                    #cardMaterialData=this.mConceptCardExpMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==param.iname))\n                                                    #if(cardMaterialData!=null)\n                                                    #cardMaterialData.Num=(OInt)concept_card_materials.num\n                                                #elseif(param.type==eCardType.Enhance_trust)\n                                                    #cardMaterialData=this.mConceptCardTrustMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==param.iname))\n                                                    #if(cardMaterialData!=null)\n                                                    #cardMaterialData.Num=(OInt)concept_card_materials.num\n                                                #if((int)cardMaterialData.Num==0)\n                                                    #if(param.type==eCardType.Enhance_exp)\n                                                    #this.mConceptCardExpMaterials.Remove(cardMaterialData)\n                                                    #elseif(param.type==eCardType.Enhance_trust)\n                                                    #this.mConceptCardTrustMaterials.Remove(cardMaterialData)\n                                    #\n                                    #publicvoidSetConceptCardNum(stringiname,intvalue)\n                                        #if(this.mConceptCardNum.ContainsKey(iname))\n                                        #this.mConceptCardNum[iname]=value\n                                        #else\n                                        #this.mConceptCardNum.Add(iname,value)\n                                    #\n                                    #publicvoidOnDirtyConceptCardData()\n                                        #GlobalVars.IsDirtyConceptCardData.Set(true)\n                                        #GlobalVars.IsDirtySkinConceptCardData.Set(true)\n                                    #\n                                    #publicboolIsHaveHealAPItems()\n                                        #boolflag=false\n                                        #List<ItemData>list=this.Items.Where<ItemData>((Func<ItemData,bool>)(x=>x.ItemType==EItemType.ApHeal)).ToList<ItemData>()\n                                        #if(list!=null)\n                                            #for(intindex=0index<list.Count++index)\n                                                #if(list.Num>0)\n                                                    #flag=true\n                                                    #break\n                                        #returnflag\n                                    #\n                                    #publicboolIsHaveConceptCardExpMaterial()\n                                        #if(this.mConceptCardExpMaterials==null||this.mConceptCardExpMaterials.Count==0)\n                                        #returnfalse\n                                        #boolflag=false\n                                        #List<ConceptCardMaterialData>all=this.mConceptCardExpMaterials.FindAll((Predicate<ConceptCardMaterialData>)(p=>(int)p.Num>0))\n                                        #if(all!=null&&all.Count>0)\n                                        #flag=true\n                                        #returnflag\n                                    #\n                                    #publicboolIsHaveConceptCardTrustMaterial()\n                                        #if(this.mConceptCardTrustMaterials==null||this.mConceptCardTrustMaterials.Count==0)\n                                        #returnfalse\n                                        #boolflag=false\n                                        #List<ConceptCardMaterialData>all=this.mConceptCardTrustMaterials.FindAll((Predicate<ConceptCardMaterialData>)(p=>(int)p.Num>0))\n                                        #if(all!=null&&all.Count>0)\n                                        #flag=true\n                                        #returnflag\n                                    #\n                                    #publicvoidSetTowerFloorResetCoin(ReqTowerFloorReset.Json_Responseresult)\n                                        #if(result==null)\n                                        #return\n                                        #this.mFreeCoin=(OInt)result.coin.free\n                                        #this.mPaidCoin=(OInt)result.coin.paid\n                                        #this.mComCoin=(OInt)result.coin.com\n                                    #\n                                    #publicboolSetPremiumLoginBonus(Json_LoginBonusTableloginbonus)\n                                        #if(loginbonus==null||string.IsNullOrEmpty(loginbonus.type))\n                                        #returntrue\n                                        #this.mLoginBonusTables[loginbonus.type]=loginbonus\n                                        #this.mPremiumLoginBonus=loginbonus\n                                        #returntrue\n                                    #\n                                    #[System.Flags]\n                                    #publicenumEDeserializeFlags\n                                        #None=0,\n                                        #Gold=1,\n                                        #Coin=2,\n                                        #Stamina=4,\n                                        #Cave=8,\n                                        #AbilityUp=16,//0x00000010\n                                        #Arena=32,//0x00000020\n                                        #Tour=64,//0x00000040\n                                    #\n                                    #publicclassJson_InitData\n                                        #publicPlayerData.Json_InitUnitsunits\n                                        #publicPlayerData.Json_InitItemsitems\n                                        #publicPlayerData.Json_InitPartyparty\n                                        #publicPlayerData.Json_InitUnitsfriends\n                                    #\n                                    #publicclassJson_FriendData\n                                        #publicJson_Unitfriends\n                                    #\n                                    #publicclassJson_InitUnits\n                                        #publicstringiname\n                                        #publicintexp\n                                        #publicstringskills\n                                    #\n                                    #publicclassJson_InitItems\n                                        #publicstringiname\n                                        #publicintnum\n                                    #\n                                    #publicclassJson_InitParty\n                                        #publicPlayerData.Json_InitPartyUnitunits\n                                    #\n                                    #publicclassJson_InitPartyUnit\n                                        #publicintiid\n                                        #publicintleader\n                                    #\n                                    #privateclassJSON_TrophyState\n                                        #publicstringid=string.Empty\n                                        #publicintcnt\n                                        #publiclongst\n                                        #publicintfin\n                            #\nreturn this\n",
    "ConceptCard[]concept_cards,boolis_data_override=": "def ConceptCardconcept_cards,boolis_data_override=(json):\n    this={}#ConceptCardconcept_cards,boolis_data_override=true)\n    #if(is_data_override&&(concept_cards==null||concept_cards.Length<=0))\n        #this.mConceptCards.Clear()\n        #this.mConceptCardNum.Clear()\n    #else\n        #if(concept_cards==null)\n        #return\n        #for(inti=0i<concept_cards.Length++i)\n            #ConceptCardDataconceptCardData=this.FindConceptCardByUniqueID(concept_cards[i].iid)\n            #if(conceptCardData==null)\n                #try\n                    #conceptCardData=newConceptCardData()\n                    #conceptCardData.Deserialize(concept_cards[i])\n                    #this.mConceptCards.Add(conceptCardData)\n                #catch(Exceptionex)\n                    #DebugUtility.LogException(ex)\n                    #continue\n            #UnitDataunitData=this.Units.Find((Predicate<UnitData>)(ud=>\n                #if(ud.ConceptCard!=null)\n                #return(long)ud.ConceptCard.UniqueID==concept_cards[i].iid\n                #returnfalse\n                #}))\n                #if(unitData!=null)\n                #unitData.ConceptCard=conceptCardData\n            #if(is_data_override)\n                #inti=0\n                #while(i<this.mConceptCards.Count)\n                    #if(Array.Find<JSON_ConceptCard>(concept_cards,(Predicate<JSON_ConceptCard>)(p=>p.iid==(long)this.mConceptCards[i].UniqueID))!=null)\n                        #++i\n                    #else\n                        #UnitDataunitData=this.Units.Find((Predicate<UnitData>)(ud=>\n                            #if(ud.ConceptCard!=null)\n                            #return(long)ud.ConceptCard.UniqueID==(long)this.mConceptCards[i].UniqueID\n                            #returnfalse\n                            #}))\n                            #if(unitData!=null)\n                            #unitData.ConceptCard=(ConceptCardData)null\n                            #this.mConceptCards.RemoveAt(i)\n                #this.UpdateConceptCardNum()\n        #\n        #publicvoidDeserialize(JSON_ConceptCardMaterialconcept_card_materials,boolis_data_override=true)\n            #if(is_data_override&&(concept_card_materials==null||concept_card_materials.Length<=0))\n                #this.mConceptCardExpMaterials.Clear()\n                #this.mConceptCardTrustMaterials.Clear()\n            #else\n                #if(concept_card_materials==null)\n                #return\n                #this.mConceptCardExpMaterials.Clear()\n                #this.mConceptCardTrustMaterials.Clear()\n                #for(intindex=0index<concept_card_materials.Length++index)\n                    #ConceptCardParamconceptCardParam=MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam(concept_card_materials.iname)\n                    #if(conceptCardParam!=null)\n                        #try\n                            #ConceptCardMaterialDatacardMaterialData=newConceptCardMaterialData()\n                            #cardMaterialData.Deserialize(concept_card_materials)\n                            #if(conceptCardParam.type==eCardType.Enhance_exp)\n                            #this.mConceptCardExpMaterials.Add(cardMaterialData)\n                            #elseif(conceptCardParam.type==eCardType.Enhance_trust)\n                            #this.mConceptCardTrustMaterials.Add(cardMaterialData)\n                        #catch(Exceptionex)\n                            #DebugUtility.LogException(ex)\n        #\n        #publicvoidDeserialize(stringinames)\n            #this.mSkinConceptCards.Clear()\n            #if(inames==null)\n            #return\n            #for(intindex=0index<inames.Length++index)\n                #SkinConceptCardDataskinConceptCardData=newSkinConceptCardData()\n                #skinConceptCardData.Deserialize(inames)\n                #this.mSkinConceptCards.Add(skinConceptCardData)\n        #\n        #publicvoidDeserialize(Json_Skinskins)\n            #if(this.mSkins==null)\n            #this.mSkins=newList<string>()\n            #this.mSkins.Clear()\n            #if(skins==null||skins.Length<1)\n            #return\n            #for(intindex=0index<skins.Length++index)\n                #if(skins!=null&&!string.IsNullOrEmpty(skins.iname))\n                #this.mSkins.Add(skins.iname)\n        #\n        #publicvoidDeserialize(Json_Partyparties)\n            #for(intindex=0index<this.mPartys.Count++index)\n            #this.mPartys.Reset()\n            #if(parties==null)\n            #thrownewInvalidJSONException()\n            #for(intindex1=0index1<parties.Length++index1)\n                #intindex2=index1\n                #if(!string.IsNullOrEmpty(parties[index1].ptype))\n                #index2=(int)PartyData.GetPartyTypeFromString(parties[index1].ptype)\n                #this.mPartys[index2].Deserialize(parties[index1])\n                #intlastSelectionIndex=0\n                #PartyWindow2.EditPartyTypeseditPartyType=((PlayerPartyTypes)index2).ToEditPartyType()\n                #if(PartyUtility.LoadTeamPresets(editPartyType,outlastSelectionIndex,false)==null)\n                    #intmaxTeamCount=editPartyType.GetMaxTeamCount()\n                    #List<PartyEditData>teams=newList<PartyEditData>()\n                    #for(intindex3=0index3<maxTeamCount++index3)\n                        #PartyEditDatapartyEditData=newPartyEditData(PartyUtility.CreateDefaultPartyNameFromIndex(index3),this.mPartys[index2])\n                        #teams.Add(partyEditData)\n                    #PartyUtility.SaveTeamPresets(editPartyType,0,teams,false)\n        #\n        #publicboolDeserialize(Json_Mailmails)\n            #this.Mails.Clear()\n            #if(mails==null)\n            #returntrue\n            #for(intindex=0index<mails.Length++index)\n                #MailDatamailData=newMailData()\n                #if(!mailData.Deserialize(mails))\n                    #DebugUtility.Assert(\"FailedMailDeserialize.\")\n                    #returnfalse\n                #this.Mails.Add(mailData)\n            #returntrue\n        #\n        #publicboolDeserialize(Json_Mailsmails)\n            #this.MailPage=newMailPageData()\n            #if(mails==null)\n            #returnfalse\n            #this.MailPage.Deserialize(mails.list)\n            #this.MailPage.Deserialize(mails.option)\n            #returntrue\n        #\n        #publicvoidDeserialize(Json_Friendfriends)\n            #this.Deserialize(friends,FriendStates.Friend)\n            #this.Deserialize(friends,FriendStates.Follwer)\n            #this.Deserialize(friends,FriendStates.Follow)\n        #\n        #publicvoidDeserialize(Json_Friendfriends,FriendStatesstate)\n            #switch(state)\n                #caseFriendStates.Friend:\n                #this.Friends.Clear()\n                #break\n                #caseFriendStates.Follow:\n                #this.FriendsFollow.Clear()\n                #break\n                #caseFriendStates.Follwer:\n                #this.FriendsFollower.Clear()\n                #break\n                #default:\n                #return\n            #if(friends==null)\n            #return\n            #for(intindex=0index<friends.Length++index)\n                #FriendDatafriendData=newFriendData()\n                #try\n                    #friendData.Deserialize(friends)\n                    #if(friendData.State==state)\n                        #switch(friendData.State)\n                            #caseFriendStates.Friend:\n                            #this.Friends.Add(friendData)\n                            #continue\n                            #caseFriendStates.Follow:\n                            #this.FriendsFollow.Add(friendData)\n                            #continue\n                            #caseFriendStates.Follwer:\n                            #this.FriendsFollower.Add(friendData)\n                            #continue\n                            #default:\n                            #continue\n                #catch(Exceptionex)\n                    #DebugUtility.LogException(ex)\n            #if(state!=FriendStates.Friend)\n                #if(state!=FriendStates.Follwer)\n                #return\n                #this.FollowerNum=this.FriendsFollower.Count\n            #else\n            #this.FriendNum=this.Friends.Count\n        #\n        #publicvoidDeserialize(Json_Supportsupports)\n            #this.Supports.Clear()\n            #if(supports==null)\n            #return\n            #for(intindex=0index<supports.Length++index)\n                #SupportDatasupportData=newSupportData()\n                #try\n                    #supportData.Deserialize(supports)\n                    #this.Supports.Add(supportData)\n                #catch(Exceptionex)\n                    #DebugUtility.LogException(ex)\n        #\n        #publicvoidDeserialize(Json_MultiFuidsfuids)\n            #this.MultiFuids.Clear()\n            #if(fuids==null)\n            #return\n            #for(intindex=0index<fuids.Length++index)\n                #MultiFuidmultiFuid=newMultiFuid()\n                #try\n                    #multiFuid.Deserialize(fuids)\n                    #this.MultiFuids.Add(multiFuid)\n                #catch(Exceptionex)\n                    #DebugUtility.LogException(ex)\n        #\n        #publicvoidDeserialize(FriendPresentWishList.Jsonjsons)\n            #try\n                #this.FriendPresentWishList.Clear()\n                #if(jsons==null)\n                #return\n                #this.FriendPresentWishList.Deserialize(jsons)\n            #catch(Exceptionex)\n                #DebugUtility.LogException(ex)\n        #\n        #publicvoidDeserialize(FriendPresentReceiveList.Jsonjsons)\n            #try\n                #this.FriendPresentReceiveList.Clear()\n                #if(jsons==null)\n                #return\n                #this.FriendPresentReceiveList.Deserialize(jsons)\n            #catch(Exceptionex)\n                #DebugUtility.LogException(ex)\n        #\n        #publicboolDeserialize(Json_Notifynotify)\n            #if(notify==null)\n            #returntrue\n            #this.mFirstLogin=(notify.bonus>>5&1)!=0\n            #this.mLoginBonusCount=notify.bonus&31\n            #this.mLoginBonus=notify.logbonus\n            #this.mLoginBonus28days=(Json_LoginBonusTable)null\n            #this.mPremiumLoginBonus=(Json_LoginBonusTable)null\n            #if(notify.logbotables!=null)\n                #for(intindex=0index<notify.logbotables.Length++index)\n                    #if(notify.logbotables!=null&&!string.IsNullOrEmpty(notify.logbotables.type))\n                        #this.mLoginBonusTables[notify.logbotables.type]=notify.logbotables\n                        #if(this.mFirstLogin)\n                        #this.mLoginBonusQueue.Enqueue(notify.logbotables.type)\n                        #if(notify.logbotables.bonus_units!=null&&notify.logbotables.premium_bonuses==null)\n                        #this.mLoginBonus28days=notify.logbotables\n                        #elseif(notify.logbotables.premium_bonuses!=null)\n                        #this.mPremiumLoginBonus=notify.logbotables\n            #this.SupportCount=1\n            #this.SupportGold=notify.supgold\n            #returntrue\n        #\n        #publicvoidDeserialize(Json_Versusjson)\n            #VERSUS_TYPEtype=VERSUS_TYPE.Free\n            if 'point' in json:\n                this['mVersusPoint'] = json['point']\n            #if(json.counts==null)\n            #return\n            #for(intindex=0index<json.counts.Length++index)\n                #if(string.Compare(json.counts.type,VERSUS_TYPE.Free.ToString().ToLower())==0)\n                #type=VERSUS_TYPE.Free\n                #elseif(string.Compare(json.counts.type,VERSUS_TYPE.Tower.ToString().ToLower())==0)\n                #type=VERSUS_TYPE.Tower\n                #elseif(string.Compare(json.counts.type,VERSUS_TYPE.Friend.ToString().ToLower())==0)\n                #type=VERSUS_TYPE.Friend\n                #this.SetVersusWinCount(type,json.counts.win)\n                #this.SetVersusTotalCount(type,json.counts.win+json.counts.lose)\n        #\n        #publicvoidSetVersusWinCount(VERSUS_TYPEtype,intwincnt)\n            #if(type!=VERSUS_TYPE.Free&&type!=VERSUS_TYPE.Tower&&type!=VERSUS_TYPE.Friend)\n            #return\n            #this.mVersusWinCount[(int)type]=wincnt\n        #\n        #publicvoidAddVersusTotalCount(VERSUS_TYPEtype,intaddcnt)\n            #if(type!=VERSUS_TYPE.Free&&type!=VERSUS_TYPE.Tower&&type!=VERSUS_TYPE.Friend)\n            #return\n            #this.mVersusTotalCount[(int)type]=addcnt+this.mVersusTotalCount[(int)type]\n        #\n        #publicvoidSetVersusTotalCount(VERSUS_TYPEtype,intcnt)\n            #if(type!=VERSUS_TYPE.Free&&type!=VERSUS_TYPE.Tower&&type!=VERSUS_TYPE.Friend)\n            #return\n            #this.mVersusTotalCount[(int)type]=cnt\n        #\n        #publicvoidSetVersusRankpoint(intpoint)\n            #this.mVersusPoint=point\n        #\n        #publicvoidSetHaveAward(stringawards)\n            #if(awards==null||awards.Length<=0)\n            #return\n            #this.mHaveAward.Clear()\n            #for(intindex=0index<awards.Length++index)\n                #if(!string.IsNullOrEmpty(awards))\n                #this.mHaveAward.Add(awards)\n        #\n        #publicvoidDeserialize(JSON_PlayerGuildplayer_guild)\n            #this.mPlayerGuild=(PlayerGuildData)null\n            #if(player_guild==null)\n            #return\n            #try\n                #this.mPlayerGuild=newPlayerGuildData()\n                #this.mPlayerGuild.Deserialize(player_guild)\n            #catch(Exceptionex)\n                #DebugUtility.LogException(ex)\n        #\n        #publicvoidDeserialize(JSON_Guildguild)\n            #if(guild!=null)\n                #try\n                    #if(this.mGuild==null)\n                    #this.mGuild=newGuildData()\n                    #this.mGuild.Deserialize(guild)\n                #catch(Exceptionex)\n                    #DebugUtility.LogException(ex)\n            #else\n            #this.mGuild=(GuildData)null\n        #\n        #publicboolIsFirstLogin\n            #get\n                #returnthis.mFirstLogin\n        #\n        #publicvoidForceFirstLogin()\n            #this.mFirstLogin=true\n        #\n        #publicintLoginCountWithType(stringtype)\n            #if(string.IsNullOrEmpty(type)||!this.mLoginBonusTables.ContainsKey(type))\n            #return0\n            #returnthis.mLoginBonusTables[type].count\n        #\n        #publicJson_LoginBonusRecentLoginBonus\n            #get\n                #if(this.LoginBonus!=null&&0<this.mLoginBonusCount&&this.mLoginBonusCount<=this.LoginBonus.Length)\n                #returnthis.LoginBonus[this.mLoginBonusCount-1]\n                #return(Json_LoginBonus)null\n        #\n        #publicJson_LoginBonusFindRecentLoginBonus(stringtype)\n            #Json_LoginBonusloginBonuses=this.FindLoginBonuses(type)\n            #if(loginBonuses==null)\n            #return(Json_LoginBonus)null\n            #intnum=this.LoginCountWithType(type)\n            #if(num<1||loginBonuses.Length<num)\n            #return(Json_LoginBonus)null\n            #returnloginBonuses[num-1]\n        #\n        #publicJson_LoginBonusTableLoginBonus28days\n            #get\n                #returnthis.mLoginBonus28days\n        #\n        #publicJson_LoginBonusLoginBonus\n            #get\n                #returnthis.mLoginBonus\n        #\n        #publicJson_LoginBonusFindLoginBonuses(stringtype)\n            #if(string.IsNullOrEmpty(type))\n            #returnthis.mLoginBonus\n            #if(!this.mLoginBonusTables.ContainsKey(type))\n            #return(Json_LoginBonus)null\n            #returnthis.mLoginBonusTables[type].bonuses\n        #\n        #publicJson_LoginBonusTablePremiumLoginBonus\n            #get\n                #returnthis.mPremiumLoginBonus\n        #\n        #publicintLoginBonusCount\n            #get\n                #returnthis.mLoginBonusCount\n        #\n        #publicstringGetLoginBonusePrefabName(stringtype)\n            #if(string.IsNullOrEmpty(type))\n            #return(string)null\n            #if(!this.mLoginBonusTables.ContainsKey(type))\n            #return(string)null\n            #returnthis.mLoginBonusTables[type].prefab\n        #\n        #publicstringGetLoginBonuseUnitIDs(stringtype)\n            #if(string.IsNullOrEmpty(type))\n            #return(string)null\n            #if(!this.mLoginBonusTables.ContainsKey(type))\n            #return(string)null\n            #returnthis.mLoginBonusTables[type].bonus_units\n        #\n        #publicboolIsLastLoginBonus(stringtype)\n            #if(string.IsNullOrEmpty(type)||!this.mLoginBonusTables.ContainsKey(type))\n            #returnfalse\n            #returnthis.mLoginBonusTables[type].lastday>0\n        #\n        #publicboolCheckUnlock(UnlockTargetstarget)\n            #return((UnlockTargets)(int)this.mUnlocks&target)!=(UnlockTargets)0\n        #\n        #publicvoidSetParty(intindex,PartyDataparty)\n            #if(index<0||index>this.mPartys.Count-1)\n            #return\n            #this.mPartys.SetParty(party)\n        #\n        #publicUnitDataFindUnitDataByUnitID(stringiname)\n            #for(intindex=0index<this.mUnits.Count++index)\n                #if(iname==this.mUnits.UnitParam.iname)\n                #returnthis.mUnits\n            #return(UnitData)null\n        #\n        #publicUnitDataFindUnitDataByUniqueID(longiid)\n            #try\n                #returnthis.mUniqueID2UnitData[iid]\n            #catch(Exceptionex)\n                #return(UnitData)null\n        #\n        #publicUnitDataFindUnitDataByUniqueParam(UnitParamunit)\n            #for(intindex=0index<this.mUnits.Count++index)\n                #if(unit==this.mUnits.UnitParam)\n                #returnthis.mUnits\n            #return(UnitData)null\n        #\n        #publicPartyDataFindPartyOfType(PlayerPartyTypestype)\n            #returnthis.mPartys[(int)type]\n        #\n        #publicvoidSetQuestState(stringname,QuestStatesst)\n            #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(name)\n            #if(quest==null)\n            #return\n            #quest.state=st\n            #this.mQuestListDirty=true\n        #\n        #publicvoidResetQuestStates()\n            #QuestParamquests=MonoSingleton<GameManager>.Instance.Quests\n            #for(intindex=quests.Length-1index>=0--index)\n            #quests.state=QuestStates.New\n            #this.mQuestListDirty=true\n        #\n        #publicvoidResetQuestChallengeResets()\n            #QuestParamquests=MonoSingleton<GameManager>.Instance.Quests\n            #for(intindex=quests.Length-1index>=0--index)\n                #if(quests.dayReset>0)\n                    #DateTimedateTime=TimeManager.FromUnixTime(quests.end-quests.start)\n                    #if(quests.dayReset>=dateTime.Day)\n                    #quests.dailyReset=(short)0\n            #this.mQuestListDirty=true\n        #\n        #publicvoidResetQuestChallenges()\n            #QuestParamquests=MonoSingleton<GameManager>.Instance.Quests\n            #for(intindex=quests.Length-1index>=0--index)\n                #if(quests.dayReset>0)\n                    #DateTimedateTime=TimeManager.FromUnixTime(quests.end-quests.start)\n                    #if(quests.dayReset>=dateTime.Day)\n                    #quests.dailyCount=(short)0\n            #this.mQuestListDirty=true\n        #\n        #publicvoidMarkQuestChallenged(stringname)\n            #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(name)\n            #if(quest==null||quest.state!=QuestStates.New)\n            #return\n            #this.SetQuestState(name,QuestStates.Challenged)\n        #\n        #publicvoidMarkQuestCleared(stringname)\n            #this.SetQuestState(name,QuestStates.Cleared)\n        #\n        #publicQuestParamFindLastStoryQuest()\n            #QuestParamavailableQuests=this.AvailableQuests\n            #intnum=0\n            #stringiname=PlayerPrefsUtility.GetString(PlayerPrefsUtility.LAST_SELECTED_STORY_QUEST_ID,string.Empty)\n            #if(!string.IsNullOrEmpty(iname))\n                #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(iname)\n                #if(quest!=null&&quest.Chapter!=null&&(quest.Chapter.sectionParam!=null&&quest.Chapter.sectionParam.storyPart>0))\n                #num=quest.Chapter.sectionParam.storyPart\n            #for(intindex1=0index1<availableQuests.Length++index1)\n                #if(availableQuests[index1].IsStory&&!string.IsNullOrEmpty(availableQuests[index1].ChapterID)&&(num<=0||availableQuests[index1].Chapter==null||(availableQuests[index1].Chapter.sectionParam==null||num==availableQuests[index1].Chapter.sectionParam.storyPart)))\n                    #QuestParamquestParam=availableQuests[index1]\n                    #for(intindex2=index1+1index2<availableQuests.Length++index2)\n                        #if(availableQuests[index2].IsStory&&(num<=0||availableQuests[index2].Chapter==null||(availableQuests[index2].Chapter.sectionParam==null||num==availableQuests[index2].Chapter.sectionParam.storyPart)))\n                            #questParam=availableQuests[index2]\n                            #if(availableQuests[index2].state!=QuestStates.Cleared)\n                            #returnavailableQuests[index2]\n                    #returnquestParam\n            #return(QuestParam)null\n        #\n        #publicvoidSetQuestMissionFlags(stringname,boolmissions)\n            #intmissions1=0\n            #if(missions!=null)\n                #for(intindex=0index<missions.Length++index)\n                    #if(missions)\n                    #missions1|=1<<index\n            #this.SetQuestMissionFlags(name,missions1)\n        #\n        #publicvoidSetQuestMissionFlags(stringname,intmissions)\n            #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(name)\n            #if(quest==null)\n            #return\n            #quest.clear_missions|=missions\n        #\n        #publicboolIsQuestArchiveOpenByArea(stringchapterIname)\n            #ArchiveParamarchiveByArea=MonoSingleton<GameManager>.Instance.FindArchiveByArea(chapterIname)\n            #if(archiveByArea!=null)\n            #returnthis.IsQuestArchiveOpen(archiveByArea.iname)\n            #returnfalse\n        #\n        #publicboolIsQuestArchiveOpen(stringiname)\n            #return!string.IsNullOrEmpty(iname)&&this.OpenedQuestArchives!=null&&(this.OpenedQuestArchives.Any<OpenedQuestArchive>((Func<OpenedQuestArchive,bool>)(t=>t.iname.Equals(iname)))&&this.OpenedQuestArchives.Find((Predicate<OpenedQuestArchive>)(t=>t.iname.Equals(iname))).end_at>TimeManager.ServerTime)\n        #\n        #publicOpenedQuestArchiveGetOpenedQuestArchive(stringiname)\n            #OpenedQuestArchiveopenedQuestArchive=this.OpenedQuestArchives.Find((Predicate<OpenedQuestArchive>)(t=>t.iname.Equals(iname)))\n            #if(openedQuestArchive!=null&&openedQuestArchive.end_at>TimeManager.ServerTime)\n            #returnopenedQuestArchive\n            #return(OpenedQuestArchive)null\n        #\n        #publicvoidSetQuestChallengeNumDaily(stringname,intnum)\n            #MonoSingleton<GameManager>.Instance.FindQuest(name)?.SetChallangeCount(num)\n        #\n        #publicvoidIncrementQuestChallangeNumDaily(stringname)\n            #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(name)\n            #if(quest==null)\n            #return\n            #intnum=quest.GetChallangeCount()+1\n            #this.SetQuestChallengeNumDaily(name,num)\n        #\n        #publicboolHasItem(stringiname)\n            #ItemDataitemDataByItemId=this.FindItemDataByItemID(iname)\n            #if(itemDataByItemId!=null)\n            #returnitemDataByItemId.Num>0\n            #returnfalse\n        #\n        #publicintGetItemAmount(stringiname)\n            #ItemDataitemDataByItemId=this.FindItemDataByItemID(iname)\n            #if(itemDataByItemId!=null)\n            #returnitemDataByItemId.Num\n            #return0\n        #\n        #publicItemDataFindItemDataByItemID(stringiname)\n            #if(string.IsNullOrEmpty(iname))\n            #return(ItemData)null\n            #returnthis.mItems.Find((Predicate<ItemData>)(p=>p.ItemID==iname))\n        #\n        #publicItemDataFindItemDataByItemParam(ItemParamparam)\n            #returnthis.mItems.Find((Predicate<ItemData>)(p=>p.Param==param))\n        #\n        #publicItemDataFindInventoryByItemID(stringiname)\n            #if(string.IsNullOrEmpty(iname))\n            #return(ItemData)null\n            #for(intindex=0index<this.mInventory.Length++index)\n                #if(this.mInventory!=null&&iname==this.mInventory.ItemID)\n                #returnthis.mInventory\n            #return(ItemData)null\n        #\n        #publicArtifactDataFindArtifactByUniqueID(longiid)\n            #returnthis.mArtifacts.Find((Predicate<ArtifactData>)(p=>(long)p.UniqueID==iid))\n        #\n        #publicList<ArtifactData>FindArtifactsByIDs(HashSet<string>ids)\n            #returnthis.mArtifacts.FindAll((Predicate<ArtifactData>)(artifact=>ids.Contains(artifact.ArtifactParam.iname)))\n        #\n        #publicList<ArtifactData>FindArtifactsByArtifactID(stringiname)\n            #returnthis.mArtifacts.FindAll((Predicate<ArtifactData>)(p=>p.ArtifactParam.iname==iname))\n        #\n        #publicboolFindOwner(ArtifactDataarti,outUnitDataunit,outJobDatajob)\n            #unit=(UnitData)null\n            #job=(JobData)null\n            #for(intindex1=0index1<this.mUnits.Count++index1)\n                #for(intindex2=0index2<this.mUnits[index1].Jobs.Length++index2)\n                    #for(intindex3=0index3<this.mUnits[index1].Jobs[index2].Artifacts.Length++index3)\n                        #if(this.mUnits[index1].Jobs[index2].Artifacts[index3]==(long)arti.UniqueID)\n                            #unit=this.mUnits[index1]\n                            #job=this.mUnits[index1].Jobs[index2]\n                            #returntrue\n            #returnfalse\n        #\n        #publicvoidSetPartyCurrentIndex(intindex)\n            #for(intindex1=0index1<this.mPartys.Count++index1)\n            #this.mPartys[index1].Selected=index==index1\n        #\n        #publicintGetDefensePartyIndex()\n            #for(intindex=1index<this.mPartys.Count++index)\n                #if(this.mPartys.IsDefense)\n                #returnindex\n            #return0\n        #\n        #publicvoidSetDefenseParty(intindex)\n            #for(intindex1=0index1<this.mPartys.Count++index1)\n            #this.mPartys[index1].IsDefense=index==index1\n        #\n        #publicintGetPartyCurrentIndex()\n            #for(intindex=0index<this.mPartys.Count++index)\n                #if(this.mPartys.Selected)\n                #returnindex\n            #return0\n        #\n        #publicPartyDataGetPartyCurrent()\n            #returnthis.Partys[this.GetPartyCurrentIndex()]\n        #\n        #publicvoidAutoSetLeaderUnit()\n            #List<UnitData>units=MonoSingleton<GameManager>.Instance.Player.Units\n            #if(units.Count<=0)\n            #return\n            #for(intindex1=0index1<this.mPartys.Count++index1)\n                #PartyDatamParty=this.mPartys[index1]\n                #if(mParty.GetUnitUniqueID(0)==0L)\n                    #for(intindex2=0index2<units.Count++index2)\n                        #UnitDataunitData=units[index2]\n                        #if(unitData!=null)\n                            #boolflag=false\n                            #for(intindex3=0index3<mParty.MAX_UNIT++index3)\n                                #if(mParty.GetUnitUniqueID(index3)==unitData.UniqueID)\n                                    #flag=true\n                                    #break\n                            #if(!flag)\n                                #mParty.SetUnitUniqueID(0,unitData.UniqueID)\n                                #break\n        #\n        #publicstaticintCalcLevelFromExp(intcurrent)\n            #MasterParammasterParam=MonoSingleton<GameManager>.Instance.MasterParam\n            #intplayerLevelCap=masterParam.GetPlayerLevelCap()\n            #intnum=0\n            #intval1=0\n            #for(intindex=0index<playerLevelCap++index)\n                #num+=masterParam.GetPlayerNextExp(index+1)\n                #if(num>current)\n                #returnval1\n                #++val1\n            #returnMath.Min(Math.Max(val1,1),playerLevelCap)\n        #\n        #publicintCalcLevel()\n            #returnPlayerData.CalcLevelFromExp((int)this.mExp)\n        #\n        #publicintGetLevelExp()\n            #returnMonoSingleton<GameManager>.Instance.MasterParam.GetPlayerNextExp((int)this.mLv)\n        #\n        #publicintGetExp()\n            #return(int)this.mExp-MonoSingleton<GameManager>.Instance.MasterParam.GetPlayerLevelExp((int)this.mLv)\n        #\n        #publicintGetNextExp()\n            #MasterParammasterParam=MonoSingleton<GameManager>.Instance.MasterParam\n            #intplayerLevelCap=masterParam.GetPlayerLevelCap()\n            #intnum=0\n            #for(intindex=0index<playerLevelCap++index)\n                #num+=masterParam.GetPlayerNextExp(index+1)\n                #if(num>(int)this.mExp)\n                #returnnum-(int)this.mExp\n            #return0\n        #\n        #publicvoidGainExp(intexp)\n            #intmLv=(int)this.mLv\n            #PlayerDataplayerData=this\n            #playerData.mExp=(OInt)((int)playerData.mExp+exp)\n            #this.mLv=(OInt)this.CalcLevel()\n            #if(mLv==(int)this.mLv)\n            #return\n            #this.PlayerLevelUp((int)this.mLv-mLv)\n        #\n        #privatevoidPlayerLevelUp(intdelta)\n            #GameManagerinstance=MonoSingleton<GameManager>.Instance\n            #this.mStamina.valMax=instance.MasterParam.GetPlayerParam((int)this.mLv).pt\n            #this.mStamina.val=(OInt)Math.Min((int)this.mStamina.val+(int)instance.MasterParam.FixParam.StaminaAdd2*delta,this.StaminaStockCap)\n            #this.UpdateUnlocks()\n            #if(Network.Mode!=Network.EConnectMode.Offline)\n            #return\n            #this.SavePlayerPrefs()\n        #\n        #publicstaticintCalcVipRankFromPoint(intcurrent)\n            #if(current==0)\n            #return0\n            #MasterParammasterParam=MonoSingleton<GameManager>.Instance.MasterParam\n            #intnum1=0\n            #intnum2=0\n            #intvipRankCap=masterParam.GetVipRankCap()\n            #for(intindex=0index<vipRankCap++index)\n                #num1+=masterParam.GetVipRankNextPoint(index+1)\n                #if(num1<=current)\n                #++num2\n            #returnnum2\n        #\n        #publicvoidGainVipPoint(intpoint)\n        #\n        #publicvoidAddPaymentInfo(stringproductId,intnum=1)\n            #if(this.PaymentInfos.ContainsKey(productId))\n            #this.PaymentInfos[productId].AddNum(num)\n            #else\n            #this.PaymentInfos.Add(productId,newPaymentInfo(productId,num))\n        #\n        #publicvoidUpdateUnlocks()\n            #UnlockTargetsunlockTargets=(UnlockTargets)0\n            #this.mUnlocks=(OInt)0\n            #foreach(UnlockParamunlockinMonoSingleton<GameManager>.Instance.MasterParam.Unlocks)\n                #if(unlock!=null)\n                    #unlockTargets|=unlock.UnlockTarget\n                    #if(unlock.PlayerLevel<=this.Lv&&unlock.VipRank<=this.VipRank)\n                        #PlayerDataplayerData=this\n                        #playerData.mUnlocks=(OInt)((int)((UnlockTargets)(int)playerData.mUnlocks|unlock.UnlockTarget))\n            #PlayerDataplayerData1=this\n            #playerData1.mUnlocks=(OInt)((int)((UnlockTargets)(int)playerData1.mUnlocks|~unlockTargets))\n        #\n        #publicvoidGainGold(intgold)\n            #this.mGold=(OInt)Math.Max((int)this.mGold+gold,0)\n        #\n        #privateItemDataFindByItemID(stringitemID)\n            #try\n                #returnthis.mID2ItemData[itemID]\n            #catch(Exceptionex)\n                #return(ItemData)null\n        #\n        #publicboolCheckFreeGachaGold()\n            #DateTimedateTime1=TimeManager.FromUnixTime(Network.GetServerTime())\n            #DateTimedateTime2=TimeManager.FromUnixTime(this.FreeGachaGold.at)\n            #if(dateTime1.Year<dateTime2.Year||dateTime1.Month<dateTime2.Month||(dateTime1.Day<dateTime2.Day||this.FreeGachaGold.num==0))\n            #returntrue\n            #if(this.FreeGachaGold.num==(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.FreeGachaGoldMax)\n            #returnfalse\n            #returnthis.GetNextFreeGachaGoldCoolDownSec()==0L\n        #\n        #publicboolCheckFreeGachaGoldMax()\n            #DateTimedateTime1=TimeManager.FromUnixTime(Network.GetServerTime())\n            #DateTimedateTime2=TimeManager.FromUnixTime(this.FreeGachaGold.at)\n            #if(dateTime1.Year<dateTime2.Year||dateTime1.Month<dateTime2.Month||dateTime1.Day<dateTime2.Day)\n            #returnfalse\n            #returnthis.FreeGachaGold.num==(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.FreeGachaGoldMax\n        #\n        #publiclongGetNextFreeGachaGoldCoolDownSec()\n            #longserverTime=Network.GetServerTime()\n            #DateTimedateTime1=TimeManager.FromUnixTime(serverTime)\n            #DateTimedateTime2=TimeManager.FromUnixTime(this.FreeGachaGold.at)\n            #if(dateTime1.Year<dateTime2.Year||dateTime1.Month<dateTime2.Month||dateTime1.Day<dateTime2.Day)\n            #return0\n            #returnMath.Max((long)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.FreeGachaGoldCoolDownSec-(serverTime-this.FreeGachaGold.at),0L)\n        #\n        #publicboolCheckFreeGachaCoin()\n            #returnthis.GetNextFreeGachaCoinCoolDownSec()==0L\n        #\n        #publiclongGetNextFreeGachaCoinCoolDownSec()\n            #returnMath.Max((long)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.FreeGachaCoinCoolDownSec-(Network.GetServerTime()-this.FreeGachaCoin.at),0L)\n        #\n        #publicboolCheckPaidGacha()\n            #returnthis.PaidGacha.num==0\n        #\n        #publicvoidSetInventory(intindex,ItemDataitem)\n            #if(0>index||index>=this.mInventory.Length)\n            #return\n            #this.mInventory=item\n        #\n        #publicvoidSaveInventory()\n            #for(intindex=0index<this.mInventory.Length++index)\n                #if(this.mInventory!=null)\n                #PlayerPrefsUtility.SetString(PlayerPrefsUtility.PLAYERDATA_INVENTORY+(object)index,this.mInventory.ItemID,false)\n                #else\n                #PlayerPrefsUtility.DeleteKey(PlayerPrefsUtility.PLAYERDATA_INVENTORY+(object)index)\n        #\n        #publicvoidUpdateInventory()\n            #for(intindex=0index<this.mInventory.Length++index)\n                #this.mInventory=(ItemData)null\n                #if(PlayerPrefsUtility.HasKey(PlayerPrefsUtility.PLAYERDATA_INVENTORY+(object)index))\n                    #stringiname=PlayerPrefsUtility.GetString(PlayerPrefsUtility.PLAYERDATA_INVENTORY+(object)index,string.Empty)\n                    #if(!string.IsNullOrEmpty(iname))\n                        #ItemDataitemDataByItemId=this.FindItemDataByItemID(iname)\n                        #if(itemDataByItemId!=null)\n                        #this.mInventory=itemDataByItemId\n        #\n        #publicboolUseExpPotion(UnitDataunit,ItemDataitem)\n            #if(item==null||item.Param==null||(item.Num<=0||item.ItemType!=EItemType.ExpUpUnit))\n            #returnfalse\n            #unit.GainExp(item.Param.value,MonoSingleton<GameManager>.Instance.Player.Lv)\n            #item.Used(1)\n            #returntrue\n        #\n        #publicboolCheckFriend(stringfuid)\n            #if(string.IsNullOrEmpty(fuid))\n            #returnfalse\n            #FriendDatafriendData=this.Friends.Find((Predicate<FriendData>)(p=>p.FUID==fuid))\n            #if(friendData!=null)\n            #returnfriendData.IsFriend()\n            #returnfalse\n        #\n        #publicvoidRemoveFriendFollowerAll()\n            #MonoSingleton<GameManager>.Instance.Player.FriendsFollower.Clear()\n            #this.FollowerNum=0\n        #\n        #publicvoidRemoveFriendFollower(stringfuid)\n            #if(string.IsNullOrEmpty(fuid))\n            #return\n            #FriendDatafriendData=this.FriendsFollower.Find((Predicate<FriendData>)(p=>p.FUID==fuid))\n            #if(friendData==null)\n            #return\n            #this.FriendsFollower.Remove(friendData)\n            #--this.FollowerNum\n        #\n        #publicboolCheckEnableEquipUnit(ItemParamitem)\n            #if(item==null||item.type!=EItemType.Equip)\n            #returnfalse\n            #for(intindex=0index<this.Units.Count++index)\n                #if(this.Units.CheckEnableEquipment(item))\n                #returntrue\n            #returnfalse\n        #\n        #publicboolCheckEnableCreateItem(ItemParamparam,boolroot=true,intneedNum=1,NeedEquipItemListitem_list=null)\n            #boolis_ikkatsu=false\n            #returnthis.CheckEnableCreateItem(param,refis_ikkatsu,root,needNum,item_list)\n        #\n        #publicboolCheckEnableCreateItem(ItemParamparam,refboolis_ikkatsu,boolroot=true,intneedNum=1,NeedEquipItemListitem_list=null)\n            #if(root)\n                #this.mConsumeMaterials.Clear()\n                #this.mCreateItemCost=0\n                #is_ikkatsu=false\n            #if(param==null||string.IsNullOrEmpty(param.recipe))\n                #if(item_list!=null&&param.IsCommon&&(int)param.cmn_type-1==2)\n                #item_list.Add(param,1,true)\n                #returnfalse\n            #RecipeParamrecipe=param.Recipe\n            #if(recipe==null||recipe.items==null)\n            #returnfalse\n            #this.mCreateItemCost+=recipe.cost*needNum\n            #boolflag=true\n            #for(intindex=0index<recipe.items.Length++index)\n                #RecipeItemrecipeItem=recipe.items\n                #ItemDataitemDataByItemId=this.FindItemDataByItemID(recipeItem.iname)\n                #intval1=itemDataByItemId==null?0:itemDataByItemId.Num\n                #intnum1=recipeItem.num*needNum\n                #if(this.mConsumeMaterials.ContainsKey(recipeItem.iname))\n                    #intnum2=Math.Min(Math.Max(val1-this.mConsumeMaterials[recipeItem.iname],0),num1)\n                    #if(num2>0)\n                        #Dictionary<string,int>consumeMaterials\n                        #stringiname\n                        #(consumeMaterials=this.mConsumeMaterials)[iname=recipeItem.iname]=consumeMaterials[iname]+num2\n                        #num1-=num2\n                #else\n                    #intnum2=Math.Min(val1,num1)\n                    #if(num2>0)\n                        #this.mConsumeMaterials.Add(recipeItem.iname,num2)\n                        #num1-=num2\n                #if(num1>0)\n                    #ItemParamitemParam=MonoSingleton<GameManager>.GetInstanceDirect().GetItemParam(recipeItem.iname)\n                    #if(item_list!=null)\n                        #boolis_common=itemParam.IsCommon&&index==0\n                        #if(is_common)\n                        #item_list.Add(itemParam,num1,false)\n                        #elseif(!itemParam.IsCommon&&string.IsNullOrEmpty(itemParam.recipe))\n                        #item_list.IsNotEnough=true\n                        #item_list.SetRecipeTree(newRecipeTree(itemParam),is_common)\n                    #if(!this.CheckEnableCreateItem(itemParam,refis_ikkatsu,false,num1,item_list))\n                    #flag=false\n                    #item_list?.UpRecipeTree()\n                    #if(itemParam.recipe!=null)\n                    #is_ikkatsu=true\n            #returnflag\n        #\n        #publicboolCheckEnableCreateItem(ItemParamparam,refboolis_ikkatsu,refintcost,refDictionary<string,int>consumes,NeedEquipItemListitem_list=null)\n            #returnthis.CheckEnableCreateItem(param,1,refis_ikkatsu,refcost,refconsumes,item_list)\n        #\n        #publicboolCheckEnableCreateItem(ItemParamparam,intcount,refboolis_ikkatsu,refintcost,refDictionary<string,int>consumes,NeedEquipItemListitem_list=null)\n            #boolflag=this.CheckEnableCreateItem(param,refis_ikkatsu,true,count,item_list)\n            #cost=this.mCreateItemCost\n            #consumes=this.mConsumeMaterials\n            #returnflag\n        #\n        #publicintGetCreateItemCost(ItemParamparam)\n            #boolis_ikkatsu=false\n            #this.CheckEnableCreateItem(param,refis_ikkatsu,true,1,(NeedEquipItemList)null)\n            #returnthis.mCreateItemCost\n        #\n        #publicboolCheckEnableCreateEquipItemAll(UnitDataself,EquipDataequips,refDictionary<string,int>consume,refintcost,NeedEquipItemListitem_list=null)\n            #if(self==null||equips==null)\n            #returnfalse\n            #this.mConsumeMaterials.Clear()\n            #this.mCreateItemCost=0\n            #for(intindex=0index<equips.Length++index)\n                #EquipDataequip=equips\n                #if(equip==null||equip.ItemParam.equipLv>self.Lv)\n                    #if(item_list!=null)\n                    #item_list.IsNotEnough=true\n                    #returnfalse\n                #if(!equip.IsEquiped())\n                    #ItemDataitemDataByItemParam=this.FindItemDataByItemParam(equip.ItemParam)\n                    #intval1=itemDataByItemParam==null?0:itemDataByItemParam.Num\n                    #intnum1=1\n                    #if(this.mConsumeMaterials.ContainsKey(equip.ItemID))\n                        #intnum2=Math.Min(Math.Max(val1-this.mConsumeMaterials[equip.ItemID],0),num1)\n                        #if(num2>0)\n                            #Dictionary<string,int>consumeMaterials\n                            #stringitemId\n                            #(consumeMaterials=this.mConsumeMaterials)[itemId=equip.ItemID]=consumeMaterials[itemId]+num2\n                            #num1-=num2\n                    #else\n                        #intnum2=Math.Min(val1,num1)\n                        #if(num2>0)\n                            #this.mConsumeMaterials.Add(equip.ItemID,num2)\n                            #num1-=num2\n                    #if(num1!=0&&!this.CheckEnableCreateItem(equips.ItemParam,false,num1,item_list))\n                        #if(equips.ItemParam.Recipe==null&&(int)equips.ItemParam.cmn_type-1!=2)\n                            #if(item_list!=null)\n                            #item_list.IsNotEnough=true\n                            #returnfalse\n                        #if(item_list==null||!item_list.IsEnoughCommon())\n                        #returnfalse\n            #consume=this.mConsumeMaterials\n            #cost=this.mCreateItemCost\n            #if(this.Gold>=cost)\n            #returntrue\n            #if(item_list!=null)\n            #item_list.IsNotEnough=true\n            #returnfalse\n        #\n        #publicboolCheckEnableCreateEquipItemAll(UnitDataself,EquipDataequips,NeedEquipItemListitem_list=null)\n            #returnthis.CheckEnableCreateEquipItemAll(self,equips,refthis.mConsumeMaterials,refthis.mCreateItemCost,item_list)\n        #\n        #publicboolCheckEnable2(UnitDataself,EquipDataequips_base,refDictionary<string,int>consume,refintcost,refinttarget_rank,refboolcan_jobmaster,refboolcan_jobmax,NeedEquipItemListitem_list=null)\n            #JobParamjobParam=MonoSingleton<GameManager>.Instance.MasterParam.GetJobParam(self.CurrentJob.JobID)\n            #intrank=self.CurrentJob.Rank\n            #intjobRankCap=self.CurrentJob.GetJobRankCap(self)\n            #this.mConsumeMaterials.Clear()\n            #this.mCreateItemCost=0\n            #EquipDataequips=newEquipData[6]\n            #for(intlv=ranklv<=jobRankCap++lv)\n                #boolequipItemAll2\n                #if(lv==rank)\n                    #equipItemAll2=this.CheckEnableCreateEquipItemAll2(self,equips_base,item_list)\n                #else\n                    #for(intindex=0index<equips.Length++index)\n                        #equips=newEquipData()\n                        #equips.Setup(jobParam.GetRankupItemID(lv,index))\n                    #equipItemAll2=this.CheckEnableCreateEquipItemAll2(self,equips,item_list)\n                #if(equipItemAll2)\n                    #if(jobRankCap==JobParam.MAX_JOB_RANK&&lv==jobRankCap&&equipItemAll2)\n                    #can_jobmaster=true\n                    #if(lv==jobRankCap)\n                    #can_jobmax=true\n                    #consume=newDictionary<string,int>((IDictionary<string,int>)this.mConsumeMaterials)\n                    #cost=this.mCreateItemCost\n                    #target_rank=Mathf.Min(lv+1,jobRankCap)\n                #else\n                #break\n            #returntrue\n        #\n        #publicboolCheckEnableCreateEquipItemAll2(UnitDataself,EquipDataequips,NeedEquipItemListitem_list=null)\n            #if(self==null||equips==null)\n            #returnfalse\n            #for(intindex=0index<equips.Length++index)\n                #EquipDataequip=equips\n                #if(equip==null||string.IsNullOrEmpty(equip.ItemID)||equip.ItemParam.equipLv>self.Lv)\n                #returnfalse\n                #if(!equip.IsEquiped())\n                    #ItemDataitemDataByItemParam=this.FindItemDataByItemParam(equip.ItemParam)\n                    #intval1=itemDataByItemParam==null?0:itemDataByItemParam.Num\n                    #intnum1=1\n                    #if(this.mConsumeMaterials.ContainsKey(equip.ItemID))\n                        #intnum2=Math.Min(Math.Max(val1-this.mConsumeMaterials[equip.ItemID],0),num1)\n                        #if(num2>0)\n                            #Dictionary<string,int>consumeMaterials\n                            #stringitemId\n                            #(consumeMaterials=this.mConsumeMaterials)[itemId=equip.ItemID]=consumeMaterials[itemId]+num2\n                            #num1-=num2\n                    #else\n                        #intnum2=Math.Min(val1,num1)\n                        #if(num2>0)\n                            #this.mConsumeMaterials.Add(equip.ItemID,num2)\n                            #num1-=num2\n                    #if(num1!=0&&!this.CheckEnableCreateItem(equip.ItemParam,false,num1,item_list)&&(item_list==null||!item_list.IsEnoughCommon()))\n                        #item_list?.Remove()\n                        #returnfalse\n            #if(this.Gold>=this.mCreateItemCost)\n            #returntrue\n            #if(item_list!=null)\n            #item_list.IsNotEnough=true\n            #returnfalse\n        #\n        #publicboolSetUnitEquipment(UnitDataunit,intslotIndex)\n            #if(!unit.CurrentJob.CheckEnableEquipSlot(slotIndex))\n                #Debug.LogError((object)\"指定スロットに装備を装着する事はできません。\")\n                #returnfalse\n            #ItemDataitemDataByItemId=this.FindItemDataByItemID(unit.GetRankupEquipData(unit.JobIndex,slotIndex).ItemID)\n            #if(itemDataByItemId==null||itemDataByItemId.Num<=0)\n                #Debug.LogError((object)\"装備アイテムを所持していません。\")\n                #returnfalse\n            #unit.CurrentJob.Equip(slotIndex)\n            #unit.CalcStatus()\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)\n            #returntrue\n        #\n        #publicboolRarityUpUnit(UnitDataunit)\n            #if(!unit.CheckUnitRarityUp())\n            #returnfalse\n            #RecipeParamrarityUpRecipe=unit.GetRarityUpRecipe()\n            #if(rarityUpRecipe.cost>(int)this.mGold||!unit.UnitRarityUp())\n            #returnfalse\n            #PlayerDataplayerData=this\n            #playerData.mGold=(OInt)((int)playerData.mGold-rarityUpRecipe.cost)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.UnitUnlock)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)\n            #returntrue\n        #\n        #privatevoidConsumeAwakePieces(UnitDataunit,intnum)\n            #ItemDataitemDataByItemId1=this.FindItemDataByItemID(unit.UnitParam.piece)\n            #ItemDataitemDataByItemId2=this.FindItemDataByItemID(unit.UnitParam.piece)\n            #ItemDataitemDataByItemId3=this.FindItemDataByItemID(unit.UnitParam.piece)\n            #if(itemDataByItemId1!=null&&itemDataByItemId1.Num>0)\n                #intnum1=itemDataByItemId1.Num<num?itemDataByItemId1.Num:num\n                #itemDataByItemId1.Used(num1)\n                #num-=num1\n            #if(num<1)\n            #return\n            #if(itemDataByItemId2!=null&&itemDataByItemId2.Num>0)\n                #intnum1=itemDataByItemId2.Num<num?itemDataByItemId2.Num:num\n                #itemDataByItemId2.Used(num1)\n                #num-=num1\n            #if(num<1)\n            #return\n            #if(itemDataByItemId3!=null&&itemDataByItemId3.Num>0)\n                #intnum1=itemDataByItemId3.Num<num?itemDataByItemId3.Num:num\n                #itemDataByItemId3.Used(num1)\n                #num-=num1\n            #if(num<1)\n            #return\n            #Debug.LogError((object)(\"減算できていない欠片個数:\"+(object)num))\n        #\n        #publicboolAwakingUnit(UnitDataunit)\n            #if(!unit.CheckUnitAwaking())\n            #returnfalse\n            #intawakeNeedPieces=unit.GetAwakeNeedPieces()\n            #if(!unit.UnitAwaking())\n            #returnfalse\n            #this.ConsumeAwakePieces(unit,awakeNeedPieces)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.UnitUnlock)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)\n            #returntrue\n        #\n        #publicList<ItemData>GetJobRankUpReturnItemData(UnitDataself,intjobNo,boolignoreEquiped=false)\n            #returnself.GetJobRankUpReturnItemData(jobNo,ignoreEquiped)\n        #\n        #publicboolJobRankUpUnit(UnitDataunit,intjobIndex)\n            #if(!unit.CheckJobRankUpAllEquip(jobIndex,true))\n            #returnfalse\n            #unit.JobRankUp(jobIndex)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.UnitUnlock)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)\n            #returntrue\n        #\n        #publicboolClassChangeUnit(UnitDataunit,intindex)\n            #if(!unit.CheckJobClassChange(index))\n            #returnfalse\n            #unit.JobClassChange(index)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.UnitUnlock)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)\n            #returntrue\n        #\n        #publicboolCheckRankUpAbility(AbilityDataability)\n            #returnability.Rank<ability.GetRankCap()&&this.AbilityRankUpCountNum!=0&&this.Gold>=MonoSingleton<GameManager>.Instance.MasterParam.GetAbilityNextGold(ability.Rank)\n        #\n        #publicboolRankUpAbility(AbilityDataability,boolis_update_badges=true)\n            #if(!this.CheckRankUpAbility(ability))\n            #returnfalse\n            #this.GainGold(-ability.GetNextGold())\n            #ability.GainExp(1)\n            #this.mAbilityRankUpCount.val=(OInt)Math.Max((int)(--this.mAbilityRankUpCount.val),0)\n            #if(is_update_badges)\n            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)\n            #returntrue\n        #\n        #publicvoidGainItem(stringitemID,intnum)\n            #ItemDatabyItemId=this.FindByItemID(itemID)\n            #if(byItemId==null)\n                #ItemDataitemData=newItemData()\n                #itemData.Setup(0L,itemID,num)\n                #itemData.IsNew=true\n                #itemData.IsNewSkin=itemData.Param!=null&&itemData.Param.type==EItemType.UnitSkin\n                #this.Items.Add(itemData)\n            #else\n            #byItemId.Gain(num)\n        #\n        #publicvoidGainUnit(stringunitID)\n            #UnitParamunitParam=MonoSingleton<GameManager>.Instance.MasterParam.GetUnitParam(unitID)\n            #UnitDataunitData=newUnitData()\n            #List<long>longList=newList<long>()\n            #foreach(UnitDatamUnitinthis.mUnits)\n            #longList.Add(mUnit.UniqueID)\n            #longuniqueID=1\n            #for(longindex=1index<1000L++index)\n                #boolflag=false\n                #foreach(longnuminlongList)\n                    #if(index==num)\n                        #flag=true\n                        #break\n                #if(!flag)\n                    #uniqueID=index\n                    #break\n            #Json_Unitjson=newJson_Unit(){iid=uniqueID,iname=unitParam.iname,exp=0,lv=1,plus=0,rare=0,select=newJson_UnitSelectable()}\n            #json.select.job=0L\n            #json.jobs=(Json_Job)null\n            #json.abil=(Json_MasterAbility)null\n            #if(unitParam.jobsets!=null&&unitParam.jobsets.Length>0)\n                #List<Json_Job>jsonJobList=newList<Json_Job>(unitParam.jobsets.Length)\n                #intnum=1\n                #for(intindex=0index<unitParam.jobsets.Length++index)\n                    #JobSetParamjobSetParam=MonoSingleton<GameManager>.Instance.GetJobSetParam(unitParam.jobsets)\n                    #if(jobSetParam!=null)\n                    #jsonJobList.Add(newJson_Job()\n                        #iid=(long)num++,\n                        #iname=jobSetParam.job,\n                        #rank=0,\n                        #equips=(Json_Equip)null,\n                        #abils=(Json_Ability)null,\n                        #artis=(Json_Artifact)null\n                        #})\n                    #for(intindex=0index<unitParam.jobsets.Length++index)\n                        #JobSetParamjobSetParam=MonoSingleton<GameManager>.Instance.GetJobSetParam(unitParam.jobsets)\n                        #while(!string.IsNullOrEmpty(jobSetParam.jobchange))\n                            #jobSetParam=MonoSingleton<GameManager>.Instance.GetJobSetParam(jobSetParam.jobchange)\n                            #if(jobSetParam!=null)\n                            #jsonJobList.Add(newJson_Job()\n                                #iid=(long)num++,\n                                #iname=jobSetParam.job,\n                                #rank=0,\n                                #equips=(Json_Equip)null,\n                                #abils=(Json_Ability)null,\n                                #artis=(Json_Artifact)null\n                                #})\n                                #else\n                                #break\n                        #json.jobs=jsonJobList.ToArray()\n                    #unitData.Deserialize(json)\n                    #unitData.SetUniqueID(uniqueID)\n                    #unitData.JobRankUp(0)\n                    #this.mUnits.Add(unitData)\n                    #this.mUniqueID2UnitData[unitData.UniqueID]=unitData\n                #\n                #publicvoidGainUnit(UnitDataunit)\n                    #this.mUnits.Add(unit)\n                    #this.mUniqueID2UnitData[unit.UniqueID]=unit\n                #\n                #publicList<UnitData>GetSortedUnits(stringmenuID,boolincludeShujinko=true)\n                    #GameUtility.UnitSortModessortMode=GameUtility.UnitSortModes.Time\n                    #boolascending=false\n                    #if(!string.IsNullOrEmpty(menuID)&&PlayerPrefsUtility.HasKey(menuID))\n                        #stringstr=PlayerPrefsUtility.GetString(menuID,string.Empty)\n                        #ascending=PlayerPrefsUtility.GetInt(menuID+\"#\",0)!=0\n                        #try\n                            #sortMode=(GameUtility.UnitSortModes)Enum.Parse(typeof(GameUtility.UnitSortModes),str,true)\n                        #catch(Exceptionex)\n                    #returnthis.GetSortedUnits(sortMode,ascending,includeShujinko)\n                #\n                #publicList<UnitData>GetSortedUnits(GameUtility.UnitSortModessortMode,boolascending=false,boolincludeShujinko=true)\n                    #List<UnitData>units1=MonoSingleton<GameManager>.Instance.Player.Units\n                    #List<UnitData>units2=newList<UnitData>()\n                    #for(intindex=0index<units1.Count++index)\n                        #UnitDataunitData=units1\n                        #if(includeShujinko||!unitData.UnitParam.IsHero())\n                        #units2.Add(unitData)\n                    #intsortValues=(int)null\n                    #if(sortMode!=GameUtility.UnitSortModes.Time)\n                    #GameUtility.SortUnits(units2,sortMode,false,outsortValues,true)\n                    #else\n                    #ascending=!ascending\n                    #if(ascending)\n                    #units2.Reverse()\n                    #returnunits2\n                #\n                #publicUnitDataGetUnitData(longiid)\n                    #for(intindex=0index<this.mUnits.Count++index)\n                        #if(this.mUnits.UniqueID==iid)\n                        #returnthis.mUnits\n                    #return(UnitData)null\n                #\n                #publicintGetItemSlotAmount()\n                    #intnum=0\n                    #for(intindex=0index<this.mItems.Count++index)\n                        #if(this.mItems.Num!=0)\n                        #++num\n                    #returnnum\n                #\n                #publicboolCheckConceptCardCapacity(intadddValue)\n                    #return(int)GlobalVars.ConceptCardNum+adddValue<=this.ConceptCardCap\n                #\n                #publicboolCheckItemCapacity(ItemParamitem,intnum)\n                    #returnthis.GetItemAmount(item.iname)+num<=item.cap\n                #\n                #publicCreateItemResultCheckCreateItem(ItemParamitem)\n                    #if(item==null||string.IsNullOrEmpty(item.recipe))\n                    #returnCreateItemResult.NotEnough\n                    #RecipeParamrecipeParam=MonoSingleton<GameManager>.Instance.GetRecipeParam(item.recipe)\n                    #if(recipeParam==null)\n                    #returnCreateItemResult.NotEnough\n                    #boolflag=false\n                    #for(intindex=0index<recipeParam.items.Length++index)\n                        #RecipeItemrecipeItem=recipeParam.items\n                        #intnum=recipeItem.num\n                        #intitemAmount1=this.GetItemAmount(recipeItem.iname)\n                        #if(itemAmount1<num)\n                            #ItemParamitemParam=MonoSingleton<GameManager>.Instance.GetItemParam(recipeItem.iname)\n                            #if(itemParam==null||!itemParam.IsCommon)\n                            #returnCreateItemResult.NotEnough\n                            #intitemAmount2=this.GetItemAmount(MonoSingleton<GameManager>.Instance.MasterParam.GetCommonEquip(itemParam,false).iname)\n                            #if(itemAmount1+itemAmount2<num)\n                            #returnCreateItemResult.NotEnough\n                            #flag=true\n                    #returnflag?CreateItemResult.CanCreateCommon:CreateItemResult.CanCreate\n                #\n                #publicboolCreateItem(ItemParamitem)\n                    #RecipeParamrecipeParam=MonoSingleton<GameManager>.Instance.GetRecipeParam(item.recipe)\n                    #if(!this.CheckItemCapacity(item,1)||recipeParam.cost>this.Gold||this.CheckCreateItem(item)==CreateItemResult.NotEnough)\n                    #returnfalse\n                    #this.GainGold(-recipeParam.cost)\n                    #for(intindex=0index<recipeParam.items.Length++index)\n                        #RecipeItemrecipeItem=recipeParam.items\n                        #this.GainItem(recipeItem.iname,-recipeItem.num)\n                    #this.GainItem(item.iname,1)\n                    #returntrue\n                #\n                #publicboolCreateItemAll(ItemParamitem)\n                    #if(!this.CheckItemCapacity(item,1))\n                    #returnfalse\n                    #Dictionary<string,int>consumes=(Dictionary<string,int>)null\n                    #boolis_ikkatsu=false\n                    #intcost=0\n                    #if(!this.CheckEnableCreateItem(item,refis_ikkatsu,refcost,refconsumes,(NeedEquipItemList)null)||cost>this.Gold)\n                    #returnfalse\n                    #this.GainGold(-cost)\n                    #if(consumes!=null)\n                        #foreach(stringkeyinconsumes.Keys)\n                        #this.GainItem(key,-consumes[key])\n                    #this.GainItem(item.iname,1)\n                    #returntrue\n                #\n                #publicboolCheckEnableConvertGold()\n                    #returnthis.Items.Find((Predicate<ItemData>)(item=>\n                        #if(item.ItemType==EItemType.GoldConvert)\n                        #returnitem.Num>0\n                        #returnfalse\n                        #}))!=null\n                    #\n                    #publicShopDataGetShopData(EShopTypetype)\n                        #if(type==EShopType.Limited)\n                        #returnthis.GetLimitedShopData().GetShopData()\n                        #if(type==EShopType.Event)\n                        #returnthis.GetEventShopData().GetShopData()\n                        #returnthis.mShops[(int)type]\n                    #\n                    #publicvoidSetShopData(EShopTypetype,ShopDatashop)\n                        #switch(type)\n                            #caseEShopType.Event:\n                            #this.mEventShops.SetShopData(shop)\n                            #break\n                            #caseEShopType.Limited:\n                            #this.mLimitedShops.SetShopData(shop)\n                            #break\n                        #this.mShops[(int)type]=shop\n                    #\n                    #publicLimitedShopDataGetLimitedShopData()\n                        #returnthis.mLimitedShops\n                    #\n                    #publicvoidSetLimitedShopData(LimitedShopDatashop)\n                        #this.mLimitedShops=shop\n                    #\n                    #publicEventShopDataGetEventShopData()\n                        #returnthis.mEventShops\n                    #\n                    #publicvoidSetEventShopData(EventShopDatashop)\n                        #this.mEventShops=shop\n                    #\n                    #publicboolCheckUnlockShopType(EShopTypetype)\n                        #UnlockTargetsunlockTargets=type.ToUnlockTargets()\n                        #if(unlockTargets!=(UnlockTargets)0)\n                        #returnthis.CheckUnlock(unlockTargets)\n                        #returnfalse\n                    #\n                    #publicstringGetShopName(EShopTypetype)\n                        #stringkey=string.Empty\n                        #switch(type)\n                            #caseEShopType.Normal:\n                            #key=\"sys.SHOPNAME_NORMAL\"\n                            #break\n                            #caseEShopType.Tabi:\n                            #key=\"sys.SHOPNAME_TABI\"\n                            #break\n                            #caseEShopType.Kimagure:\n                            #key=\"sys.SHOPNAME_KIMAGURE\"\n                            #break\n                            #caseEShopType.Monozuki:\n                            #key=\"sys.SHOPNAME_MONOZUKI\"\n                            #break\n                            #caseEShopType.Tour:\n                            #key=\"sys.SHOPNAME_TOUR\"\n                            #break\n                            #caseEShopType.Arena:\n                            #key=\"sys.SHOPNAME_ARENA\"\n                            #break\n                            #caseEShopType.Multi:\n                            #key=\"sys.SHOPNAME_MULTI\"\n                            #break\n                            #caseEShopType.AwakePiece:\n                            #key=\"sys.SHOPNAME_KAKERA\"\n                            #break\n                            #caseEShopType.Artifact:\n                            #key=\"sys.SHOPNAME_ARTIFACT\"\n                            #break\n                            #caseEShopType.Event:\n                            #key=\"sys.SHOPNAME_EVENT\"\n                            #break\n                            #caseEShopType.Limited:\n                            #key=\"sys.SHOPNAME_LIMITED\"\n                            #break\n                        #if(key==string.Empty)\n                        #returnkey\n                        #returnLocalizedText.Get(key)\n                    #\n                    #publicintGetShopUpdateCost(EShopTypetype,boolgetOldCost=false)\n                        #ShopDatashopData=this.GetShopData(type)\n                        #if(shopData==null)\n                        #return0\n                        #ShopParamshopParam=MonoSingleton<GameManager>.Instance.MasterParam.GetShopParam(type)\n                        #if(shopParam==null||shopParam.UpdateCosts==null||shopParam.UpdateCosts.Length<=0)\n                        #return0\n                        #intupdateCount=shopData.UpdateCount\n                        #if(getOldCost)\n                        #--updateCount\n                        #intindex=Mathf.Clamp(updateCount,0,shopParam.UpdateCosts.Length-1)\n                        #returnshopParam.UpdateCosts\n                    #\n                    #publicintGetShopTypeCostAmount(ESaleTypetype)\n                        #switch(type)\n                            #caseESaleType.Gold:\n                            #returnthis.Gold\n                            #caseESaleType.Coin:\n                            #returnthis.Coin\n                            #caseESaleType.TourCoin:\n                            #returnthis.TourCoin\n                            #caseESaleType.ArenaCoin:\n                            #returnthis.ArenaCoin\n                            #caseESaleType.PiecePoint:\n                            #returnthis.PiecePoint\n                            #caseESaleType.MultiCoin:\n                            #returnthis.MultiCoin\n                            #caseESaleType.EventCoin:\n                            #DebugUtility.Assert(\"Thereisnocommonpriceintheeventcoin.\")\n                            #return0\n                            #caseESaleType.Coin_P:\n                            #returnthis.PaidCoin\n                            #default:\n                            #return0\n                    #\n                    #publicboolCheckShopUpdateCost(EShopTypetype)\n                        #if(this.GetShopData(type)==null)\n                        #returnfalse\n                        #ShopParamshopParam=MonoSingleton<GameManager>.Instance.MasterParam.GetShopParam(type)\n                        #if(shopParam==null)\n                        #returnfalse\n                        #returnthis.GetShopUpdateCost(type,false)<=this.GetShopTypeCostAmount(shopParam.UpdateCostType)\n                    #\n                    #publicvoidDEBUG_BUY_ITEM_UPDATED(EShopTypeshoptype)\n                        #ShopDatashopData=this.GetShopData(shoptype)\n                        #ShopParamshopParam=MonoSingleton<GameManager>.Instance.MasterParam.GetShopParam(shoptype)\n                        #if(shopData==null||shopParam==null||!this.CheckShopUpdateCost(shoptype))\n                        #return\n                        #for(intindex=0index<shopData.items.Count++index)\n                        #shopData.items.is_soldout=false\n                        #intshopUpdateCost=this.GetShopUpdateCost(shoptype,false)\n                        #switch(shopParam.UpdateCostType)\n                            #caseESaleType.Gold:\n                            #this.mGold=(OInt)Math.Max((int)this.mGold-shopUpdateCost,0)\n                            #break\n                            #caseESaleType.Coin:\n                            #this.DEBUG_CONSUME_COIN(shopUpdateCost)\n                            #break\n                            #caseESaleType.TourCoin:\n                            #this.mTourCoin=(OInt)Math.Max((int)this.mTourCoin-shopUpdateCost,0)\n                            #break\n                            #caseESaleType.ArenaCoin:\n                            #this.mArenaCoin=(OInt)Math.Max((int)this.mArenaCoin-shopUpdateCost,0)\n                            #break\n                            #caseESaleType.PiecePoint:\n                            #this.mPiecePoint=(OInt)Math.Max((int)this.mPiecePoint-shopUpdateCost,0)\n                            #break\n                            #caseESaleType.MultiCoin:\n                            #this.mMultiCoin=(OInt)Math.Max((int)this.mMultiCoin-shopUpdateCost,0)\n                            #break\n                            #caseESaleType.EventCoin:\n                            #stringshopCostIname=GlobalVars.EventShopItem.shop_cost_iname\n                            #this.SetEventCoinNum(shopCostIname,Math.Max(this.EventCoinNum(shopCostIname)-shopUpdateCost,0))\n                            #break\n                            #caseESaleType.Coin_P:\n                            #this.DEBUG_CONSUME_PAID_COIN(shopUpdateCost)\n                            #break\n                    #\n                    #publicvoidDEBUG_BUY_ITEM(EShopTypeshoptype,intindex)\n                        #ShopDatashopData=this.GetShopData(shoptype)\n                        #if(shopData==null)\n                        #return\n                        #ShopItemshopItem=shopData.items\n                        #if(shopItem.is_soldout)\n                        #return\n                        #ItemDataitemDataByItemId=this.FindItemDataByItemID(shopItem.iname)\n                        #if(itemDataByItemId!=null&&itemDataByItemId.Num==itemDataByItemId.HaveCap)\n                        #return\n                        #ItemParamitemParam=MonoSingleton<GameManager>.Instance.GetItemParam(shopItem.iname)\n                        #switch(shopItem.saleType)\n                            #caseESaleType.Gold:\n                            #this.mGold=(OInt)Math.Max((int)this.mGold-itemParam.buy*shopItem.num,0)\n                            #break\n                            #caseESaleType.Coin:\n                            #this.DEBUG_CONSUME_COIN(itemParam.coin*shopItem.num)\n                            #break\n                            #caseESaleType.TourCoin:\n                            #this.mTourCoin=(OInt)Math.Max((int)this.mTourCoin-itemParam.tour_coin*shopItem.num,0)\n                            #break\n                            #caseESaleType.ArenaCoin:\n                            #this.mArenaCoin=(OInt)Math.Max((int)this.mArenaCoin-itemParam.arena_coin*shopItem.num,0)\n                            #break\n                            #caseESaleType.PiecePoint:\n                            #this.mPiecePoint=(OInt)Math.Max((int)this.mPiecePoint-itemParam.piece_point*shopItem.num,0)\n                            #break\n                            #caseESaleType.MultiCoin:\n                            #this.mMultiCoin=(OInt)Math.Max((int)this.mMultiCoin-itemParam.multi_coin*shopItem.num,0)\n                            #break\n                            #caseESaleType.EventCoin:\n                            #DebugUtility.Assert(\"Thereisnocommonpriceintheeventcoin.\")\n                            #break\n                            #caseESaleType.Coin_P:\n                            #this.DEBUG_CONSUME_PAID_COIN(itemParam.coin*shopItem.num)\n                            #break\n                        #this.GainItem(shopItem.iname,shopItem.num)\n                        #shopItem.is_soldout=true\n                    #\n                    #publicDateTimeVipExpiredAt\n                        #get\n                            #returnTimeManager.FromUnixTime((long)this.mVipExpiredAt)\n                    #\n                    #publicboolCheckEnableVipCard()\n                        #returnNetwork.GetServerTime()<(long)this.mVipExpiredAt\n                    #\n                    #publicDateTimePremiumExpiredAt\n                        #get\n                            #returnTimeManager.FromUnixTime((long)this.mPremiumExpiredAt)\n                    #\n                    #publicboolCheckEnablePremiumMember()\n                        #returnNetwork.GetServerTime()<(long)this.mPremiumExpiredAt\n                    #\n                    #publicvoidSubAbilityRankUpCount(intvalue)\n                        #this.mAbilityRankUpCount.SubValue(value)\n                    #\n                    #publicvoidRestoreAbilityRankUpCount()\n                        #this.mAbilityRankUpCount.val=this.mAbilityRankUpCount.valMax\n                        #this.mAbilityRankUpCount.at=(OLong)Network.GetServerTime()\n                    #\n                    #publicvoidSubStamina(intvalue)\n                        #this.mStamina.SubValue(value)\n                    #\n                    #publiclongGetNextStaminaRecoverySec()\n                        #returnthis.mStamina.GetNextRecoverySec()\n                    #\n                    #publicvoidUpdateStamina()\n                        #this.mStamina.Update()\n                    #\n                    #publicintGetStaminaRecoveryCost(boolgetOldCost=false)\n                        #FixParamfixParam=MonoSingleton<GameManager>.Instance.MasterParam.FixParam\n                        #intmStaminaBuyNum=(int)this.mStaminaBuyNum\n                        #if(getOldCost)\n                        #--mStaminaBuyNum\n                        #intindex=Math.Max(Math.Min(mStaminaBuyNum,fixParam.StaminaAddCost.Length-1),0)\n                        #return(int)fixParam.StaminaAddCost\n                    #\n                    #publicvoidResetStaminaRecoverCount()\n                        #this.mStaminaBuyNum=(OInt)0\n                    #\n                    #publicvoidResetBuyGoldNum()\n                        #this.mGoldBuyNum=(OInt)0\n                    #\n                    #publicvoidSubCaveStamina(intvalue)\n                        #this.mCaveStamina.SubValue(value)\n                    #\n                    #publiclongGetNextCaveStaminaRecoverySec()\n                        #returnthis.mCaveStamina.GetNextRecoverySec()\n                    #\n                    #publicvoidUpdateCaveStamina()\n                        #this.mCaveStamina.Update()\n                    #\n                    #publicintGetCaveStaminaRecoveryCost()\n                        #FixParamfixParam=MonoSingleton<GameManager>.Instance.MasterParam.FixParam\n                        #intindex=Math.Max(Math.Min(0,fixParam.CaveStaminaAddCost.Length),0)\n                        #return(int)fixParam.CaveStaminaAddCost\n                    #\n                    #publiclongGetNextAbilityRankUpCountRecoverySec()\n                        #returnthis.mAbilityRankUpCount.GetNextRecoverySec()\n                    #\n                    #publicvoidUpdateAbilityRankUpCount()\n                        #this.mAbilityRankUpCount.Update()\n                    #\n                    #publicintArenaResetCount\n                        #get\n                            #returnthis.mArenaResetCount\n                    #\n                    #publicboolChallengeArena()\n                        #if(this.ChallengeArenaNum>=this.ChallengeArenaMax)\n                        #returnfalse\n                        #--this.mChallengeArenaNum\n                        #this.mChallengeArenaTimer.val=(OInt)0\n                        #this.mChallengeArenaTimer.at=(OLong)Network.GetServerTime()\n                        #returntrue\n                    #\n                    #publicboolCheckChangeArena()\n                        #if(this.ChallengeArenaNum>=this.ChallengeArenaMax)\n                        #returnfalse\n                        #return(int)this.mChallengeArenaTimer.val==(int)this.mChallengeArenaTimer.valMax\n                    #\n                    #publiclongGetNextChallengeArenaCoolDownSec()\n                        #returnthis.mChallengeArenaTimer.GetNextRecoverySec()\n                    #\n                    #publicvoidUpdateChallengeArenaTimer()\n                        #this.mChallengeArenaTimer.Update()\n                    #\n                    #publicintGetChallengeArenaCost()\n                        #FixParamfixParam=MonoSingleton<GameManager>.Instance.MasterParam.FixParam\n                        #if(fixParam.ArenaResetTicketCost==null)\n                        #return0\n                        #intindex=Math.Max(Math.Min(this.mArenaResetCount,fixParam.ArenaResetTicketCost.Length-1),0)\n                        #return(int)fixParam.ArenaResetTicketCost\n                    #\n                    #publicvoidInitPlayerPrefs()\n                    #\n                    #publicvoidDEBUG_GAIN_ALL_ITEMS()\n                        #List<ItemParam>items=MonoSingleton<GameManager>.GetInstanceDirect().MasterParam.Items\n                        #for(intindex=0index<items.Count++index)\n                        #this.GainItem(items.iname,10)\n                    #\n                    #publicvoidDEBUG_TRASH_ALL_ITEMS()\n                        #this.Items.Clear()\n                    #\n                    #publicvoidDEBUG_ADD_ARTIFACTS(ArtifactDataartifact)\n                        #if(this.mArtifacts==null)\n                        #this.mArtifacts=newList<ArtifactData>()\n                        #if(artifact==null||this.mArtifacts.Contains(artifact))\n                        #return\n                        #this.AddArtifact(artifact)\n                    #\n                    #publicvoidDEBUG_GAIN_ALL_ARTIFACT()\n                        #List<ArtifactParam>artifacts=MonoSingleton<GameManager>.Instance.MasterParam.Artifacts\n                        #longnum=1\n                        #for(intindex=0index<artifacts.Count++index)\n                            #ArtifactParamartifactParam=artifacts\n                            #if(artifactParam.is_create)\n                                #Json_Artifactjson=newJson_Artifact()\n                                #json.iid=num++\n                                #json.exp=0\n                                #json.iname=artifactParam.iname\n                                #json.rare=artifactParam.rareini\n                                #json.fav=0\n                                #ArtifactDataartifactData=newArtifactData()\n                                #artifactData.Deserialize(json)\n                                #this.AddArtifact(artifactData)\n                    #\n                    #publicvoidDEBUG_TRASH_ALL_ARTIFACT()\n                        #this.mArtifacts.Clear()\n                        #this.mArtifactsNumByRarity.Clear()\n                    #\n                    #publicvoidLoadPlayerPrefs()\n                        #boolflag1=true\n                        #if(EditorPlayerPrefs.HasKey(\"Version\"))\n                        #flag1=PlayerData.PLAYRE_DATA_VERSION!=EditorPlayerPrefs.GetString(\"Version\")\n                        #if(flag1)\n                        #this.InitPlayerPrefs()\n                        #if(EditorPlayerPrefs.HasKey(\"Gold\"))\n                        #this.mGold=(OInt)EditorPlayerPrefs.GetInt(\"Gold\")\n                        #if(EditorPlayerPrefs.HasKey(\"PaidCoin\"))\n                        #this.mPaidCoin=(OInt)EditorPlayerPrefs.GetInt(\"PaidCoin\")\n                        #if(EditorPlayerPrefs.HasKey(\"FreeCoin\"))\n                        #this.mFreeCoin=(OInt)EditorPlayerPrefs.GetInt(\"FreeCoin\")\n                        #if(EditorPlayerPrefs.HasKey(\"ComCoin\"))\n                        #this.mComCoin=(OInt)EditorPlayerPrefs.GetInt(\"ComCoin\")\n                        #if(EditorPlayerPrefs.HasKey(\"TourCoin\"))\n                        #this.mTourCoin=(OInt)EditorPlayerPrefs.GetInt(\"TourCoin\")\n                        #if(EditorPlayerPrefs.HasKey(\"ArenaCoin\"))\n                        #this.mArenaCoin=(OInt)EditorPlayerPrefs.GetInt(\"ArenaCoin\")\n                        #if(EditorPlayerPrefs.HasKey(\"MultiCoin\"))\n                        #this.mMultiCoin=(OInt)EditorPlayerPrefs.GetInt(\"MultiCoin\")\n                        #if(EditorPlayerPrefs.HasKey(\"PiecePoint\"))\n                        #this.mPiecePoint=(OInt)EditorPlayerPrefs.GetInt(\"PiecePoint\")\n                        #if(EditorPlayerPrefs.HasKey(\"PlayerExp\"))\n                        #this.mExp=(OInt)EditorPlayerPrefs.GetInt(\"PlayerExp\")\n                        #if(string.IsNullOrEmpty(this.mCuid))\n                            #this.mCuid=\"1\"\n                            #this.mName=\"GUMI\"\n                            #this.mLv=(OInt)this.CalcLevel()\n                            #this.UpdateUnlocks()\n                        #if(EditorPlayerPrefs.HasKey(\"Stamina\"))\n                        #this.mStamina.val=(OInt)EditorPlayerPrefs.GetInt(\"Stamina\")\n                        #if(EditorPlayerPrefs.HasKey(\"StaminaAt\"))\n                        #this.mStamina.at=(OLong)Convert.ToInt64(EditorPlayerPrefs.GetString(\"StaminaAt\"))\n                        #if(EditorPlayerPrefs.HasKey(\"CaveStamina\"))\n                        #this.mCaveStamina.val=(OInt)EditorPlayerPrefs.GetInt(\"CaveStamina\")\n                        #if(EditorPlayerPrefs.HasKey(\"CaveStaminaAt\"))\n                        #this.mCaveStamina.at=(OLong)Convert.ToInt64(EditorPlayerPrefs.GetString(\"CaveStaminaAt\"))\n                        #if(EditorPlayerPrefs.HasKey(\"AbilRankUpCount\"))\n                        #this.mAbilityRankUpCount.val=(OInt)EditorPlayerPrefs.GetInt(\"AbilRankUpCount\")\n                        #if(EditorPlayerPrefs.HasKey(\"AbilRankUpCountAt\"))\n                        #this.mAbilityRankUpCount.at=(OLong)Convert.ToInt64(EditorPlayerPrefs.GetString(\"AbilRankUpCountAt\"))\n                        #PlayerParamplayerParam=MonoSingleton<GameManager>.Instance.MasterParam.GetPlayerParam((int)this.mLv)\n                        #if(playerParam!=null)\n                            #this.mUnitCap=playerParam.ucap\n                            #this.mStamina.valMax=playerParam.pt\n                        #FixParamfixParam=MonoSingleton<GameManager>.Instance.MasterParam.FixParam\n                        #this.mStamina.valRecover=fixParam.StaminaRecoveryVal\n                        #this.mStamina.interval=fixParam.StaminaRecoverySec\n                        #this.mCaveStamina.valMax=fixParam.CaveStaminaMax\n                        #this.mCaveStamina.valRecover=fixParam.CaveStaminaRecoveryVal\n                        #this.mCaveStamina.interval=fixParam.CaveStaminaRecoverySec\n                        #this.mAbilityRankUpCount.valMax=fixParam.AbilityRankUpCountMax\n                        #this.mAbilityRankUpCount.valRecover=fixParam.AbilityRankUpCountRecoveryVal\n                        #this.mAbilityRankUpCount.interval=fixParam.AbilityRankUpCountRecoverySec\n                        #if(EditorPlayerPrefs.HasKey(\"ARTI_NUM\"))\n                            #intnum=EditorPlayerPrefs.GetInt(\"ARTI_NUM\")\n                            #for(intindex=0index<num++index)\n                                #stringsrc=EditorPlayerPrefs.GetString(\"ARTI_\"+(object)index)\n                                #if(!string.IsNullOrEmpty(src))\n                                    #Json_ArtifactjsonObject=JSONParser.parseJSONObject<Json_Artifact>(src)\n                                    #if(jsonObject!=null)\n                                        #ArtifactDataartifactData=newArtifactData()\n                                        #artifactData.Deserialize(jsonObject)\n                                        #this.AddArtifact(artifactData)\n                        #if(this.mUnits==null)\n                        #this.mUnits=newList<UnitData>((int)this.mUnitCap)\n                        #this.mUnits.Clear()\n                        #this.mUniqueID2UnitData.Clear()\n                        #List<Json_Ability>jsonAbilityList1=newList<Json_Ability>(5)\n                        #intnum1=EditorPlayerPrefs.GetInt(\"UnitNum\")\n                        #for(intindex1=0index1<num1++index1)\n                            #UnitDataunitData=newUnitData()\n                            #if(unitData!=null)\n                                #jsonAbilityList1.Clear()\n                                #stringstr1=\"Unit\"+(object)index1+\"_\"\n                                #Json_Unitjson1=newJson_Unit()\n                                #json1.iname=EditorPlayerPrefs.GetString(str1+\"Iname\")\n                                #json1.iid=(long)EditorPlayerPrefs.GetInt(str1+\"Iid\")\n                                #json1.exp=EditorPlayerPrefs.GetInt(str1+\"Exp\")\n                                #json1.plus=EditorPlayerPrefs.GetInt(str1+\"Plus\")\n                                #json1.rare=EditorPlayerPrefs.GetInt(str1+\"Rarity\")\n                                #List<Json_Job>jsonJobList=newList<Json_Job>(6)\n                                #for(intindex2=0index2<6++index2)\n                                    #stringstr2=str1+\"Job\"+(object)index2+\"_\"\n                                    #if(EditorPlayerPrefs.HasKey(str2+\"Iname\")&&!string.IsNullOrEmpty(EditorPlayerPrefs.GetString(str2+\"Iname\")))\n                                        #Json_JobjsonJob=newJson_Job()\n                                        #jsonJob.iname=EditorPlayerPrefs.GetString(str2+\"Iname\")\n                                        #jsonJob.iid=(long)EditorPlayerPrefs.GetInt(str2+\"Iid\")\n                                        #jsonJob.rank=EditorPlayerPrefs.GetInt(str2+\"Rank\")\n                                        #jsonJob.equips=newJson_Equip[6]\n                                        #for(intindex3=0index3<jsonJob.equips.Length++index3)\n                                            #stringstr3=str2+\"Equip\"+(object)index3+\"_\"\n                                            #if(EditorPlayerPrefs.HasKey(str3+\"Iname\"))\n                                                #jsonJob.equips[index3]=newJson_Equip()\n                                                #jsonJob.equips[index3].iname=EditorPlayerPrefs.GetString(str3+\"Iname\")\n                                                #jsonJob.equips[index3].iid=(long)EditorPlayerPrefs.GetInt(str3+\"Iid\")\n                                                #jsonJob.equips[index3].exp=EditorPlayerPrefs.GetInt(str3+\"Exp\")\n                                            #else\n                                            #jsonJob.equips[index3]=(Json_Equip)null\n                                        #List<Json_Ability>jsonAbilityList2=newList<Json_Ability>(8)\n                                        #for(intindex3=0index3<8++index3)\n                                            #stringstr3=str2+\"Ability\"+(object)index3+\"_\"\n                                            #if(EditorPlayerPrefs.HasKey(str3+\"Iname\")&&!string.IsNullOrEmpty(EditorPlayerPrefs.GetString(str3+\"Iname\")))\n                                                #Json_AbilityjsonAbility=newJson_Ability()\n                                                #jsonAbility.iname=EditorPlayerPrefs.GetString(str3+\"Iname\")\n                                                #jsonAbility.iid=(long)EditorPlayerPrefs.GetInt(str3+\"Iid\")\n                                                #jsonAbility.exp=EditorPlayerPrefs.GetInt(str3+\"Exp\")\n                                                #boolflag2=false\n                                                #for(intindex4=0index4<jsonAbilityList2.Count++index4)\n                                                    #if(jsonAbilityList2[index4].iname==jsonAbility.iname)\n                                                    #flag2=true\n                                                #if(!flag2)\n                                                #jsonAbilityList2.Add(jsonAbility)\n                                        #jsonJob.abils=jsonAbilityList2.Count<=0?(Json_Ability)null:jsonAbilityList2.ToArray()\n                                        #jsonJob.select=newJson_JobSelectable()\n                                        #jsonJob.select.abils=newlong[5]\n                                        #Array.Clear((Array)jsonJob.select.abils,0,jsonJob.select.abils.Length)\n                                        #for(intindex3=0index3<jsonJob.select.abils.Length++index3)\n                                            #stringkey=str2+\"Select_Ability\"+(object)index3\n                                            #if(EditorPlayerPrefs.HasKey(key))\n                                            #jsonJob.select.abils[index3]=(long)EditorPlayerPrefs.GetInt(key)\n                                        #jsonJobList.Add(jsonJob)\n                                #json1.jobs=jsonJobList.ToArray()\n                                #json1.select=newJson_UnitSelectable()\n                                #json1.select.job=(long)EditorPlayerPrefs.GetInt(str1+\"Select_Job\")\n                                #try\n                                    #unitData.Deserialize(json1)\n                                    #for(intjob_index=0job_index<unitData.Jobs.Length++job_index)\n                                        #for(intslot=0slot<unitData.Jobs[job_index].Artifacts.Length++slot)\n                                            #stringkey=str1+\"Job\"+(object)job_index+\"_\"+\"Artifact\"+(object)slot+\"_Iid\"\n                                            #if(EditorPlayerPrefs.HasKey(key))\n                                                #longiid=(long)EditorPlayerPrefs.GetInt(key)\n                                                #ArtifactDataartifactData=MonoSingleton<GameManager>.Instance.Player.Artifacts.Find((Predicate<ArtifactData>)(adl=>(long)adl.UniqueID==iid))\n                                                #if(artifactData!=null)\n                                                    #Json_Artifactjson2=newJson_Artifact()\n                                                    #json2.iid=(long)artifactData.UniqueID\n                                                    #json2.iname=artifactData.ArtifactParam.iname\n                                                    #json2.rare=artifactData.ArtifactParam.raremax\n                                                    #RarityParamrarityParam=MonoSingleton<GameManager>.Instance.MasterParam.GetRarityParam(artifactData.ArtifactParam.raremax)\n                                                    #json2.exp=ArtifactData.StaticCalcExpFromLevel((int)rarityParam.ArtifactLvCap)\n                                                    #ArtifactDataartifact=newArtifactData()\n                                                    #artifact.Reset()\n                                                    #artifact.Deserialize(json2)\n                                                    #unitData.SetEquipArtifactData(job_index,slot,artifact,true)\n                                    #this.mUnits.Add(unitData)\n                                    #this.mUniqueID2UnitData[unitData.UniqueID]=unitData\n                                #catch(Exceptionex)\n                                    #DebugUtility.LogException(ex)\n                        #for(intindex1=0index1<12++index1)\n                            #Json_Partyjson=newJson_Party()\n                            #PartyDatapartyData=newPartyData((PlayerPartyTypes)index1)\n                            #json.units=newlong[partyData.MAX_UNIT]\n                            #for(intindex2=0index2<json.units.Length++index2)\n                            #json.units[index2]=(long)EditorPlayerPrefs.GetInt(\"Hensei\"+(object)index1+\"_UNIT\"+(object)index2+\"_ID\")\n                            #this.mPartys[index1].Deserialize(json)\n                        #Debug.Log((object)\"LoadPlayerPrefsItems\")\n                        #intcapacity=EditorPlayerPrefs.GetInt(\"ItemNum\")\n                        #if(this.mItems==null)\n                        #this.mItems=newList<ItemData>(capacity)\n                        #this.mItems.Clear()\n                        #this.mID2ItemData.Clear()\n                        #for(intindex=0index<capacity++index)\n                            #stringstr=\"Item\"+(object)index+\"_\"\n                            #Json_Itemjson=newJson_Item()\n                            #json.iname=EditorPlayerPrefs.GetString(str+\"Iname\")\n                            #json.iid=(long)EditorPlayerPrefs.GetInt(str+\"Iid\")\n                            #json.num=EditorPlayerPrefs.GetInt(str+\"Num\")\n                            #if(MonoSingleton<GameManager>.Instance.GetItemParam(json.iname)==null)\n                                #DebugUtility.Log(\"存在しないアイテム[\"+json.iname+\"]が指定された\")\n                            #else\n                                #ItemDataitemData=newItemData()\n                                #itemData.Deserialize(json)\n                                #this.mItems.Add(itemData)\n                                #this.mID2ItemData[json.iname]=itemData\n                    #\n                    #[DebuggerHidden]\n                    #publicIEnumeratorSavePlayerPrefsAsync()\n                        #//ISSUE:objectofacompiler-generatedtypeiscreated\n                        #return(IEnumerator)newPlayerData.\\u003CSavePlayerPrefsAsync\\u003Ec__Iterator0(){\\u0024this=this}\n                    #\n                    #privatevoidInternalSavePlayerPrefsParty()\n                        #for(intindex1=0index1<this.mPartys.Count++index1)\n                            #for(intindex2=0index2<this.mPartys[index1].MAX_UNIT++index2)\n                                #EditorPlayerPrefs.SetInt(\"Hensei\"+(object)index1+\"_UNIT\"+(object)index2+\"_ID\",(int)this.mPartys[index1].GetUnitUniqueID(index2))\n                                #EditorPlayerPrefs.SetInt(\"Hensei\"+(object)index1+\"_UNIT\"+(object)index2+\"_LEADER\",this.mPartys[index1].LeaderIndex!=index2?0:1)\n                    #\n                    #publicvoidSavePlayerPrefsParty()\n                        #this.InternalSavePlayerPrefsParty()\n                        #EditorPlayerPrefs.Flush()\n                    #\n                    #publicvoidSavePlayerPrefs()\n                        #IEnumeratorenumerator=this.SavePlayerPrefsAsync()\n                        #do\n                        #\n                        #while(enumerator.MoveNext())\n                    #\n                    #publiclongGenerateUnitUniqueID()\n                        #longnum=0\n                        #for(intindex=0index<this.mUnits.Count++index)\n                            #if(this.mUnits.UniqueID>num)\n                            #num=this.mUnits.UniqueID\n                        #returnnum+1L\n                    #\n                    #publicvoidClearTrophies()\n                        #this.mTrophyStates=newList<TrophyState>()\n                        #this.mTrophyStatesInameDict=newDictionary<string,List<TrophyState>>()\n                    #\n                    #publicvoidDeleteTrophies(JSON_TrophyProgresstrophies)\n                        #if(trophies==null)\n                        #return\n                        #if(this.mTrophyStates!=null)\n                            #for(inti=0i<trophies.Length++i)\n                            #this.mTrophyStates.RemoveAll((Predicate<TrophyState>)(state=>state.iname==trophies[i].iname))\n                        #if(this.mTrophyStatesInameDict==null)\n                        #return\n                        #for(intindex=0index<trophies.Length++index)\n                            #if(this.mTrophyStatesInameDict.ContainsKey(trophies.iname))\n                            #this.mTrophyStatesInameDict.Remove(trophies.iname)\n                    #\n                    #publicboolIsTrophyDirty()\n                        #for(intindex=this.mTrophyStates.Count-1index>=0--index)\n                            #if(this.mTrophyStates.IsDirty)\n                            #returntrue\n                        #returnfalse\n                    #\n                    #privatevoidUpdateTrophyState(TrophyStatest,intcurrentYMD)\n                        #if(!st.Param.IsDaily)\n                        #return\n                        #intstartYmd=st.StartYMD\n                        #intnum=Math.Abs(currentYMD.FromYMD().Subtract(startYmd.FromYMD()).Days)\n                        #if(st.IsEnded)\n                            #if(num<1)\n                            #return\n                            #this.ClearTrophyCounter(st)\n                        #elseif(!st.IsCompleted)\n                            #if(num<1)\n                            #return\n                            #this.ClearTrophyCounter(st)\n                        #elseif(num>=2)\n                            #this.ClearTrophyCounter(st)\n                        #else\n                            #if(num<1)\n                            #return\n                            #for(intindex=0index<st.Param.Objectives.Length++index)\n                                #if(st.Param.Objectives.type==TrophyConditionTypes.stamina)\n                                    #this.ClearTrophyCounter(st)\n                                    #break\n                    #\n                    #publicTrophyParamGetCompletedTrophies()\n                        #List<TrophyParam>trophyParamList=newList<TrophyParam>(this.mTrophyStates.Count)\n                        #for(intindex=this.mTrophyStates.Count-1index>=0--index)\n                            #TrophyStatemTrophyState=this.mTrophyStates\n                            #if(!mTrophyState.IsEnded&&mTrophyState.IsCompleted)\n                            #trophyParamList.Add(mTrophyState.Param)\n                        #returntrophyParamList.ToArray()\n                    #\n                    #publicvoidMarkTrophiesEnded(TrophyParamtrophies)\n                        #for(intindex=0index<trophies.Length++index)\n                            #TrophyStatetrophyCounter=this.GetTrophyCounter(trophies,true)\n                            #trophyCounter.IsEnded=true\n                            #trophyCounter.IsDirty=true\n                            #trophyCounter.RewardedAt=TimeManager.ServerTime\n                    #\n                    #privatevoidClearTrophyCounter(TrophyState_st)\n                        #if(this.mTrophyStates.Contains(_st))\n                        #this.mTrophyStates.Remove(_st)\n                        #if(!this.mTrophyStatesInameDict.ContainsKey(_st.iname))\n                        #return\n                        #this.mTrophyStatesInameDict[_st.iname].Remove(_st)\n                        #if(this.mTrophyStatesInameDict[_st.iname].Count>0)\n                        #return\n                        #this.mTrophyStatesInameDict.Remove(_st.iname)\n                    #\n                    #publicTrophyStateTrophyStates\n                        #get\n                            #returnthis.mTrophyStates.ToArray()\n                    #\n                    #publicIList<TrophyState>TrophyStatesList\n                        #get\n                            #return(IList<TrophyState>)this.mTrophyStates\n                    #\n                    #publicvoidUpdateTrophyStates()\n                        #intymd=TimeManager.ServerTime.ToYMD()\n                        #TrophyStatearray=this.mTrophyStates.ToArray()\n                        #for(intindex=0index<array.Length++index)\n                            #if(array!=null)\n                            #this.UpdateTrophyState(array,ymd)\n                    #\n                    #publicvoidOverwiteTrophyProgress(JSON_TrophyProgresstrophyProgressList)\n                        #if(trophyProgressList==null)\n                        #return\n                        #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                        #for(intindex=0index<trophyProgressList.Length++index)\n                            #JSON_TrophyProgresstrophyProgress=trophyProgressList\n                            #if(trophyProgress!=null)\n                                #TrophyParamtrophy=instance.MasterParam.GetTrophy(trophyProgress.iname)\n                                #if(trophy==null)\n                                    #DebugUtility.LogWarning(\"存在しないミッション:\"+trophyProgress.iname)\n                                #else\n                                    #TrophyStatetrophyCounter=this.GetTrophyCounter(trophy,false)\n                                    #boolflag=trophyCounter.IsEnded||trophyCounter.IsCompleted\n                                    #trophyCounter.Setup(trophy,trophyProgress)\n                                    #if(!flag&&trophyCounter.IsCompleted)\n                                    #NotifyList.PushTrophy(trophy)\n                    #\n                    #publicTrophyStateRegistTrophyStateDictByProg(TrophyParam_trophy,JSON_TrophyProgress_prog)\n                        #TrophyStatetrophyState=this.CreateTrophyState(_trophy)\n                        #trophyState.Setup(_trophy,_prog)\n                        #this.AddTrophyStateDict(trophyState)\n                        #returntrophyState\n                    #\n                    #publicvoidRegistTrophyStateDictByProgExtra(JSON_TrophyProgress_prog)\n                        #if(_prog==null||_prog.Length<=0)\n                        #return\n                        #for(intindex=0index<_prog.Length++index)\n                        #MonoSingleton<GameManager>.Instance.Player.RegistTrophyStateDictByProgExtra(MonoSingleton<GameManager>.Instance.MasterParam.GetTrophy(_prog.iname),_prog)\n                    #\n                    #publicvoidRegistTrophyStateDictByProgExtra(TrophyParam_trophy,JSON_TrophyProgress_prog)\n                        #if(!this.mTrophyStatesInameDict.ContainsKey(_trophy.iname))\n                        #this.AddTrophyStateDict(this.CreateTrophyState(_trophy))\n                        #TrophyStatetrophyState=this.mTrophyStatesInameDict[_trophy.iname].Find((Predicate<TrophyState>)(x=>x.iname==_trophy.iname))\n                        #if(trophyState==null||trophyState.IsCompleted)\n                        #return\n                        #for(intindex=0index<_trophy.Objectives.Length&&index<_prog.pts.Length&&index<trophyState.Count.Length++index)\n                        #trophyState.Count=Math.Min(_prog.pts,_trophy.Objectives.ival)\n                        #if(trophyState.IsCompleted&&trophyState.Param.DispType==TrophyDispType.Award)\n                        #NotifyList.PushAward(trophyState.Param)\n                        #trophyState.StartYMD=_prog.ymd\n                        #trophyState.IsEnded=_prog.rewarded_at!=0\n                        #trophyState.IsDirty=true\n                    #\n                    #publicvoidCreateInheritingExtraTrophy(Dictionary<int,List<JSON_TrophyProgress>>progs)\n                        #TrophyParamtrophies=MonoSingleton<GameManager>.Instance.MasterParam.Trophies\n                        #for(intindex1=0index1<trophies.Length++index1)\n                            #TrophyParamparam=trophies[index1]\n                            #if(trophies[index1].Objectives[0].type.IsExtraClear())\n                                #inttype=(int)trophies[index1].Objectives[0].type\n                                #if(progs.ContainsKey(type))\n                                    #List<JSON_TrophyProgress>prog=progs[type]\n                                    #if(prog.Find((Predicate<JSON_TrophyProgress>)(x=>x.iname==param.iname))==null)\n                                        #intnum=0\n                                        #for(intindex2=0index2<prog.Count++index2)\n                                            #if(num<prog[index2].pts[0])\n                                            #num=prog[index2].pts[0]\n                                        #TrophyStatetrophyState=this.CreateTrophyState(param)\n                                        #this.SetTrophyCounter(trophyState.Param,0,num)\n                                        #this.AddTrophyStateDict(trophyState)\n                    #\n                    #publicTrophyStateGetTrophyCounter(TrophyParamtrophy,booldaily_old_data=false)\n                        #List<TrophyState>trophyStateList\n                        #if(this.mTrophyStatesInameDict.TryGetValue(trophy.iname,outtrophyStateList))\n                            #if(!trophy.IsDaily||daily_old_data)\n                            #returntrophyStateList[0]\n                            #for(intindex=0index<trophyStateList.Count++index)\n                                #if(trophyStateList.StartYMD==TimeManager.ServerTime.ToYMD())\n                                #returntrophyStateList\n                        #TrophyStatetrophyState=this.CreateTrophyState(trophy)\n                        #this.AddTrophyStateDict(trophyState)\n                        #returntrophyState\n                    #\n                    #privateTrophyStateCreateTrophyState(TrophyParam_trophy)\n                        #returnnewTrophyState(){iname=_trophy.iname,StartYMD=TimeManager.ServerTime.ToYMD(),Count=newint[_trophy.Objectives.Length],IsDirty=false,Param=_trophy}\n                    #\n                    #privatevoidAddTrophyStateDict(TrophyState_state)\n                        #this.mTrophyStates.Add(_state)\n                        #if(!this.mTrophyStatesInameDict.ContainsKey(_state.iname))\n                        #this.mTrophyStatesInameDict.Add(_state.iname,newList<TrophyState>())\n                        #this.mTrophyStatesInameDict[_state.iname].Add(_state)\n                        #this.mTrophyStatesInameDict[_state.iname].Sort((Comparison<TrophyState>)((a,b)=>a.StartYMD-b.StartYMD))\n                    #\n                    #privateboolIsMakeTrophyPlate(TrophyParamtrophy,TrophyStatest,boolis_achievement)\n                        #return!trophy.IsInvisibleVip()&&!trophy.IsInvisibleCard()&&!trophy.IsInvisibleStamina()&&((trophy.RequiredTrophies==null||TrophyParam.CheckRequiredTrophies(MonoSingleton<GameManager>.Instance,trophy,true,true))&&trophy.IsAvailablePeriod(TimeManager.ServerTime,is_achievement))\n                    #\n                    #publicvoidDailyAllCompleteCheck()\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.dailyall)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(this.IsDailyAllComplete())\n                            #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicboolIsDailyAllComplete()\n                        #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                        #TrophyParamtrophies=instance.Trophies\n                        #PlayerDataplayer=instance.Player\n                        #if(trophies==null||trophies.Length<=0)\n                        #returntrue\n                        #TrophyStatetrophyStateArray=newTrophyState[trophies.Length]\n                        #for(intindex=0index<trophies.Length++index)\n                        #trophyStateArray=!trophies.IsChallengeMission?player.GetTrophyCounter(trophies,false):(TrophyState)null\n                        #for(intindex1=0index1<trophies.Length++index1)\n                            #TrophyStatest=trophyStateArray[index1]\n                            #if(st!=null&&!st.IsCompleted)\n                                #TrophyParamtrophy=trophies[index1]\n                                #boolflag=false\n                                #for(intindex2=0index2<trophy.Objectives.Length++index2)\n                                    #if(trophy.Objectives[index2].type==TrophyConditionTypes.dailyall)\n                                        #flag=true\n                                        #break\n                                #if(!flag&&trophy.DispType!=TrophyDispType.Award&&(trophy.DispType!=TrophyDispType.Hide&&trophy.IsDaily)&&this.IsMakeTrophyPlate(trophy,st,false))\n                                #returnfalse\n                        #returntrue\n                    #\n                    #privateboolCheckTrophyCount(TrophyParamtrophyParam,intcountIndex,intvalue,refTrophyStatestate)\n                        #if(countIndex<0||value<=0||(trophyParam==null||!trophyParam.IsAvailablePeriod(this.GetMissionClearAt(),false))||trophyParam.RequiredTrophies!=null&&!TrophyParam.CheckRequiredTrophies(MonoSingleton<GameManager>.Instance,trophyParam,trophyParam.IsChallengeMission,true))\n                        #returnfalse\n                        #state=this.GetTrophyCounter(trophyParam,false)\n                        #if(state.IsEnded)\n                        #returnfalse\n                        #if(state.Count.Length<=countIndex)\n                        #Array.Resize<int>(refstate.Count,countIndex+1)\n                        #return!state.IsCompleted\n                    #\n                    #privateboolCheckDailyMissionDayChange(TrophyStatestate,intcountIndex)\n                        #intymd=this.GetMissionClearAt().ToYMD()\n                        #return!state.Param.IsDaily||ymd<=state.StartYMD||state.IsCompleted\n                    #\n                    #publicvoidAddTrophyCounter(TrophyObjectiveobj,intvalue)\n                        #this.AddTrophyCounter(obj.Param,obj.index,value)\n                    #\n                    #publicvoidAddTrophyCounter(TrophyParamtrophyParam,intcountIndex,intvalue)\n                        #if(!this.AddTrophyCounterExec(trophyParam,countIndex,value))\n                        #return\n                        #this.DailyAllCompleteCheck()\n                    #\n                    #privateboolAddTrophyCounterExec(TrophyParamtrophyParam,intcountIndex,intvalue)\n                        #TrophyStatestate=(TrophyState)null\n                        #if(!this.CheckTrophyCount(trophyParam,countIndex,value,refstate))\n                        #returnfalse\n                        #intnum=state.Count[countIndex]\n                        #state.Count[countIndex]+=value\n                        #if(!this.CheckDailyMissionDayChange(state,countIndex))\n                            #state.Count[countIndex]=num\n                            #returnfalse\n                        #state.IsDirty=true\n                        #MonoSingleton<GameManager>.Instance.update_trophy_interval.SetSyncNow()\n                        #returnstate.IsCompleted\n                    #\n                    #publicvoidSetTrophyCounter(TrophyObjectiveobj,intvalue)\n                        #this.SetTrophyCounter(obj.Param,obj.index,value)\n                    #\n                    #privatevoidSetTrophyCounter(TrophyParamtrophyParam,intcountIndex,intvalue)\n                        #if(!this.SetTrophyCounterExec(trophyParam,countIndex,value))\n                        #return\n                        #this.DailyAllCompleteCheck()\n                    #\n                    #privateboolSetTrophyCounterExec(TrophyParamtrophyParam,intcountIndex,intvalue)\n                        #TrophyStatestate=(TrophyState)null\n                        #if(!this.CheckTrophyCount(trophyParam,countIndex,value,refstate)||state.Count[countIndex]==value)\n                        #returnfalse\n                        #intnum=state.Count[countIndex]\n                        #state.Count[countIndex]=value\n                        #if(!this.CheckDailyMissionDayChange(state,countIndex))\n                            #state.Count[countIndex]=num\n                            #returnfalse\n                        #state.IsDirty=true\n                        #MonoSingleton<GameManager>.Instance.update_trophy_interval.SetSyncNow()\n                        #returnstate.IsCompleted\n                    #\n                    #publicvoidOnQuestStart(stringquestID)\n                        #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(questID)\n                        #if(quest==null||quest.type==QuestTypes.Tutorial)\n                        #return\n                        #if(quest.type==QuestTypes.Arena)\n                            #TrophyParamtrophies=MonoSingleton<GameManager>.Instance.Trophies\n                            #for(intindex=trophies.Length-1index>=0--index)\n                                #TrophyParamtrophyParam=trophies\n                                #for(intcountIndex=trophyParam.Objectives.Length-1countIndex>=0--countIndex)\n                                    #if(trophyParam.Objectives[countIndex].type==TrophyConditionTypes.arena)\n                                    #this.AddTrophyCounter(trophyParam,countIndex,1)\n                        #if(quest.IsMulti&&GlobalVars.ResumeMultiplayPlayerID==0)\n                            #TrophyParamtrophies=MonoSingleton<GameManager>.Instance.Trophies\n                            #for(intindex=trophies.Length-1index>=0--index)\n                                #TrophyParamtrophyParam=trophies\n                                #for(intcountIndex=trophyParam.Objectives.Length-1countIndex>=0--countIndex)\n                                    #if(trophyParam.Objectives[countIndex].type==TrophyConditionTypes.multiplay)\n                                    #this.AddTrophyCounter(trophyParam,countIndex,1)\n                        #if(!quest.IsMultiTower||GlobalVars.ResumeMultiplayPlayerID!=0)\n                        #return\n                        #TrophyParamtrophies1=MonoSingleton<GameManager>.Instance.Trophies\n                        #for(intindex=trophies1.Length-1index>=0--index)\n                            #TrophyParamtrophyParam=trophies1\n                            #for(intcountIndex=trophyParam.Objectives.Length-1countIndex>=0--countIndex)\n                                #if(trophyParam.Objectives[countIndex].type==TrophyConditionTypes.multitower)\n                                #this.AddTrophyCounter(trophyParam,countIndex,1)\n                    #\n                    #publicvoidOnQuestWin(stringquestID,BattleCore.RecordbattleRecord=null)\n                        #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(questID)\n                        #if(quest==null||quest.type==QuestTypes.Tutorial)\n                        #return\n                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winquest)\n                        #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType1\n                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base))\n                                #if(!trophyObjective.sval.Contains(questID))\n                                #continue\n                            #elseif(quest.type==QuestTypes.Event||quest.type==QuestTypes.Beginner||(quest.type==QuestTypes.Arena||quest.IsMulti)||(quest.type==QuestTypes.Character||quest.difficulty!=QuestDifficulties.Normal||(quest.type==QuestTypes.Tower||quest.IsVersus))||(quest.type==QuestTypes.Ordeal||quest.type==QuestTypes.RankMatch||quest.type==QuestTypes.Raid))\n                            #continue\n                            #this.AddTrophyCounter(trophyObjective,1)\n                        #if(battleRecord!=null&&quest.bonusObjective!=null)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.complete_all_quest_mission)\n                            #for(intindex1=trophiesOfType2.Length-1index1>=0--index1)\n                                #if(!(trophiesOfType2[index1].sval_base!=questID))\n                                    #intnum=0\n                                    #for(intindex2=0index2<quest.bonusObjective.Length++index2)\n                                        #if((battleRecord.allBonusFlags&1<<index2)!=0)\n                                        #++num\n                                    #if(num>=quest.bonusObjective.Length)\n                                    #this.AddTrophyCounter(trophiesOfType2[index1],1)\n                        #if(battleRecord!=null&&quest.bonusObjective!=null)\n                            #intnum=0\n                            #for(intindex=0index<quest.bonusObjective.Length++index)\n                                #if((battleRecord.allBonusFlags&1<<index)!=0||quest.IsMissionClear(index))\n                                #++num\n                            #if(num>=quest.bonusObjective.Length)\n                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.complete_all_quest_mission_total)\n                                #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                    #if(!(trophiesOfType2.sval_base!=questID))\n                                    #this.AddTrophyCounter(trophiesOfType2,1)\n                                #if(!quest.IsMissionCompleteALL())\n                                    #if(!string.IsNullOrEmpty(FlowNode_Variable.Get(\"COMPLETE_QUEST_MISSION\")))\n                                    #MonoSingleton<GameManager>.Instance.Player.UpdateCompleteAllQuestCountTrophy2(quest)\n                                    #else\n                                    #MonoSingleton<GameManager>.Instance.Player.UpdateCompleteAllQuestCountTrophy(quest)\n                        #if(quest.difficulty==QuestDifficulties.Extra)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winstory_extra)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType2,1)\n                        #if(quest.difficulty==QuestDifficulties.Elite)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winelite)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType2,1)\n                        #if(quest.type==QuestTypes.Arena)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winarena)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType2,1)\n                        #if(quest.type==QuestTypes.Event||quest.type==QuestTypes.Tower)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winevent)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType2,1)\n                        #SupportDatasupportData=(SupportData)GlobalVars.SelectedSupport\n                        #if(quest.type==QuestTypes.Ordeal)\n                            #supportData=(SupportData)null\n                            #if(GlobalVars.OrdealSupports!=null)\n                                #foreach(SupportDataordealSupportinGlobalVars.OrdealSupports)\n                                    #if(ordealSupport!=null)\n                                        #supportData=ordealSupport\n                                        #break\n                        #if(supportData!=null)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winquestsoldier)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType2,1)\n                        #if(quest.IsMulti)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winmulti)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType2\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                            #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winmultimore)\n                            #for(intindex=trophiesOfType3.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType3\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                    #List<JSON_MyPhotonPlayerParam>myPlayersStarted=PunMonoSingleton<MyPhoton>.Instance.GetMyPlayersStarted()\n                                    #if(myPlayersStarted!=null&&myPlayersStarted.Count>=trophyObjective.ival)\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                            #TrophyObjectivetrophiesOfType4=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winmultiless)\n                            #for(intindex=trophiesOfType4.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType4\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                    #List<JSON_MyPhotonPlayerParam>myPlayersStarted=PunMonoSingleton<MyPhoton>.Instance.GetMyPlayersStarted()\n                                    #if(myPlayersStarted!=null&&myPlayersStarted.Count<=trophyObjective.ival)\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                        #if(quest.type==QuestTypes.Tower)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.wintower)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType2\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                            #TowerFloorParamtowerFloor=MonoSingleton<GameManager>.Instance.FindTowerFloor(questID)\n                            #if(towerFloor!=null)\n                                #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.tower)\n                                #for(intindex=trophiesOfType3.Length-1index>=0--index)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType3\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==towerFloor.tower_id)\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                        #if(quest.IsVersus)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.vswin)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType2\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                            #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.vs)\n                            #for(intindex=trophiesOfType3.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType3\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #if(quest.type!=QuestTypes.Ordeal)\n                        #return\n                        #TrophyObjectivetrophiesOfType5=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.clear_ordeal)\n                        #for(intindex=trophiesOfType5.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType5\n                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base))\n                                #if(trophyObjective.sval_base==quest.iname)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                            #else\n                            #DebugUtility.LogError(\"レコードミッション「\"+trophyObjective.Param.Name+\"」はクエストが指定されていません。\")\n                    #\n                    #publicvoidOnQuestLose(stringquestID)\n                        #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(questID)\n                        #if(questID==null||quest.type==QuestTypes.Tutorial)\n                        #return\n                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.losequest)\n                        #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType1\n                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base))\n                                #if(!trophyObjective.sval.Contains(questID))\n                                #continue\n                            #elseif(quest.type==QuestTypes.Event||quest.type==QuestTypes.Beginner||(quest.type==QuestTypes.Arena||quest.IsMulti)||(quest.type==QuestTypes.Character||quest.difficulty!=QuestDifficulties.Normal||(quest.type==QuestTypes.Tower||quest.IsVersus))||(quest.type==QuestTypes.Ordeal||quest.type==QuestTypes.RankMatch))\n                            #continue\n                            #this.AddTrophyCounter(trophyObjective,1)\n                        #if(quest.difficulty==QuestDifficulties.Elite)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.loseelite)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType2,1)\n                        #if(quest.type==QuestTypes.Arena)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.losearena)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType2,1)\n                        #if(quest.type==QuestTypes.Event||quest.type==QuestTypes.Tower)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.loseevent)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType2,1)\n                        #if(quest.type==QuestTypes.Tower)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.losetower)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType2\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                            #TowerFloorParamtowerFloor=MonoSingleton<GameManager>.Instance.FindTowerFloor(questID)\n                            #if(towerFloor!=null)\n                                #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.tower)\n                                #for(intindex=trophiesOfType3.Length-1index>=0--index)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType3\n                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==towerFloor.tower_id)\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                        #if(!quest.IsVersus)\n                        #return\n                        #TrophyObjectivetrophiesOfType4=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.vslose)\n                        #for(intindex=trophiesOfType4.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType4\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                            #this.AddTrophyCounter(trophyObjective,1)\n                        #TrophyObjectivetrophiesOfType5=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.vs)\n                        #for(intindex=trophiesOfType5.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType5\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)\n                            #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidOnGoldChange(intdelta)\n                        #if(delta==0)\n                        #return\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.has_gold_over)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #if(this.Gold>=trophiesOfType.ival)\n                            #this.AddTrophyCounter(trophiesOfType,1)\n                    #\n                    #publicvoidOnCoinChange(intdelta)\n                    #\n                    #publicvoidOnItemQuantityChange(stringitemID,intdelta)\n                        #if(delta<=0)\n                        #return\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.getitem)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(trophyObjective.sval_base==itemID)\n                            #this.AddTrophyCounter(trophyObjective,delta)\n                    #\n                    #publicvoidOnPlayerLevelChange(intdelta)\n                        #if(delta<=0)\n                        #return\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.playerlv)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(trophyObjective.ival<=this.Lv)\n                            #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidOnEnemyKill(stringenemyID,intcount)\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.killenemy)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(trophyObjective.sval_base==enemyID)\n                            #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidOnDamageToEnemy(Unitunit,Unittarget,intdamage)\n                        #if(unit==null||unit.Side!=EUnitSide.Player||(!unit.IsPartyMember||target==null)||(target.Side!=EUnitSide.Enemy||UnityEngine.Object.op_Equality((UnityEngine.Object)SceneBattle.Instance,(UnityEngine.Object)null)||SceneBattle.Instance.IsPlayingArenaQuest)||SceneBattle.Instance.Battle!=null&&SceneBattle.Instance.Battle.IsMultiPlay&&(PunMonoSingleton<MyPhoton>.Instance.MyPlayerIndex<=0||PunMonoSingleton<MyPhoton>.Instance.MyPlayerIndex!=unit.OwnerPlayerIndex))\n                        #return\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.damage_over)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #if(trophiesOfType.ival<=damage)\n                            #this.AddTrophyCounter(trophiesOfType,1)\n                    #\n                    #publicvoidOnAbilityPowerUp(stringunitID,stringabilityID,intlevel,boolverify=false)\n                        #if(!verify)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.ability)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType,1)\n                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeabilitylevel)\n                        #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType1\n                            #if(trophyObjective.ival<=level)\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                                #else\n                                    #charchArray=newchar[1]{','}\n                                    #stringstrArray=trophyObjective.sval_base.Split(chArray)\n                                    #if((string.IsNullOrEmpty(strArray[1])||abilityID==strArray[1])&&(string.IsNullOrEmpty(strArray[0])||unitID==strArray[0]))\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidOnSoubiPowerUp()\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.soubi)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                        #this.AddTrophyCounter(trophiesOfType,1)\n                    #\n                    #publicvoidOnBuyGold()\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.buygold)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                        #this.AddTrophyCounter(trophiesOfType,1)\n                    #\n                    #publicvoidOnFgGIDLogin()\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.fggid)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                        #this.AddTrophyCounter(trophiesOfType,1)\n                    #\n                    #publicvoidOnGacha(GachaTypestype,intcount)\n                        #if(count<=0)\n                        #return\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.gacha)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(trophyObjective.sval_base==\"normal\")\n                                #if(type!=GachaTypes.Normal)\n                                #continue\n                            #elseif(trophyObjective.sval_base==\"rare\")\n                                #if(type!=GachaTypes.Rare)\n                                #continue\n                            #elseif(trophyObjective.sval_base==\"vip\"&&type!=GachaTypes.Vip)\n                            #continue\n                            #this.AddTrophyCounter(trophyObjective,count)\n                    #\n                    #publicvoidOnUnitLevelChange(stringunitID,intdelta,intlevel,boolverify=false)\n                        #if(delta<=0&&!verify)\n                        #return\n                        #if(!verify)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.unitlevel)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(trophyObjective.sval_base==unitID&&trophyObjective.ival<=level)\n                                #this.AddTrophyCounter(trophyObjective,delta)\n                        #if(!verify)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.upunitlevel)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)\n                                #this.AddTrophyCounter(trophyObjective,delta)\n                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeunitlevel)\n                        #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType1\n                            #if(trophyObjective.ival<=level&&(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID))\n                            #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidOnUnitLevelAndJobLevelChange(stringunitID,intlevel,paramsJobDatajobs)\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeunitandjoblevel)\n                        #charchArray=newchar[1]{','}\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrohy=trophiesOfType\n                            #stringstrArray=trohy.sval_base.Split(chArray)\n                            #if(strArray.Length<4)\n                                #this.PrintUnitAndJobLevelUsage(trohy)\n                            #else\n                                #stringstr1=strArray[0]\n                                #intresult1\n                                #if(!int.TryParse(strArray[1],outresult1))\n                                #this.PrintUnitAndJobLevelUsage(trohy)\n                                #elseif(level>=result1&&!string.IsNullOrEmpty(str1)&&str1==unitID)\n                                    #stringstr2=strArray[2]\n                                    #intresult2\n                                    #if(!int.TryParse(strArray[3],outresult2))\n                                        #this.PrintUnitAndJobLevelUsage(trohy)\n                                    #else\n                                        #foreach(JobDatajobinjobs)\n                                            #if(job.Param.iname==str2&&result2<=job.Rank)\n                                            #this.AddTrophyCounter(trohy,1)\n                    #\n                    #privatevoidPrintUnitAndJobLevelUsage(TrophyObjectivetrohy)\n                        #DebugUtility.Log(trohy.Param.iname+\":[\"+trohy.sval_base+\"]は不正な文字列です。カンマ区切りで「ユニット名・ユニットレベル・ジョブ名・ジョブレベル」の順に設定してください。\")\n                    #\n                    #publicvoidOnEvolutionChange(stringunitID,intrarity)\n                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evolutionnum)\n                        #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType1\n                            #if(trophyObjective.sval_base==unitID&&trophyObjective.ival<=rarity)\n                            #this.AddTrophyCounter(trophyObjective,1)\n                        #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evoltiontimes)\n                        #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType2\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)\n                            #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidOnJobLevelChange(stringunitID,stringjobID,intrank,boolverify=false,intrankDelta=1)\n                        #charchArray=newchar[1]{','}\n                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.joblevel)\n                        #if(!verify)\n                            #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType1\n                                #stringstrArray=trophyObjective.sval_base.Split(chArray)\n                                #if(strArray[0]==unitID&&strArray[1]==jobID&&trophyObjective.ival<=rank)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                        #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.upjoblevel)\n                        #if(!verify)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType2\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                    #this.AddTrophyCounter(trophyObjective,rankDelta)\n                                #else\n                                    #stringstrArray=trophyObjective.sval_base.Split(chArray)\n                                    #if(strArray[0]==unitID&&strArray[1]==jobID)\n                                    #this.AddTrophyCounter(trophyObjective,rankDelta)\n                        #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makejoblevel)\n                        #for(intindex=trophiesOfType3.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType3\n                            #if(trophyObjective.ival<=rank)\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                                #else\n                                    #stringstrArray=trophyObjective.sval_base.Split(chArray)\n                                    #if(strArray[0]==unitID&&strArray[1]==jobID)\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidOnMultiTowerHelp()\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.multitower_help)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                        #this.AddTrophyCounter(trophiesOfType,1)\n                    #\n                    #publicvoidOnLoginCount()\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.logincount)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(trophyObjective.ival<=this.LoginBonusCount)\n                            #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidOnLogin()\n                        #this.TrophyUpdateProgress()\n                        #this.ResetPrevCheckHour()\n                    #\n                    #publicvoidTrophyUpdateProgress()\n                        #MonoSingleton<GameManager>.Instance.Player.UpdateUnitTrophyStates(true)\n                        #MonoSingleton<GameManager>.Instance.Player.UpdatePlayerTrophyStates()\n                        #MonoSingleton<GameManager>.Instance.Player.UpdateArenaRankTrophyStates(-1,-1)\n                        #MonoSingleton<GameManager>.Instance.Player.UpdateArtifactTrophyStates()\n                        #MonoSingleton<GameManager>.Instance.Player.UpdateTobiraTrophyStates()\n                        #if(!string.IsNullOrEmpty(FlowNode_Variable.Get(\"COMPLETE_QUEST_MISSION\")))\n                        #MonoSingleton<GameManager>.Instance.Player.UpdateCompleteAllQuestCountTrophy2((QuestParam)null)\n                        #else\n                        #MonoSingleton<GameManager>.Instance.Player.UpdateCompleteAllQuestCountTrophy((QuestParam)null)\n                        #MonoSingleton<GameManager>.Instance.Player.CheckAllCompleteMissionTrophy()\n                    #\n                    #publicvoidOnSoubiSet(stringunitID,intcountUp=1)\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.unitequip)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)\n                            #this.AddTrophyCounter(trophyObjective,countUp)\n                    #\n                    #publicvoidOnLimitBreak(stringunitID,intdelta=1)\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)\n                            #this.AddTrophyCounter(trophyObjective,delta)\n                    #\n                    #publicvoidOnJobChange(stringunitID)\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.changejob)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)\n                            #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidOnChangeAbilitySet(stringunitID)\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.changeability)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)\n                            #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidOnBuyAtShop(stringshopID,stringitemID,intnum)\n                        #if(num<=0)\n                        #return\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.buyatshop)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                #this.AddTrophyCounter(trophyObjective,num)\n                            #else\n                                #charchArray=newchar[1]{','}\n                                #stringstrArray=trophyObjective.sval_base.Split(chArray)\n                                #if((string.IsNullOrEmpty(strArray[1])||itemID==strArray[1])&&(string.IsNullOrEmpty(strArray[0])||shopID==strArray[0]))\n                                #this.AddTrophyCounter(trophyObjective,num)\n                    #\n                    #publicvoidOnArtifactTransmute(stringartifactID)\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.artifacttransmute)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==artifactID)\n                            #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidOnArtifactStrength(stringartifactID,intuseItemNum,intbeforeLevel,intcurrentLevel)\n                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.artifactstrength)\n                        #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType1\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==artifactID)\n                            #this.AddTrophyCounter(trophyObjective,useItemNum)\n                        #intnum=currentLevel-beforeLevel\n                        #if(num>=1)\n                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.upartifactlevel)\n                            #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                                #TrophyObjectivetrophyObjective=trophiesOfType2\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||string.Equals(trophyObjective.sval_base,artifactID))\n                                #this.AddTrophyCounter(trophyObjective,num)\n                        #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeartifactlevel)\n                        #for(intindex=trophiesOfType3.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType3\n                            #if(currentLevel>=trophyObjective.ival&&(string.IsNullOrEmpty(trophyObjective.sval_base)||string.Equals(trophyObjective.sval_base,artifactID)))\n                            #this.SetTrophyCounter(trophyObjective,currentLevel)\n                    #\n                    #publicvoidOnArtifactEvolution(stringartifactID)\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.artifactevolution)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==artifactID)\n                            #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidOnUnlockTobiraTrophy(longunitUniqueID)\n                        #UnitDataunitDataByUniqueId=this.FindUnitDataByUniqueID(unitUniqueID)\n                        #this.UpdateUnlockTobiraUnitCountTrophy()\n                        #this.UpdateUnlockTobiraUnitTrophy(unitDataByUniqueId)\n                    #\n                    #publicvoidOnOpenTobiraTrophy(longunitUniqueID)\n                        #this.UpdateSinsTobiraTrophy(this.FindUnitDataByUniqueID(unitUniqueID))\n                        #this.CheckAllSinsTobiraNonTargetTrophy()\n                    #\n                    #publicvoidUpdateTobiraTrophyStates()\n                        #this.UpdateUnlockTobiraUnitCountTrophy()\n                        #for(intindex=0index<this.Units.Count++index)\n                            #this.UpdateUnlockTobiraUnitTrophy(this.Units)\n                            #this.UpdateSinsTobiraTrophy(this.Units)\n                        #this.CheckAllSinsTobiraNonTargetTrophy()\n                    #\n                    #privatevoidUpdateSinsTobiraTrophy(UnitDataunitData)\n                        #if(!unitData.IsUnlockTobira)\n                        #return\n                        #List<TobiraParam.Category>unlockTobiraCategorys=this.GetUnlockTobiraCategorys(unitData)\n                        #for(intindex1=0index1<unlockTobiraCategorys.Count++index1)\n                            #TrophyConditionTypestype\n                            #switch(unlockTobiraCategorys[index1])\n                                #caseTobiraParam.Category.Envy:\n                                #type=TrophyConditionTypes.envy_unlock_unit\n                                #break\n                                #caseTobiraParam.Category.Wrath:\n                                #type=TrophyConditionTypes.sloth_unlock_unit\n                                #break\n                                #caseTobiraParam.Category.Sloth:\n                                #type=TrophyConditionTypes.lust_unlock_unit\n                                #break\n                                #caseTobiraParam.Category.Lust:\n                                #type=TrophyConditionTypes.gluttonny_unlock_unit\n                                #break\n                                #caseTobiraParam.Category.Gluttony:\n                                #type=TrophyConditionTypes.wrath_unlock_unit\n                                #break\n                                #caseTobiraParam.Category.Greed:\n                                #type=TrophyConditionTypes.greed_unlock_unit\n                                #break\n                                #caseTobiraParam.Category.Pride:\n                                #type=TrophyConditionTypes.pride_unlock_unit\n                                #break\n                                #default:\n                                #continue\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(type)\n                            #for(intindex2=trophiesOfType.Length-1index2>=0--index2)\n                                #TrophyObjectivetrophyObjective=trophiesOfType[index2]\n                                #if(string.Equals(trophyObjective.sval_base,unitData.UnitParam.iname))\n                                #this.SetTrophyCounter(trophyObjective,1)\n                    #\n                    #privatevoidCheckAllSinsTobiraNonTargetTrophy()\n                        #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Envy,TrophyConditionTypes.envy_unlock_unit)\n                        #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Wrath,TrophyConditionTypes.sloth_unlock_unit)\n                        #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Sloth,TrophyConditionTypes.lust_unlock_unit)\n                        #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Lust,TrophyConditionTypes.gluttonny_unlock_unit)\n                        #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Gluttony,TrophyConditionTypes.wrath_unlock_unit)\n                        #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Greed,TrophyConditionTypes.greed_unlock_unit)\n                        #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Pride,TrophyConditionTypes.pride_unlock_unit)\n                    #\n                    #privatevoidSetSinsTobiraTrophyByAllUnit(TobiraParam.Categorycategory,TrophyConditionTypestrophyType)\n                        #intnum=0\n                        #for(intindex=0index<this.Units.Count++index)\n                            #if(this.Units.CheckTobiraIsUnlocked(category))\n                            #++num\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(trophyType)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                            #this.SetTrophyCounter(trophyObjective,num)\n                    #\n                    #publicList<TobiraParam.Category>GetUnlockTobiraCategorys(UnitDataunitData)\n                        #List<TobiraParam.Category>categoryList=newList<TobiraParam.Category>()\n                        #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Envy))\n                        #categoryList.Add(TobiraParam.Category.Envy)\n                        #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Sloth))\n                        #categoryList.Add(TobiraParam.Category.Sloth)\n                        #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Lust))\n                        #categoryList.Add(TobiraParam.Category.Lust)\n                        #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Wrath))\n                        #categoryList.Add(TobiraParam.Category.Wrath)\n                        #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Greed))\n                        #categoryList.Add(TobiraParam.Category.Greed)\n                        #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Gluttony))\n                        #categoryList.Add(TobiraParam.Category.Gluttony)\n                        #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Pride))\n                        #categoryList.Add(TobiraParam.Category.Pride)\n                        #returncategoryList\n                    #\n                    #privatevoidUpdateUnlockTobiraUnitCountTrophy()\n                        #if(this.Units==null)\n                        #return\n                        #intnum=0\n                        #for(intindex=0index<this.Units.Count++index)\n                            #if(this.Units.IsUnlockTobira)\n                            #++num\n                        #if(num<=0)\n                        #return\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.unlock_tobira_total)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                        #this.SetTrophyCounter(trophiesOfType,num)\n                    #\n                    #privatevoidUpdateUnlockTobiraUnitTrophy(UnitDataunitData)\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.unlock_tobira_unit)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #if(unitData.IsUnlockTobira)\n                                #TrophyObjectivetrophyObjective=trophiesOfType\n                                #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                #DebugUtility.LogError(\"トロフィー[\"+trophyObjective.Param.Name+\"]にはユニットが指定されていません。\")\n                                #elseif(string.Equals(trophyObjective.sval_base,unitData.UnitParam.iname))\n                                #this.SetTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidOnMixedConceptCard(stringconceptCardID,intbeforeLevel,intcurrentLevel,intbeforeAwakeCount,intcurrentAwakeCount,intbeforeTrust,intcurrentTrust)\n                        #MonoSingleton<GameManager>.Instance.Player.UpdateConceptCardLevelupTrophy(conceptCardID,beforeLevel,currentLevel)\n                        #MonoSingleton<GameManager>.Instance.Player.UpdateConceptCardLimitBreakTrophy(conceptCardID,beforeAwakeCount,currentAwakeCount)\n                        #MonoSingleton<GameManager>.Instance.Player.UpdateConceptCardTrustUpTrophy(conceptCardID,beforeTrust,currentTrust)\n                        #MonoSingleton<GameManager>.Instance.Player.UpdateConceptCardTrustMaxTrophy(conceptCardID,currentTrust)\n                    #\n                    #publicvoidUpdateConceptCardTrophyAll()\n                        #if(this.ConceptCards==null)\n                        #return\n                        #MonoSingleton<GameManager>.Instance.Player.CheckAllConceptCardLevelupTrophy()\n                        #MonoSingleton<GameManager>.Instance.Player.CheckAllConceptCardLimitBreakTrophy()\n                        #MonoSingleton<GameManager>.Instance.Player.CheckAllConceptCardTrustUpTrophy()\n                        #MonoSingleton<GameManager>.Instance.Player.CheckAllConceptCardTrustMaxTrophy()\n                    #\n                    #publicvoidUpdateConceptCardLevelupTrophy(stringconceptCardID,intbeforeLevel,intcurrentLevel)\n                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_level)\n                        #intnum=currentLevel-beforeLevel\n                        #if(num>=1)\n                            #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType1,num)\n                        #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_level_target)\n                        #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType2\n                            #if(string.Equals(trophyObjective.sval_base,conceptCardID))\n                                #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=currentLevel)\n                                #this.SetTrophyCounter(trophyObjective,currentLevel)\n                    #\n                    #privatevoidCheckAllConceptCardLevelupTrophy()\n                        #MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_level)\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_level_target)\n                        #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                            #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                            #for(intindex2=0index2<this.ConceptCards.Count++index2)\n                                #if(string.Equals(trophyObjective.sval_base,this.ConceptCards[index2].Param.iname))\n                                    #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                    #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=(int)this.ConceptCards[index2].Lv)\n                                    #this.SetTrophyCounter(trophyObjective,(int)this.ConceptCards[index2].Lv)\n                    #\n                    #publicvoidUpdateConceptCardLimitBreakTrophy(stringconceptCardID,intbeforeLimitBreak,intcurrentLimitBreak)\n                        #if(currentLimitBreak<=0)\n                        #return\n                        #intnum=currentLimitBreak-beforeLimitBreak\n                        #if(num>=1)\n                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak_conceptcard)\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType,num)\n                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak_conceptcard_target)\n                        #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType1\n                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&string.Equals(trophyObjective.sval_base,conceptCardID))\n                                #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=currentLimitBreak)\n                                #this.SetTrophyCounter(trophyObjective,currentLimitBreak)\n                    #\n                    #publicvoidCheckAllConceptCardLimitBreakTrophy()\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak_conceptcard_target)\n                        #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                            #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                            #for(intindex2=0index2<this.ConceptCards.Count++index2)\n                                #if(string.Equals(trophyObjective.sval_base,this.ConceptCards[index2].Param.iname))\n                                    #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                    #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=(int)this.ConceptCards[index2].AwakeCount)\n                                    #this.SetTrophyCounter(trophyObjective,(int)this.ConceptCards[index2].AwakeCount)\n                    #\n                    #publicvoidUpdateConceptCardTrustUpTrophy(stringconceptCardID,intbeforeTrust,intcurrentTrust)\n                        #if(currentTrust==0)\n                        #return\n                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_trust)\n                        #intnum=currentTrust-beforeTrust\n                        #if(num>=1)\n                            #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType1,num)\n                        #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_trust_target)\n                        #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType2\n                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&string.Equals(trophyObjective.sval_base,conceptCardID))\n                                #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=currentTrust)\n                                #this.SetTrophyCounter(trophyObjective,currentTrust)\n                    #\n                    #publicvoidCheckAllConceptCardTrustUpTrophy()\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_trust_target)\n                        #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                            #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                            #for(intindex2=0index2<this.ConceptCards.Count++index2)\n                                #if(string.Equals(trophyObjective.sval_base,this.ConceptCards[index2].Param.iname))\n                                    #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                    #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=(int)this.ConceptCards[index2].Trust)\n                                    #this.SetTrophyCounter(trophyObjective,(int)this.ConceptCards[index2].Trust)\n                    #\n                    #publicvoidUpdateConceptCardTrustMaxTrophy(stringconceptCardID,intcurrentTrust)\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.max_conceptcard_trust)\n                        #intcardTrustMax=(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.CardTrustMax\n                        #if(currentTrust<cardTrustMax)\n                        #return\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                            #this.AddTrophyCounter(trophyObjective,1)\n                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&string.Equals(trophyObjective.sval_base,conceptCardID))\n                            #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #privatevoidCheckAllConceptCardTrustMaxTrophy()\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.max_conceptcard_trust)\n                        #intcardTrustMax=(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.CardTrustMax\n                        #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                            #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                                #intnum=0\n                                #for(intindex2=0index2<this.ConceptCards.Count++index2)\n                                    #if((int)this.ConceptCards[index2].Trust>=cardTrustMax)\n                                    #++num\n                                #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=num)\n                                #this.SetTrophyCounter(trophyObjective,num)\n                            #else\n                                #intnum=0\n                                #for(intindex2=0index2<this.ConceptCards.Count++index2)\n                                    #if(trophyObjective.sval_base==this.ConceptCards[index2].Param.iname&&(int)this.ConceptCards[index2].Trust>=cardTrustMax)\n                                    #++num\n                                #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)\n                                #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=num)\n                                #this.SetTrophyCounter(trophyObjective,num)\n                    #\n                    #publicvoidUpdateSendFriendPresentTrophy()\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.send_present)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                        #this.AddTrophyCounter(trophiesOfType,1)\n                    #\n                    #publicvoidUpdateClearOrdealTrophy(BattleCore.Recordrecord,QuestTypesquestType,stringquestIname)\n                        #if(record.result!=BattleCore.QuestResult.Win&&questType!=QuestTypes.Ordeal)\n                        #return\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.clear_ordeal)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base))\n                                #if(trophyObjective.sval_base==questIname)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                            #else\n                            #DebugUtility.LogError(\"レコードミッション「\"+trophyObjective.Param.Name+\"」はクエストが指定されていません。\")\n                    #\n                    #publicvoidUpdateCompleteAllQuestCountTrophy(QuestParamquestParam=null)\n                        #this.UpdateCompleteMissionCount(TrophyConditionTypes.complete_story_mission_count,questParam)\n                        #this.UpdateCompleteMissionCount(TrophyConditionTypes.complete_event_mission_count,questParam)\n                        #this.UpdateCompleteMissionCount(TrophyConditionTypes.complete_ordeal_mission_count,questParam)\n                        #this.UpdateCompleteMissionCount(TrophyConditionTypes.complete_all_mission_count,questParam)\n                    #\n                    #privatevoidTrophyAllQuestTypeCompleteCount(QuestParamquest=null)\n                        #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                        #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(TrophyConditionTypes.complete_all_mission_count)\n                        #if(quest==null)\n                            #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                #intnum=0\n                                #for(intindex2=0index2<instance.Quests.Length++index2)\n                                    #if(instance.Quests[index2].IsMissionCompleteALL())\n                                    #++num\n                                #this.SetTrophyCounter(trophyObjective,num)\n                        #else\n                            #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #this.AddTrophyCounter(trophiesOfType,1)\n                    #\n                    #privatevoidCheckAllCompleteMissionTrophy()\n                        #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                        #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(TrophyConditionTypes.complete_all_quest_mission_total)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base))\n                                #QuestParamquest=instance.FindQuest(trophyObjective.sval_base)\n                                #if(quest!=null&&quest.IsMissionCompleteALL())\n                                #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #privatevoidUpdateCompleteMissionCount(TrophyConditionTypestype,QuestParamquest=null)\n                        #QuestTypesquestTypes\n                        #switch(type)\n                            #caseTrophyConditionTypes.complete_all_mission_count:\n                            #this.TrophyAllQuestTypeCompleteCount(quest)\n                            #return\n                            #caseTrophyConditionTypes.complete_story_mission_count:\n                            #questTypes=QuestTypes.Story\n                            #break\n                            #caseTrophyConditionTypes.complete_event_mission_count:\n                            #questTypes=QuestTypes.Event\n                            #break\n                            #caseTrophyConditionTypes.complete_ordeal_mission_count:\n                            #questTypes=QuestTypes.Ordeal\n                            #break\n                            #default:\n                            #DebugUtility.LogError(\"指定できないミッションが設定されています。\")\n                            #return\n                        #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                        #if(quest!=null)\n                            #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(type)\n                            #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                #if(questTypes==quest.type)\n                                    #if(trophyObjective.sval!=null&&trophyObjective.sval.Count>0)\n                                        #for(intindex2=0index2<trophyObjective.sval.Count++index2)\n                                            #if(quest.Chapter!=null&&trophyObjective.sval[index2]==quest.Chapter.iname)\n                                                #this.AddTrophyCounter(trophyObjective,1)\n                                                #break\n                                    #else\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                        #else\n                            #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(type)\n                            #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                #intnum=0\n                                #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                #if(trophyObjective.sval!=null&&trophyObjective.sval.Count>0)\n                                    #for(intindex2=0index2<instance.Quests.Length++index2)\n                                        #if(questTypes==instance.Quests[index2].type&&instance.Quests[index2].IsMissionCompleteALL()&&instance.Quests[index2].Chapter!=null)\n                                            #for(intindex3=0index3<trophyObjective.sval.Count++index3)\n                                                #if(trophyObjective.sval[index3]==instance.Quests[index2].Chapter.iname)\n                                                    #++num\n                                                    #break\n                                #else\n                                    #for(intindex2=0index2<instance.Quests.Length++index2)\n                                        #if(instance.Quests[index2].type==questTypes&&instance.Quests[index2].IsMissionCompleteALL())\n                                        #++num\n                                #this.SetTrophyCounter(trophyObjective,num)\n                    #\n                    #publicvoidUpdateViewNewsTrophy(stringurl)\n                        #if(!url.Contains(Network.NewsHost))\n                        #return\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.view_news)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                        #this.AddTrophyCounter(trophiesOfType,1)\n                    #\n                    #publicvoidRecordAllCompleteCheck(TrophyCategoryParamcategory)\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.view_news)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                        #this.AddTrophyCounter(trophiesOfType,1)\n                    #\n                    #publicvoidUpdateCompleteAllQuestCountTrophy2(QuestParamquestParam=null)\n                        #CompleteQuestMapcompleteQuestMap=(CompleteQuestMap)null\n                        #if(questParam==null)\n                            #completeQuestMap=newCompleteQuestMap()\n                            #completeQuestMap.LoadData()\n                        #this.UpdateCompleteMissionCount2(TrophyConditionTypes.complete_story_mission_count,questParam,completeQuestMap)\n                        #this.UpdateCompleteMissionCount2(TrophyConditionTypes.complete_event_mission_count,questParam,completeQuestMap)\n                        #this.UpdateCompleteMissionCount2(TrophyConditionTypes.complete_ordeal_mission_count,questParam,completeQuestMap)\n                        #this.UpdateCompleteMissionCount2(TrophyConditionTypes.complete_all_mission_count,questParam,completeQuestMap)\n                    #\n                    #privatevoidUpdateCompleteMissionCount2(TrophyConditionTypestype,QuestParamquest=null,CompleteQuestMapcompleteQuestMap=null)\n                        #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                        #QuestTypeskey=QuestTypes.None\n                        #boolflag=false\n                        #switch(type)\n                            #caseTrophyConditionTypes.complete_all_mission_count:\n                            #if(quest==null)\n                                #flag=true\n                                #break\n                            #this.TrophyAllQuestTypeCompleteCount(quest)\n                            #return\n                            #caseTrophyConditionTypes.complete_story_mission_count:\n                            #key=QuestTypes.Story\n                            #break\n                            #caseTrophyConditionTypes.complete_event_mission_count:\n                            #key=QuestTypes.Event\n                            #break\n                            #caseTrophyConditionTypes.complete_ordeal_mission_count:\n                            #key=QuestTypes.Ordeal\n                            #break\n                            #default:\n                            #DebugUtility.LogError(\"指定できないミッションが設定されています。\")\n                            #return\n                        #if(quest!=null)\n                            #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(type)\n                            #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                #if(key==quest.type)\n                                    #if(trophyObjective.sval!=null&&trophyObjective.sval.Count>0)\n                                        #for(intindex2=0index2<trophyObjective.sval.Count++index2)\n                                            #if(quest.Chapter!=null&&trophyObjective.sval[index2]==quest.Chapter.iname)\n                                                #this.AddTrophyCounter(trophyObjective,1)\n                                                #break\n                                    #else\n                                    #this.AddTrophyCounter(trophyObjective,1)\n                        #else\n                            #if(completeQuestMap==null)\n                                #completeQuestMap=newCompleteQuestMap()\n                                #completeQuestMap.LoadData()\n                            #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(type)\n                            #if(flag)\n                                #intallCount=completeQuestMap.GetAllCount()\n                                #for(intindex=trophiesOfType.Length-1index>=0--index)\n                                #this.SetTrophyCounter(trophiesOfType,allCount)\n                            #else\n                                #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                                    #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                                    #intnum1=0\n                                    #if(!string.IsNullOrEmpty(trophyObjective.sval_base))\n                                        #for(intindex2=0index2<trophyObjective.sval.Count++index2)\n                                            #CompleteQuestMap.CompleteQuestDatacompleteQuestData\n                                            #completeQuestMap.mChapterMap.TryGetValue(trophyObjective.sval[index2],outcompleteQuestData)\n                                            #if(completeQuestData!=null)\n                                                #if(key!=completeQuestData.mQuestType)\n                                                #DebugUtility.LogError(\"「\"+trophyObjective.Param.iname+\"」に指定されたチャプター「\"+trophyObjective.sval[index2]+\"」は指定のクエストタイプに存在しません。\")\n                                                #num1+=completeQuestData.mCount\n                                        #this.SetTrophyCounter(trophyObjective,num1)\n                                    #else\n                                        #intnum2=0\n                                        #completeQuestMap.mQuestTypeMap.TryGetValue(key,outnum2)\n                                        #intnum3=num1+num2\n                                        #this.SetTrophyCounter(trophyObjective,num3)\n                    #\n                    #publicvoidOnChallengeMissionComplete(stringtrophyID)\n                        #foreach(TrophyParamtrophyinMonoSingleton<GameManager>.Instance.Trophies)\n                            #if(trophy.IsChallengeMissionRoot&&trophy.iname==trophyID)\n                            #this.AddTrophyCounter(trophy,0,1)\n                    #\n                    #publicvoidOnTowerScore(boolisNow=true)\n                        #GameManagerinstance=MonoSingleton<GameManager>.Instance\n                        #TowerResuponsetowerResuponse=instance.TowerResuponse\n                        #if(towerResuponse==null||string.IsNullOrEmpty(towerResuponse.TowerID)||towerResuponse.speedRank==0&&towerResuponse.techRank==0)\n                        #return\n                        #intnum=instance.CalcTowerScore(isNow)\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.overtowerscore)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(num<=trophyObjective.ival&&(string.IsNullOrEmpty(trophyObjective.sval_base)||string.Equals(trophyObjective.sval_base,towerResuponse.TowerID)))\n                            #this.SetTrophyCounter(trophyObjective,num)\n                    #\n                    #publicvoidOnReadTips(stringtrophyIname)\n                        #foreach(TrophyObjectivetrophyObjectiveinMonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.read_tips))\n                            #if(!(trophyObjective.sval_base!=trophyIname))\n                            #this.AddTrophyCounter(trophyObjective,1)\n                        #foreach(TrophyObjectivetrophyObjectiveinMonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.read_tips_count))\n                        #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidUpdateVipDailyMission(intvipLv)\n                    #\n                    #publicvoidUpdateCardDailyMission()\n                        #if((long)this.mVipExpiredAt==0L||TimeManager.FromUnixTime((long)this.mVipExpiredAt)<TimeManager.ServerTime)\n                        #return\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.card)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #TrophyStatetrophyCounter=this.GetTrophyCounter(trophyObjective.Param,false)\n                            #if(trophyCounter!=null&&!trophyCounter.IsCompleted)\n                            #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #privatevoidResetPrevCheckHour()\n                        #this.mPrevCheckHour=-1\n                    #\n                    #publicvoidUpdateStaminaDailyMission()\n                        #if(!this.mUpdateInterval.PlayCheckUpdate())\n                        #return\n                        #inthour=TimeManager.ServerTime.Hour\n                        #if(hour==this.mPrevCheckHour)\n                        #return\n                        #this.mUpdateInterval.SetUpdateInterval()\n                        #this.mPrevCheckHour=hour\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.stamina)\n                        #List<int>mealHours=MonoSingleton<WatchManager>.Instance.GetMealHours()\n                        #for(intindex1=trophiesOfType.Length-1index1>=0--index1)\n                            #TrophyObjectivetrophyObjective=trophiesOfType[index1]\n                            #TrophyStatetrophyCounter=this.GetTrophyCounter(trophyObjective.Param,false)\n                            #if(trophyCounter!=null&&!trophyCounter.IsCompleted)\n                                #intnum1=int.Parse(trophyObjective.sval_base.Substring(0,2))\n                                #intnum2=int.Parse(trophyObjective.sval_base.Substring(3,2))\n                                #if(num1<=hour&&hour<num2)\n                                #this.AddTrophyCounter(trophyObjective,1)\n                                #if(mealHours!=null)\n                                    #for(intindex2=0index2<mealHours.Count++index2)\n                                        #if(num1<=mealHours[index2]&&mealHours[index2]<num2)\n                                        #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidUpdateArtifactTrophyStates()\n                        #if(this.mArtifacts.Count<1)\n                        #return\n                        #intnum=1\n                        #Dictionary<string,ArtifactData>dictionary=newDictionary<string,ArtifactData>()\n                        #for(intindex=0index<this.mArtifacts.Count++index)\n                            #ArtifactDatamArtifact=this.mArtifacts\n                            #if(mArtifact!=null)\n                                #num=Mathf.Max(num,(int)mArtifact.Lv)\n                                #if(mArtifact.ArtifactParam!=null)\n                                    #if(!dictionary.ContainsKey(mArtifact.ArtifactParam.iname))\n                                    #dictionary.Add(mArtifact.ArtifactParam.iname,mArtifact)\n                                    #elseif((int)dictionary[mArtifact.ArtifactParam.iname].Lv<(int)mArtifact.Lv)\n                                    #dictionary[mArtifact.ArtifactParam.iname]=mArtifact\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeartifactlevel)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #if(string.IsNullOrEmpty(trophiesOfType.sval_base))\n                            #this.SetTrophyCounter(trophiesOfType,num)\n                            #elseif(dictionary.ContainsKey(trophiesOfType.sval_base))\n                            #this.SetTrophyCounter(trophiesOfType,(int)dictionary[trophiesOfType.sval_base].Lv)\n                    #\n                    #publicvoidUpdatePlayerTrophyStates()\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.playerlv)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(this.Lv>=trophyObjective.ival)\n                            #this.AddTrophyCounter(trophyObjective,1)\n                    #\n                    #publicvoidUpdateArenaRankTrophyStates(intcurrentRank=-1,intbestRank=-1)\n                        #if(currentRank==-1)\n                        #currentRank=this.ArenaRank\n                        #if(bestRank==-1)\n                        #bestRank=this.ArenaRankBest\n                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.becomearenarank)\n                        #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType1\n                            #if(currentRank==trophyObjective.ival||bestRank==trophyObjective.ival)\n                            #this.SetTrophyCounter(trophyObjective,trophyObjective.ival)\n                        #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.overarenarank)\n                        #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType2\n                            #if(bestRank<=trophyObjective.ival)\n                            #this.SetTrophyCounter(trophyObjective,bestRank)\n                    #\n                    #publicvoidUpdateTowerTrophyStates()\n                        #this.OnTowerScore(false)\n                    #\n                    #publicvoidUpdateVersusTowerTrophyStates(stringtowerName,intcurrentFloor)\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.overvsrankfloor)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if((string.IsNullOrEmpty(trophyObjective.sval_base)||string.Equals(trophyObjective.sval_base,towerName))&&currentFloor>=trophyObjective.ival)\n                            #this.SetTrophyCounter(trophyObjective,currentFloor)\n                    #\n                    #publicvoidClearNewItemFlags()\n                        #for(intindex=this.mItems.Count-1index>=0--index)\n                            #if(this.mItems!=null)\n                            #this.mItems.IsNew=false\n                    #\n                    #publicvoidClearItemFlags(ItemData.ItemFlagsflags)\n                        #if(flags==(ItemData.ItemFlags)0)\n                        #return\n                        #for(intindex=this.mItems.Count-1index>=0--index)\n                            #if(this.mItems!=null)\n                            #this.mItems.ResetFlag(flags)\n                    #\n                    #publicboolItemEntryExists(stringiname)\n                        #returnthis.mID2ItemData.ContainsKey(iname)\n                    #\n                    #publicvoidClearUnits()\n                        #if(this.mUnits!=null)\n                        #this.mUnits.Clear()\n                        #if(this.mUniqueID2UnitData==null)\n                        #return\n                        #this.mUniqueID2UnitData.Clear()\n                    #\n                    #publicvoidClearItems()\n                        #if(this.mItems!=null)\n                        #this.mItems.Clear()\n                        #if(this.mID2ItemData==null)\n                        #return\n                        #this.mID2ItemData.Clear()\n                    #\n                    #publicvoidClearArtifacts()\n                        #this.mArtifacts.Clear()\n                        #this.mArtifactsNumByRarity.Clear()\n                    #\n                    #publicvoidOfflineSellArtifacts(ArtifactDataartifacts)\n                        #if(artifacts==null)\n                        #return\n                        #for(intindex=0index<artifacts.Length++index)\n                            #this.RemoveArtifact(artifacts)\n                            #this.GainGold(artifacts.ArtifactParam.sell)\n                    #\n                    #publicvoidUpdateArtifactOwner()\n                        #for(intindex1=0index1<this.mUnits.Count++index1)\n                            #if(this.mUnits[index1].Jobs!=null)\n                                #for(intindex2=0index2<this.mUnits[index1].Jobs.Length++index2)\n                                    #if(this.mUnits[index1].Jobs[index2]!=null&&this.mUnits[index1].Jobs[index2].ArtifactDatas!=null)\n                                        #for(intindex3=0index3<this.mUnits[index1].Jobs[index2].ArtifactDatas.Length++index3)\n                                        #this.mUnits[index1].Jobs[index2].ArtifactDatas[index3]=(ArtifactData)null\n                        #for(intindex=0index<this.mArtifacts.Count++index)\n                            #ArtifactDatamArtifact=this.mArtifacts\n                            #if(mArtifact!=null&&(long)mArtifact.UniqueID!=0L)\n                                #UnitDataunit=(UnitData)null\n                                #JobDatajob=(JobData)null\n                                #if(this.FindOwner(mArtifact,outunit,outjob))\n                                    #intjob_index=Array.IndexOf<JobData>(unit.Jobs,job)\n                                    #if(job_index!=-1)\n                                        #for(intslot=0slot<job.Artifacts.Length++slot)\n                                            #if((long)mArtifact.UniqueID==job.Artifacts[slot])\n                                                #unit.SetEquipArtifactData(job_index,slot,mArtifact,unit.JobIndex==job_index)\n                                                #if(unit.JobIndex!=job_index)\n                                                    #unit.UpdateArtifact(unit.JobIndex,true,false)\n                                                    #break\n                                                #break\n                    #\n                    #publicboolIsBeginner()\n                        #return(double)(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.BeginnerDays>newTimeSpan(TimeManager.FromUnixTime(Network.GetServerTime()).Ticks).TotalDays-newTimeSpan(TimeManager.FromUnixTime((long)(int)this.mNewGameAt).Ticks).TotalDays\n                    #\n                    #publicDateTimeGetBeginnerEndTime()\n                        #returnTimeManager.FromUnixTime((long)(int)this.mNewGameAt).AddDays((double)(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.BeginnerDays)\n                    #\n                    #publicDictionary<ItemParam,int>CreateItemSnapshot()\n                        #Dictionary<ItemParam,int>dictionary=newDictionary<ItemParam,int>()\n                        #for(intindex=0index<this.mItems.Count++index)\n                        #dictionary[this.mItems.Param]=this.mItems.NumNonCap\n                        #returndictionary\n                    #\n                    #publicvoidGainPiecePoint(intpoint)\n                        #this.mPiecePoint=(OInt)Math.Max((int)this.mPiecePoint+point,0)\n                    #\n                    #publicstringDequeueNextLoginBonusTableID()\n                        #if(this.mLoginBonusQueue.Count<1)\n                        #return(string)null\n                        #returnthis.mLoginBonusQueue.Dequeue()\n                    #\n                    #publicboolHasQueuedLoginBonus\n                        #get\n                            #returnthis.mLoginBonusQueue.Count>0\n                    #\n                    #publicvoidUpdateUnitTrophyStates(boolverbose)\n                        #intnum1=0\n                        #intnum2=0\n                        #intnum3=0\n                        #intnum4=0\n                        #intnum5=0\n                        #MasterParammasterParam=MonoSingleton<GameManager>.Instance.MasterParam\n                        #for(intindex1=0index1<this.mUnits.Count++index1)\n                            #UnitDatamUnit=this.mUnits[index1]\n                            #if(mUnit!=null)\n                                #num1+=mUnit.Lv\n                                #++num2\n                                #JobDatajobs=mUnit.Jobs\n                                #if(jobs!=null)\n                                    #for(intindex2=0index2<jobs.Length++index2)\n                                        #if(jobs[index2]!=null)\n                                            #if(jobs[index2].Rank>=11)\n                                                #++num3\n                                                #break\n                                            #if(jobs[index2].Rank>0)\n                                                #JobSetParamjobSetFast=mUnit.UnitParam.GetJobSetFast(index2)\n                                                #if(jobSetFast!=null&&!string.IsNullOrEmpty(jobSetFast.jobchange))\n                                                    #JobSetParamjobSetParam=masterParam.GetJobSetParam(jobSetFast.jobchange)\n                                                    #if(jobSetParam!=null&&jobSetParam.job==jobs[index2].JobID)\n                                                        #++num3\n                                                        #break\n                                #if(mUnit.UnitParam!=null&&mUnit.Rarity-(int)mUnit.UnitParam.rare>0)\n                                #++num4\n                                #num5+=mUnit.AwakeLv\n                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.collectunits)\n                        #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                            #if(trophiesOfType1.ival<=num2)\n                            #this.AddTrophyCounter(trophiesOfType1,1)\n                        #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.totaljoblv11)\n                        #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                            #if(trophiesOfType2.ival<=num3)\n                            #this.AddTrophyCounter(trophiesOfType2,1)\n                        #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.totalunitlvs)\n                        #for(intindex=trophiesOfType3.Length-1index>=0--index)\n                            #if(trophiesOfType3.ival<=num1)\n                            #this.AddTrophyCounter(trophiesOfType3,1)\n                        #TrophyObjectivetrophiesOfType4=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evoltiontimes)\n                        #for(intindex=trophiesOfType4.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType4\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                            #this.SetTrophyCounter(trophyObjective,num4)\n                        #TrophyObjectivetrophiesOfType5=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak)\n                        #for(intindex=trophiesOfType5.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType5\n                            #if(string.IsNullOrEmpty(trophyObjective.sval_base))\n                            #this.SetTrophyCounter(trophyObjective,num5)\n                        #if(!verbose)\n                        #return\n                        #for(intindex1=0index1<this.mUnits.Count++index1)\n                            #UnitDatamUnit=this.mUnits[index1]\n                            #if(mUnit==null||mUnit.UnitParam==null)\n                            #break\n                            #stringiname=mUnit.UnitParam.iname\n                            #this.OnUnitLevelChange(iname,0,mUnit.Lv,true)\n                            #JobDatajobs=mUnit.Jobs\n                            #if(jobs!=null)\n                                #for(intindex2=0index2<jobs.Length++index2)\n                                #this.OnJobLevelChange(iname,jobs[index2].JobID,jobs[index2].Rank,true,1)\n                            #this.OnUnitLevelAndJobLevelChange(iname,mUnit.Lv,mUnit.Jobs)\n                            #List<AbilityData>learnAbilitys=mUnit.LearnAbilitys\n                            #for(intindex2=0index2<learnAbilitys.Count++index2)\n                            #this.OnAbilityPowerUp(iname,learnAbilitys[index2].AbilityID,learnAbilitys[index2].Rank,true)\n                            #if(mUnit.Rarity>(int)mUnit.UnitParam.rare)\n                            #this.OnEvolutionCheck(iname,mUnit.Rarity,(int)mUnit.UnitParam.rare)\n                            #this.OnLimitBreakCheck(iname,mUnit.AwakeLv)\n                    #\n                    #publicvoidOnEvolutionCheck(stringunitID,intrarity,intinitialRarity)\n                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evolutionnum)\n                        #for(intindex=trophiesOfType1.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType1\n                            #if(trophyObjective.sval_base==unitID&&trophyObjective.ival<=rarity)\n                            #this.AddTrophyCounter(trophyObjective,1)\n                        #intnum=rarity-initialRarity\n                        #if(num<1)\n                        #return\n                        #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evoltiontimes)\n                        #for(intindex=trophiesOfType2.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType2\n                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&trophyObjective.sval_base==unitID)\n                            #this.SetTrophyCounter(trophyObjective,num)\n                    #\n                    #publicvoidOnLimitBreakCheck(stringunitID,intawake)\n                        #if(awake<=0)\n                        #return\n                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak)\n                        #for(intindex=trophiesOfType.Length-1index>=0--index)\n                            #TrophyObjectivetrophyObjective=trophiesOfType\n                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&trophyObjective.sval_base==unitID)\n                            #this.SetTrophyCounter(trophyObjective,awake)\n                    #\n                    #publicvoidSetupEventCoin()\n                        #if(this.mEventCoinList.Count!=0||MonoSingleton<GameManager>.Instance.MasterParam.Items==null)\n                        #return\n                        #List<ItemParam>items=MonoSingleton<GameManager>.Instance.MasterParam.Items\n                        #for(intindex=0index<items.Count++index)\n                            #if(items.type==EItemType.EventCoin)\n                            #this.mEventCoinList.Add(newEventCoinData()\n                                #iname=items.iname,\n                                #param=items\n                                #})\n                        #\n                        #publicvoidUpdateEventCoin()\n                            #this.SetupEventCoin()\n                            #for(inti=0i<this.mEventCoinList.Count++i)\n                                #ItemDataitemData=MonoSingleton<GameManager>.Instance.Player.Items.Find((Predicate<ItemData>)(f=>f.Param.iname.Equals(this.mEventCoinList[i].iname)))\n                                #if(itemData!=null)\n                                #this.mEventCoinList[i].have=itemData\n                        #\n                        #publicintEventCoinNum(stringcost_iname)\n                            #if(cost_iname==null)\n                            #return0\n                            #EventCoinDataeventCoinData=this.mEventCoinList.Find((Predicate<EventCoinData>)(f=>f.iname.Equals(cost_iname)))\n                            #if(eventCoinData!=null&&eventCoinData.have!=null)\n                            #returneventCoinData.have.Num\n                            #return0\n                        #\n                        #publicvoidSetEventCoinNum(stringcost_iname,intnum)\n                            #if(cost_iname==null)\n                            #return\n                            #MonoSingleton<GameManager>.Instance.Player.Items.Find((Predicate<ItemData>)(f=>f.Param.iname.Equals(cost_iname)))?.SetNum(num)\n                        #\n                        #publicvoidSetVersusPlacement(stringkey,intidx)\n                            #PlayerPrefsUtility.SetInt(key,idx,false)\n                        #\n                        #publicintGetVersusPlacement(stringkey)\n                            #returnPlayerPrefsUtility.GetInt(key,0)\n                        #\n                        #publicvoidSetTowerMatchInfo(intfloor,intkey,intwincnt,boolgift)\n                            #this.mVersusTwFloor=floor\n                            #this.mVersusTwKey=key\n                            #this.mVersusTwWinCnt=wincnt\n                            #this.mVersusSeasonGift=gift\n                        #\n                        #publicvoidSetRankMatchInfo(int_rank,int_score,RankMatchClass_class,int_battle_point,int_streak_win,int_wincnt,int_losecnt)\n                            #this.mRankMatchOldClass=this.mRankMatchClass\n                            #this.mRankMatchOldRank=this.mRankMatchRank\n                            #this.mRankMatchOldScore=this.mRankMatchScore\n                            #this.mRankMatchRank=_rank\n                            #this.mRankMatchScore=_score\n                            #this.mRankMatchClass=_class\n                            #this.mRankMatchBattlePoint=_battle_point\n                            #this.mRankMatchStreakWin=_streak_win\n                            #this.RankMatchWinCount=_wincnt\n                            #this.RankMatchLoseCount=_losecnt\n                        #\n                        #publicboolIsHaveAward(stringaward)\n                            #if(this.mHaveAward==null)\n                            #returnfalse\n                            #returnthis.mHaveAward.Contains(award)\n                        #\n                        #publicvoidUpdateAchievementTrophyStates()\n                            #if(this.mTrophyStatesInameDict==null)\n                            #return\n                            #List<AchievementParam>achievementData=GameCenterManager.GetAchievementData()\n                            #if(achievementData==null||achievementData.Count<1)\n                            #return\n                            #for(intindex=0index<achievementData.Count++index)\n                                #AchievementParamachievementParam=achievementData\n                                #List<TrophyState>trophyStateList\n                                #if(this.mTrophyStatesInameDict.TryGetValue(achievementParam.iname,outtrophyStateList)&&trophyStateList[0].IsCompleted)\n                                #GameCenterManager.SendAchievementProgress(achievementParam)\n                        #\n                        #publicvoidSetWishList(stringiname,intpriority)\n                            #this.FriendPresentWishList.Set(iname,priority)\n                        #\n                        #publicvoidSetQuestListDirty()\n                            #this.mQuestListDirty=true\n                        #\n                        #publicList<ConceptCardData>ConceptCards\n                            #get\n                                #returnthis.mConceptCards\n                        #\n                        #publicList<ConceptCardMaterialData>ConceptCardExpMaterials\n                            #get\n                                #returnthis.mConceptCardExpMaterials\n                        #\n                        #publicList<ConceptCardMaterialData>ConceptCardTrustMaterials\n                            #get\n                                #returnthis.mConceptCardTrustMaterials\n                        #\n                        #publicList<SkinConceptCardData>SkinConceptCards\n                            #get\n                                #returnthis.mSkinConceptCards\n                        #\n                        #publicConceptCardDataFindConceptCardByUniqueID(longiid)\n                            #returnthis.mConceptCards.Find((Predicate<ConceptCardData>)(card=>(long)card.UniqueID==iid))\n                        #\n                        #publicvoidRemoveConceptCardData(longiids)\n                            #this.mConceptCards.RemoveAll((Predicate<ConceptCardData>)(card=>\n                                #for(intindex=0index<iids.Length++index)\n                                    #if((long)card.UniqueID==iids)\n                                    #returntrue\n                                #returnfalse\n                                #}))\n                                #for(inti=0i<iids.Length++i)\n                                    #UnitDataunitData=this.Units.Find((Predicate<UnitData>)(ud=>\n                                        #if(ud.ConceptCard!=null)\n                                        #return(long)ud.ConceptCard.UniqueID==iids[i]\n                                        #returnfalse\n                                        #}))\n                                        #if(unitData!=null)\n                                        #unitData.ConceptCard=(ConceptCardData)null\n                                    #this.UpdateConceptCardNum()\n                                #\n                                #publicvoidUpdateConceptCardNum()\n                                    #this.mConceptCardNum.Clear()\n                                    #for(intindex1=0index1<this.mConceptCards.Count++index1)\n                                        #stringiname=this.mConceptCards[index1].Param.iname\n                                        #if(this.mConceptCardNum.ContainsKey(iname))\n                                            #Dictionary<string,int>mConceptCardNum\n                                            #stringindex2\n                                            #(mConceptCardNum=this.mConceptCardNum)[index2=iname]=mConceptCardNum[index2]+1\n                                        #else\n                                        #this.mConceptCardNum.Add(iname,1)\n                                #\n                                #publicvoidUpdateConceptCardNum(stringinames)\n                                    #this.mConceptCardNum.Clear()\n                                    #for(intindex1=0index1<inames.Length++index1)\n                                        #stringiname=inames[index1]\n                                        #if(this.mConceptCardNum.ContainsKey(iname))\n                                            #Dictionary<string,int>mConceptCardNum\n                                            #stringindex2\n                                            #(mConceptCardNum=this.mConceptCardNum)[index2=iname]=mConceptCardNum[index2]+1\n                                        #else\n                                        #this.mConceptCardNum.Add(iname,1)\n                                #\n                                #publicintGetConceptCardNum(stringiname)\n                                    #intnum=0\n                                    #this.mConceptCardNum.TryGetValue(iname,outnum)\n                                    #returnnum\n                                #\n                                #publicintGetConceptCardMaterialNum(stringiname)\n                                    #intnum=0\n                                    #ConceptCardParamconceptCardParam=MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam(iname)\n                                    #if(conceptCardParam==null)\n                                    #returnnum\n                                    #ConceptCardMaterialDatacardMaterialData=(ConceptCardMaterialData)null\n                                    #if(conceptCardParam.type==eCardType.Enhance_exp)\n                                    #cardMaterialData=this.mConceptCardExpMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==iname))\n                                    #elseif(conceptCardParam.type==eCardType.Enhance_trust)\n                                    #cardMaterialData=this.mConceptCardTrustMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==iname))\n                                    #if(cardMaterialData!=null)\n                                    #num=(int)cardMaterialData.Num\n                                    #returnnum\n                                #\n                                #publicOLongGetConceptCardMaterialUniqueID(stringiname)\n                                    #OLongolong=(OLong)-1L\n                                    #ConceptCardParamconceptCardParam=MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam(iname)\n                                    #if(conceptCardParam==null)\n                                    #returnolong\n                                    #ConceptCardMaterialDatacardMaterialData=(ConceptCardMaterialData)null\n                                    #if(conceptCardParam.type==eCardType.Enhance_exp)\n                                    #cardMaterialData=this.mConceptCardExpMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==iname))\n                                    #elseif(conceptCardParam.type==eCardType.Enhance_trust)\n                                    #cardMaterialData=this.mConceptCardTrustMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==iname))\n                                    #if(cardMaterialData!=null)\n                                    #olong=cardMaterialData.UniqueID\n                                    #returnolong\n                                #\n                                #publicintGetEnhanceConceptCardMaterial()\n                                    #intnum=0\n                                    #if(this.mConceptCardExpMaterials!=null)\n                                    #num+=this.mConceptCardExpMaterials.Count\n                                    #if(this.mConceptCardTrustMaterials!=null)\n                                    #num+=this.mConceptCardTrustMaterials.Count\n                                    #returnnum\n                                #\n                                #publicvoidOverWriteConceptCardMaterials(JSON_ConceptCardMaterialconcept_card_materials)\n                                    #if(concept_card_materials==null)\n                                    #return\n                                    #ConceptCardMaterialDatacardMaterialData=(ConceptCardMaterialData)null\n                                    #for(intindex=0index<concept_card_materials.Length++index)\n                                        #ConceptCardParamparam=MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam(concept_card_materials.iname)\n                                        #if(param!=null)\n                                            #if(param.type==eCardType.Enhance_exp)\n                                                #cardMaterialData=this.mConceptCardExpMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==param.iname))\n                                                #if(cardMaterialData!=null)\n                                                #cardMaterialData.Num=(OInt)concept_card_materials.num\n                                            #elseif(param.type==eCardType.Enhance_trust)\n                                                #cardMaterialData=this.mConceptCardTrustMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==param.iname))\n                                                #if(cardMaterialData!=null)\n                                                #cardMaterialData.Num=(OInt)concept_card_materials.num\n                                            #if((int)cardMaterialData.Num==0)\n                                                #if(param.type==eCardType.Enhance_exp)\n                                                #this.mConceptCardExpMaterials.Remove(cardMaterialData)\n                                                #elseif(param.type==eCardType.Enhance_trust)\n                                                #this.mConceptCardTrustMaterials.Remove(cardMaterialData)\n                                #\n                                #publicvoidSetConceptCardNum(stringiname,intvalue)\n                                    #if(this.mConceptCardNum.ContainsKey(iname))\n                                    #this.mConceptCardNum[iname]=value\n                                    #else\n                                    #this.mConceptCardNum.Add(iname,value)\n                                #\n                                #publicvoidOnDirtyConceptCardData()\n                                    #GlobalVars.IsDirtyConceptCardData.Set(true)\n                                    #GlobalVars.IsDirtySkinConceptCardData.Set(true)\n                                #\n                                #publicboolIsHaveHealAPItems()\n                                    #boolflag=false\n                                    #List<ItemData>list=this.Items.Where<ItemData>((Func<ItemData,bool>)(x=>x.ItemType==EItemType.ApHeal)).ToList<ItemData>()\n                                    #if(list!=null)\n                                        #for(intindex=0index<list.Count++index)\n                                            #if(list.Num>0)\n                                                #flag=true\n                                                #break\n                                    #returnflag\n                                #\n                                #publicboolIsHaveConceptCardExpMaterial()\n                                    #if(this.mConceptCardExpMaterials==null||this.mConceptCardExpMaterials.Count==0)\n                                    #returnfalse\n                                    #boolflag=false\n                                    #List<ConceptCardMaterialData>all=this.mConceptCardExpMaterials.FindAll((Predicate<ConceptCardMaterialData>)(p=>(int)p.Num>0))\n                                    #if(all!=null&&all.Count>0)\n                                    #flag=true\n                                    #returnflag\n                                #\n                                #publicboolIsHaveConceptCardTrustMaterial()\n                                    #if(this.mConceptCardTrustMaterials==null||this.mConceptCardTrustMaterials.Count==0)\n                                    #returnfalse\n                                    #boolflag=false\n                                    #List<ConceptCardMaterialData>all=this.mConceptCardTrustMaterials.FindAll((Predicate<ConceptCardMaterialData>)(p=>(int)p.Num>0))\n                                    #if(all!=null&&all.Count>0)\n                                    #flag=true\n                                    #returnflag\n                                #\n                                #publicvoidSetTowerFloorResetCoin(ReqTowerFloorReset.Json_Responseresult)\n                                    #if(result==null)\n                                    #return\n                                    #this.mFreeCoin=(OInt)result.coin.free\n                                    #this.mPaidCoin=(OInt)result.coin.paid\n                                    #this.mComCoin=(OInt)result.coin.com\n                                #\n                                #publicboolSetPremiumLoginBonus(Json_LoginBonusTableloginbonus)\n                                    #if(loginbonus==null||string.IsNullOrEmpty(loginbonus.type))\n                                    #returntrue\n                                    #this.mLoginBonusTables[loginbonus.type]=loginbonus\n                                    #this.mPremiumLoginBonus=loginbonus\n                                    #returntrue\n                                #\n                                #[System.Flags]\n                                #publicenumEDeserializeFlags\n                                    #None=0,\n                                    #Gold=1,\n                                    #Coin=2,\n                                    #Stamina=4,\n                                    #Cave=8,\n                                    #AbilityUp=16,//0x00000010\n                                    #Arena=32,//0x00000020\n                                    #Tour=64,//0x00000040\n                                #\n                                #publicclassJson_InitData\n                                    #publicPlayerData.Json_InitUnitsunits\n                                    #publicPlayerData.Json_InitItemsitems\n                                    #publicPlayerData.Json_InitPartyparty\n                                    #publicPlayerData.Json_InitUnitsfriends\n                                #\n                                #publicclassJson_FriendData\n                                    #publicJson_Unitfriends\n                                #\n                                #publicclassJson_InitUnits\n                                    #publicstringiname\n                                    #publicintexp\n                                    #publicstringskills\n                                #\n                                #publicclassJson_InitItems\n                                    #publicstringiname\n                                    #publicintnum\n                                #\n                                #publicclassJson_InitParty\n                                    #publicPlayerData.Json_InitPartyUnitunits\n                                #\n                                #publicclassJson_InitPartyUnit\n                                    #publicintiid\n                                    #publicintleader\n                                #\n                                #privateclassJSON_TrophyState\n                                    #publicstringid=string.Empty\n                                    #publicintcnt\n                                    #publiclongst\n                                    #publicintfin\n                        #\nreturn this\n",
    "PlayerGuild": "def PlayerGuild(json):\n    this={}#PlayerGuildjson)\n    if 'gid' in json:\n        this['mGid'] = json['gid']\n    if 'guild_name' in json:\n        this['mName'] = json['guild_name']\n    if 'role_id' in json:\n        this['mRoleId'] = json['role_id']\n    if 'invest_point' in json:\n        this['mInvestPoint'] = json['invest_point']\n    if 'applied_at' in json:\n        this['mAppliedAt'] = json['applied_at']\n    if 'joined_at' in json:\n        this['mJoinedAt'] = json['joined_at']\n    if 'leaved_at' in json:\n        this['mLeavedAt'] = json['leaved_at']\n    #returntrue\nreturn this\n",
    "PlayerParam": "def PlayerParam(json):\n    this={}#PlayerParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'pt' in json:\n        this['pt'] = json['pt']\n    if 'ucap' in json:\n        this['ucap'] = json['ucap']\n    if 'icap' in json:\n        this['icap'] = json['icap']\n    if 'ecap' in json:\n        this['ecap'] = json['ecap']\n    if 'fcap' in json:\n        this['fcap'] = json['fcap']\n    #returntrue\nreturn this\n",
    "PremiumParam": "def PremiumParam(json):\n    this={}#PremiumParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['m_Iname'] = json['iname']\n    if 'image' in json:\n        this['m_Image'] = json['image']\n    if 'begin_at' in json:\n        this['m_BeginAt'] = json['begin_at']==null?0L:TimeManager.GetUnixSec)\n    if 'begin_at' in json:\n        this['m_EndAt'] = json['begin_at']==null?0L:TimeManager.GetUnixSec)\n    if 'span' in json:\n        this['m_Span'] = json['span']\n    #returntrue\nreturn this\n",
    "ProductParam": "def ProductParam(json):\n    this={}#ProductParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'product_id' in json:\n        this['mProductId'] = json['product_id']\n    if 'platform' in json:\n        this['mPlatform'] = json['platform']\n    if 'name' in json:\n        this['mName'] = json['name']\n    if 'description' in json:\n        this['mDescription'] = json['description']\n    if 'additional_paid_coin' in json:\n        this['mAdditionalPaidCoin'] = json['additional_paid_coin']\n    if 'additional_free_coin' in json:\n        this['mAdditionalFreeCoin'] = json['additional_free_coin']\n    #if(json.sale!=null)\n        #this.mSale=newProductParam.ProductSaleInfo()\n        this['']\n        this['mSale']\n        if 'sale' in json:\n            this['mSale']['Name'] = !string.IsNullOrEmpty?json['sale'].name:string.Empty\n        this['mSale']\n        if 'sale' in json:\n            this['mSale']['Description'] = !string.IsNullOrEmpty?json['sale'].description:string.Empty\n        this['mSale']\n        if 'sale' in json:\n            this['mSale']['AdditionalFreeCoin'] = json['sale'].additional_free_coin>0?json['sale'].additional_free_coin:0\n    #returntrue\nreturn this\n",
    "ProductSaleParam": "def ProductSaleParam(json):\n    this={}#ProductSaleParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'fields' in json:\n        this['ProductId'] = json['fields'].product_id\n    if 'fields' in json:\n        this['Platform'] = json['fields'].platform\n    if 'fields' in json:\n        this['Name'] = json['fields'].name\n    if 'fields' in json:\n        this['Description'] = json['fields'].description\n    if 'fields' in json:\n        this['AdditionalFreeCoin'] = json['fields'].additional_free_coin\n    this['']\n    this['Condition']\n    if 'fields' in json:\n        this['Condition']['type'] = json['fields'].condition_type\n    this['Condition']\n    if 'fields' in json:\n        this['Condition']['value'] = json['fields'].condition_value\n    #returntrue\nreturn this\n",
    "QuestCampaignChildParam": "def QuestCampaignChildParam(json):\n    this={}#QuestCampaignChildParamjson)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'scope' in json:\n        this['scope'] = ENUM['QuestCampaignScopes'][json['scope']]\n    if 'quest_type' in json:\n        this['questType'] = ENUM['QuestTypes'][json['quest_type']]\n    if 'quest_mode' in json:\n        this['questMode'] = ENUM['QuestDifficulties'][json['quest_mode']]\n    if 'quest_id' in json:\n        this['questId'] = json['quest_id']\n    if 'unit' in json:\n        this['unit'] = json['unit']\n    if 'drop_rate' in json:\n        this['dropRate'] = json['drop_rate']\n    if 'drop_num' in json:\n        this['dropNum'] = json['drop_num']\n    if 'exp_player' in json:\n        this['expPlayer'] = json['exp_player']\n    if 'exp_unit' in json:\n        this['expUnit'] = json['exp_unit']\n    if 'ap_rate' in json:\n        this['apRate'] = json['ap_rate']\n    #this.parents=newQuestCampaignParentParam[0]\n    #this.campaignTrust=(QuestCampaignTrust)null\n    #returntrue\nreturn this\n",
    "QuestCampaignParentParam": "def QuestCampaignParentParam(json):\n    this={}#QuestCampaignParentParamjson)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'children' in json:\n        this['children'] = json['children']\n    #this.beginAt=DateTime.MinValue\n    #this.endAt=DateTime.MaxValue\n    #if(!string.IsNullOrEmpty(json.begin_at))\n    #DateTime.TryParse(json.begin_at,outthis.beginAt)\n    #if(!string.IsNullOrEmpty(json.end_at))\n    #DateTime.TryParse(json.end_at,outthis.endAt)\n    #returntrue\nreturn this\n",
    "QuestCampaignTrust": "def QuestCampaignTrust(json):\n    this={}#QuestCampaignTrustjson)\n    if 'children_iname' in json:\n        this['iname'] = json['children_iname']\n    if 'concept_card' in json:\n        this['concept_card'] = json['concept_card']\n    if 'card_trust_lottery_rate' in json:\n        this['card_trust_lottery_rate'] = json['card_trust_lottery_rate']\n    if 'card_trust_qe_bonus' in json:\n        this['card_trust_qe_bonus'] = json['card_trust_qe_bonus']\n    #returntrue\nreturn this\n",
    "QuestClearUnlockUnitDataParam": "def QuestClearUnlockUnitDataParam(json):\n    this={}#QuestClearUnlockUnitDataParamjson)\n    #if(json==null)\n    #return\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'uid' in json:\n        this['uid'] = json['uid']\n    if 'add' in json:\n        this['add'] = json['add']>0\n    if 'type' in json:\n        this['type'] = json['type']\n    if 'new_id' in json:\n        this['new_id'] = json['new_id']\n    if 'old_id' in json:\n        this['old_id'] = json['old_id']\n    if 'parent_id' in json:\n        this['parent_id'] = json['parent_id']\n    if 'ulv' in json:\n        this['ulv'] = json['ulv']\n    if 'aid' in json:\n        this['aid'] = json['aid']\n    if 'alv' in json:\n        this['alv'] = json['alv']\n    if 'qcnd' in json:\n        this['qcnd'] = json['qcnd']>0\n    #if(json.qids==null)\n    #return\n    if 'qids' in json:\n        this['qids'] = newstring[json['qids'].Length]\n    #json.qids.CopyTo((Array)this.qids,0)\nreturn this\n",
    "QuestCondParam": "def QuestCondParam(json):\n    this={}#QuestCondParamjson)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'plvmax' in json:\n        this['plvmax'] = json['plvmax']\n    if 'plvmin' in json:\n        this['plvmin'] = json['plvmin']\n    if 'ulvmax' in json:\n        this['ulvmax'] = json['ulvmax']\n    if 'ulvmin' in json:\n        this['ulvmin'] = json['ulvmin']\n    if 'sex' in json:\n        this['sex'] = ENUM['ESex'][json['sex']]\n    if 'rmax' in json:\n        this['rmax'] = json['rmax']\n    if 'rmin' in json:\n        this['rmin'] = json['rmin']\n    if 'hmax' in json:\n        this['hmax'] = json['hmax']\n    if 'hmin' in json:\n        this['hmin'] = json['hmin']\n    if 'wmax' in json:\n        this['wmax'] = json['wmax']\n    if 'wmin' in json:\n        this['wmin'] = json['wmin']\n    #intnum1=0\n    #this.elem=newint[Enum.GetValues(typeof(EElement)).Length]\n    if 'el_none' in json:\n        this['isElemLimit'] = num1++(this.elem[1]=json.el_fire)+(this.elem[2]=json.el_watr)+(this.elem[3]=json.el_wind)+(this.elem[4]=json.el_thdr)+(this.elem[5]=json.el_lit)+(this.elem[6]=json.el_drk)>0\n    #intnum2=0\n    #this.jobset=newint[4]\n    #intjobset1=this.jobset\n    #intindex1=num2\n    #intnum3=index1+1\n    #intjobset1_1=json.jobset1\n    #jobset1[index1]=jobset1_1\n    #intjobset2=this.jobset\n    #intindex2=num3\n    #intnum4=index2+1\n    #intjobset2_1=json.jobset2\n    #jobset2[index2]=jobset2_1\n    #intjobset3=this.jobset\n    #intindex3=num4\n    #intnum5=index3+1\n    #intjobset3_1=json.jobset3\n    #jobset3[index3]=jobset3_1\n    #if(json.job!=null)\n        if 'job' in json:\n            this['job'] = newstring[json['job'].Length]\n        #for(intindex4=0index4<this.job.Length++index4)\n        if 'job' in json:\n            this['job'][4] = json['job'][index4]\n    #if(json.unit!=null)\n        if 'unit' in json:\n            this['unit'] = newstring[json['unit'].Length]\n        #for(intindex4=0index4<this.unit.Length++index4)\n        if 'unit' in json:\n            this['unit'][4] = json['unit'][index4]\n    #if(json.birth!=null)\n        if 'birth' in json:\n            this['birth'] = newstring[json['birth'].Length]\n        #for(intindex4=0index4<this.birth.Length++index4)\n        if 'birth' in json:\n            this['birth'][4] = json['birth'][index4]\n    if 'party_type' in json:\n        this['party_type'] = !Enum.IsDefined,(object)json['party_type'])?PartyCondType.None:(PartyCondType)json['party_type']\n    #returntrue\nreturn this\n",
    "QuestParam": "def QuestParam(json):\n    this={}#QuestParamjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'expr' in json:\n        this['expr'] = json['expr']\n    if 'cond' in json:\n        this['cond'] = json['cond']\n    if 'mission' in json:\n        this['mission'] = json['mission']\n    if 'pexp' in json:\n        this['pexp'] = json['pexp']\n    if 'uexp' in json:\n        this['uexp'] = json['uexp']\n    if 'gold' in json:\n        this['gold'] = json['gold']\n    if 'mcoin' in json:\n        this['mcoin'] = json['mcoin']\n    if 'pt' in json:\n        this['point'] = CheckCast.to_short\n    if 'multi' in json:\n        this['multi'] = CheckCast.to_short(json['multi'])\n    if 'multi_dead' in json:\n        this['multiDead'] = CheckCast.to_short(json['multi_dead'])\n    if 'pnum' in json:\n        this['playerNum'] = CheckCast.to_short(json['pnum'])\n    if 'unum' in json:\n        this['unitNum'] = CheckCast.to_short(json['unum']<=QuestParam.MULTI_MAX_PLAYER_UNIT?json['unum']:QuestParam.MULTI_MAX_PLAYER_UNIT)\n    if 'aplv' in json:\n        this['aplv'] = CheckCast.to_short\n    if 'limit' in json:\n        this['challengeLimit'] = CheckCast.to_short\n    if 'dayreset' in json:\n        this['dayReset'] = json['dayreset']\n    #if((int)this.multi!=0)\n        #if(json.pnum*json.unum>QuestParam.MULTI_MAX_TOTAL_UNIT)\n        #DebugUtility.LogError(\"iname:\"+json.iname+\"/Currenttotalunitis\"+(object)(json.pnum*json.unum)+\".Pleasesetthetotalnumberofunitsto\"+(object)QuestParam.MULTI_MAX_TOTAL_UNIT)\n        #if(json.unum>QuestParam.MULTI_MAX_PLAYER_UNIT)\n        #DebugUtility.LogError(\"iname:\"+json.iname+\"/Current1playerunitis\"+(object)json.unum+\".Pleasesetthe1playernumberofunitsto\"+(object)QuestParam.MULTI_MAX_PLAYER_UNIT)\n    if 'key_limit' in json:\n        this['key_limit'] = json['key_limit']\n    if 'ctw' in json:\n        this['clock_win'] = CheckCast.to_short(json['ctw'])\n    if 'ctl' in json:\n        this['clock_lose'] = CheckCast.to_short(json['ctl'])\n    if 'lv' in json:\n        this['lv'] = CheckCast.to_short)\n    if 'win' in json:\n        this['win'] = CheckCast.to_short(json['win'])\n    if 'lose' in json:\n        this['lose'] = CheckCast.to_short(json['lose'])\n    if 'type' in json:\n        this['type'] = ENUM['QuestTypes'][json['type']]\n    if 'subtype' in json:\n        this['subtype'] = ENUM['SubQuestTypes'][json['subtype']]\n    #this.cond_quests=(string)null\n    #this.units.Clear()\n    if 'area' in json:\n        this['ChapterID'] = json['area']\n    if 'world' in json:\n        this['world'] = json['world']\n    if 'text' in json:\n        this['storyTextID'] = json['text']\n    if 'hide' in json:\n        this['hidden'] = json['hide']!=0\n    if 'replay_limit' in json:\n        this['replayLimit'] = json['replay_limit']!=0\n    if 'ticket' in json:\n        this['ticket'] = json['ticket']\n    if 'title' in json:\n        this['title'] = json['title']\n    if 'nav' in json:\n        this['navigation'] = json['nav']\n    if 'ajob' in json:\n        this['AllowedJobs'] = json['ajob']\n    #this.AllowedTags=(QuestParam.Tags)0\n    #if(!string.IsNullOrEmpty(json.atag))\n        #stringstrArray=json.atag.Split(',')\n        #for(intindex=0index<strArray.Length++index)\n            #if(!string.IsNullOrEmpty(strArray))\n            #this.AllowedTags|=(QuestParam.Tags)Enum.Parse(typeof(QuestParam.Tags),strArray)\n    if 'phyb' in json:\n        this['PhysBonus'] = json['phyb']+100\n    if 'magb' in json:\n        this['MagBonus'] = json['magb']+100\n    if 'bgnr' in json:\n        this['IsBeginner'] = 0!=json['bgnr']\n    if 'i_lyt' in json:\n        this['ItemLayout'] = json['i_lyt']\n    if 'not_search' in json:\n        this['notSearch'] = json['not_search']!=0\n    #ObjectiveParamobjective=MonoSingleton<GameManager>.GetInstanceDirect().FindObjective(json.mission)\n    #if(objective!=null)\n        #this.bonusObjective=newQuestBonusObjective[objective.objective.Length]\n        #for(intindex=0index<objective.objective.Length++index)\n            #this.bonusObjective=newQuestBonusObjective()\n            #this.bonusObjective.Type=(EMissionType)objective.objective.type\n            #this.bonusObjective.TypeParam=objective.objective.val\n            #this.bonusObjective.item=objective.objective.item\n            #this.bonusObjective.itemNum=objective.objective.num\n            #this.bonusObjective.itemType=(RewardType)objective.objective.item_type\n            #this.bonusObjective.IsTakeoverProgress=objective.objective.IsTakeoverProgress\n    #ObjectiveParamtowerObjective=MonoSingleton<GameManager>.GetInstanceDirect().FindTowerObjective(json.tower_mission)\n    #if(towerObjective!=null)\n        #this.bonusObjective=newQuestBonusObjective[towerObjective.objective.Length]\n        #for(intindex=0index<towerObjective.objective.Length++index)\n            #this.bonusObjective=newQuestBonusObjective()\n            #this.bonusObjective.Type=(EMissionType)towerObjective.objective.type\n            #this.bonusObjective.TypeParam=towerObjective.objective.val\n            #this.bonusObjective.item=towerObjective.objective.item\n            #this.bonusObjective.itemNum=towerObjective.objective.num\n            #this.bonusObjective.itemType=(RewardType)towerObjective.objective.item_type\n            #this.bonusObjective.IsTakeoverProgress=towerObjective.objective.IsTakeoverProgress\n        #this.mission_values=newint[towerObjective.objective.Length]\n    #MagnificationParammagnification=MonoSingleton<GameManager>.GetInstanceDirect().FindMagnification(json.atk_mag)\n    #if(magnification!=null&&magnification.atkMagnifications!=null)\n    #this.AtkTypeMags=magnification.atkMagnifications\n    #QuestCondParamquestCond1=MonoSingleton<GameManager>.GetInstanceDirect().FindQuestCond(json.rdy_cnd)\n    #if(questCond1!=null)\n    #this.EntryCondition=questCond1\n    #QuestCondParamquestCond2=MonoSingleton<GameManager>.GetInstanceDirect().FindQuestCond(json.rdy_cnd_ch)\n    #if(questCond2!=null)\n    #this.EntryConditionCh=questCond2\n    if 'mode' in json:\n        this['difficulty'] = ENUM['QuestDifficulties'][json['mode']]\n    #if(json.units!=null)\n        #this.units.Setup(json.units.Length)\n        #for(intindex=0index<json.units.Length++index)\n        #this.units.Set(index,json.units)\n    #if(json.cond_quests!=null)\n        #for(intindex=0index<json.cond_quests.Length++index)\n        if 'cond_quests' in json:\n            this['cond_quests'] = json['cond_quests']\n    #this.map.Clear()\n    #if(json.map!=null)\n        #for(intindex=0index<json.map.Length++index)\n            #MapParammapParam=newMapParam()\n            #mapParam.Deserialize(json.map)\n            #this.map.Add(mapParam)\n    if 'evst' in json:\n        this['event_start'] = json['evst']\n    if 'evw' in json:\n        this['event_clear'] = json['evw']\n    if 'retr' in json:\n        this['AllowRetreat'] = json['retr']==0\n    if 'naut' in json:\n        this['AllowAutoPlay'] = json['naut']==0||json['naut']==2\n    if 'naut' in json:\n        this['FirstAutoPlayProhibit'] = json['naut']==2\n    if 'swin' in json:\n        this['Silent'] = json['swin']!=0\n    if 'notabl' in json:\n        this['DisableAbilities'] = json['notabl']!=0\n    if 'notitm' in json:\n        this['DisableItems'] = json['notitm']!=0\n    if 'notcon' in json:\n        this['DisableContinue'] = json['notcon']!=0\n    if 'fix_editor' in json:\n        this['UseFixEditor'] = json['fix_editor']!=0\n    if 'is_no_start_voice' in json:\n        this['IsNoStartVoice'] = json['is_no_start_voice']!=0\n    if 'sprt' in json:\n        this['UseSupportUnit'] = json['sprt']==0\n    if 'is_unit_chg' in json:\n        this['IsUnitChange'] = json['is_unit_chg']!=0\n    if 'thumnail' in json:\n        this['VersusThumnail'] = json['thumnail']\n    if 'mskill' in json:\n        this['MapBuff'] = json['mskill']\n    if 'vsmovecnt' in json:\n        this['VersusMoveCount'] = json['vsmovecnt']\n    if 'dmg_up_pl' in json:\n        this['DamageUpprPl'] = json['dmg_up_pl']\n    if 'dmg_up_en' in json:\n        this['DamageUpprEn'] = json['dmg_up_en']\n    if 'dmg_rt_pl' in json:\n        this['DamageRatePl'] = json['dmg_rt_pl']\n    if 'dmg_rt_en' in json:\n        this['DamageRateEn'] = json['dmg_rt_en']\n    if 'extra' in json:\n        this['IsExtra'] = json['extra']==1\n    if 'review' in json:\n        this['ShowReviewPopup'] = json['review']==1\n    if 'is_multileader' in json:\n        this['IsMultiLeaderSkill'] = json['is_multileader']!=0\n    if 'me_id' in json:\n        this['MapEffectId'] = json['me_id']\n    if 'is_wth_no_chg' in json:\n        this['IsWeatherNoChange'] = json['is_wth_no_chg']!=0\n    if 'wth_set_id' in json:\n        this['WeatherSetId'] = json['wth_set_id']\n    #if(json.fclr_items!=null)\n        #for(intindex=0index<json.fclr_items.Length++index)\n        if 'fclr_items' in json:\n            this['FirstClearItems'] = json['fclr_items']\n    if 'party_id' in json:\n        this['questParty'] = MonoSingleton<GameManager>.GetInstanceDirect.FindQuestParty(json['party_id'])\nreturn this\n",
    "QuestPartyParam": "def QuestPartyParam(json):\n    this={}#QuestPartyParamjson)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'type_1' in json:\n        this['type_1'] = ENUM['PartySlotType'][json['type_1']]\n    if 'type_2' in json:\n        this['type_2'] = ENUM['PartySlotType'][json['type_2']]\n    if 'type_3' in json:\n        this['type_3'] = ENUM['PartySlotType'][json['type_3']]\n    if 'type_4' in json:\n        this['type_4'] = ENUM['PartySlotType'][json['type_4']]\n    if 'support_type' in json:\n        this['support_type'] = ENUM['PartySlotType'][json['support_type']]\n    if 'subtype_1' in json:\n        this['subtype_1'] = ENUM['PartySlotType'][json['subtype_1']]\n    if 'subtype_2' in json:\n        this['subtype_2'] = ENUM['PartySlotType'][json['subtype_2']]\n    if 'unit_1' in json:\n        this['unit_1'] = json['unit_1']\n    if 'unit_2' in json:\n        this['unit_2'] = json['unit_2']\n    if 'unit_3' in json:\n        this['unit_3'] = json['unit_3']\n    if 'unit_4' in json:\n        this['unit_4'] = json['unit_4']\n    if 'subunit_1' in json:\n        this['subunit_1'] = json['subunit_1']\n    if 'subunit_2' in json:\n        this['subunit_2'] = json['subunit_2']\n    if 'l_npc_rare' in json:\n        this['l_npc_rare'] = json['l_npc_rare']\n    #returntrue\nreturn this\n",
    "RaidAreaClearRewardDataParam": "def RaidAreaClearRewardDataParam(json):\n    this={}#RaidAreaClearRewardDataParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'round' in json:\n        this['mRound'] = json['round']\n    if 'reward_id' in json:\n        this['mRewardId'] = json['reward_id']\n    #returntrue\nreturn this\n",
    "RaidAreaClearRewardParam": "def RaidAreaClearRewardParam(json):\n    this={}#RaidAreaClearRewardParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['mId'] = json['id']\n    #this.mRewards=newList<RaidAreaClearRewardDataParam>()\n    #if(json.rewards!=null)\n        #for(intindex=0index<json.rewards.Length++index)\n            #RaidAreaClearRewardDataParamclearRewardDataParam=newRaidAreaClearRewardDataParam()\n            #if(clearRewardDataParam.Deserialize(json.rewards))\n            #this.mRewards.Add(clearRewardDataParam)\n    #returntrue\nreturn this\n",
    "RaidAreaParam": "def RaidAreaParam(json):\n    this={}#RaidAreaParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['mId'] = json['id']\n    if 'order' in json:\n        this['mOrder'] = json['order']\n    if 'period_id' in json:\n        this['mPeriodId'] = json['period_id']\n    if 'boss_count' in json:\n        this['mBossCount'] = json['boss_count']\n    if 'area_boss_id' in json:\n        this['mAreaBossId'] = json['area_boss_id']\n    if 'clear_reward_id' in json:\n        this['mClearRewardId'] = json['clear_reward_id']\n    #returntrue\nreturn this\n",
    "RaidBattleRewardParam": "def RaidBattleRewardParam(json):\n    this={}#RaidBattleRewardParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['mId'] = json['id']\n    #this.mRewards=newList<RaidBattleRewardWeightParam>()\n    #if(json.rewards!=null)\n        #for(intindex=0index<json.rewards.Length++index)\n            #RaidBattleRewardWeightParamrewardWeightParam=newRaidBattleRewardWeightParam()\n            #if(rewardWeightParam.Deserialize(json.rewards))\n            #this.mRewards.Add(rewardWeightParam)\n    #returntrue\nreturn this\n",
    "RaidBattleRewardWeightParam": "def RaidBattleRewardWeightParam(json):\n    this={}#RaidBattleRewardWeightParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'weight' in json:\n        this['mWeight'] = json['weight']\n    if 'reward_id' in json:\n        this['mRewardId'] = json['reward_id']\n    #returntrue\nreturn this\n",
    "RaidBeatRewardDataParam": "def RaidBeatRewardDataParam(json):\n    this={}#RaidBeatRewardDataParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'round' in json:\n        this['mRound'] = json['round']\n    if 'reward_id' in json:\n        this['mRewardId'] = json['reward_id']\n    #returntrue\nreturn this\n",
    "RaidBeatRewardParam": "def RaidBeatRewardParam(json):\n    this={}#RaidBeatRewardParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['mId'] = json['id']\n    #this.mRewards=newList<RaidBeatRewardDataParam>()\n    #if(json.rewards!=null)\n        #for(intindex=0index<json.rewards.Length++index)\n            #RaidBeatRewardDataParambeatRewardDataParam=newRaidBeatRewardDataParam()\n            #if(beatRewardDataParam.Deserialize(json.rewards))\n            #this.mRewards.Add(beatRewardDataParam)\n    #returntrue\nreturn this\n",
    "RaidBossData": "def RaidBossData(json):\n    this={}#RaidBossDatajson)\n    if 'uid' in json:\n        this['mOwnerUID'] = json['uid']\n    if 'name' in json:\n        this['mOwnerName'] = json['name']\n    if 'area_id' in json:\n        this['mAreaId'] = json['area_id']\n    #if(json.boss_info==null)\n    #returnfalse\n    #this.mRaidBossInfo=newRaidBossInfo()\n    #if(!this.mRaidBossInfo.Deserialize(json.boss_info))\n    #returnfalse\n    if 'sos_status' in json:\n        this['mSOSStatus'] = ENUM['RaidSOSStatus'][json['sos_status']]\n    #this.mSOSMember=newList<RaidSOSMember>()\n    #if(json.sos_member!=null)\n        #for(intindex=0index<json.sos_member.Length++index)\n            #RaidSOSMemberraidSosMember=newRaidSOSMember()\n            #if(!raidSosMember.Deserialize(json.sos_member))\n            #returnfalse\n            #this.mSOSMember.Add(raidSosMember)\n        #this.mSOSMember.Sort((Comparison<RaidSOSMember>)((a,b)=>(int)(b.LastBattleTime-a.LastBattleTime)))\n    #returntrue\nreturn this\n",
    "RaidBossInfo": "def RaidBossInfo(json):\n    this={}#RaidBossInfojson)\n    if 'no' in json:\n        this['mNo'] = json['no']\n    if 'boss_id' in json:\n        this['mBossId'] = json['boss_id']\n    if 'round' in json:\n        this['mRound'] = json['round']\n    if 'current_hp' in json:\n        this['mHP'] = json['current_hp']\n    if 'start_time' in json:\n        this['mStartTime'] = json['start_time']\n    if 'is_reward' in json:\n        this['mIsReward'] = json['is_reward']==1\n    if 'is_timeover' in json:\n        this['mIsTimeOver'] = json['is_timeover']==1\n    #this.mRaidBossParam=MonoSingleton<GameManager>.Instance.MasterParam.GetRaidBoss(this.mBossId)\n    #if(this.mRaidBossParam==null)\n    #returnfalse\n    #this.mMaxHP=RaidBossParam.CalcMaxHP(this.mRaidBossParam,this.mRound)\n    #returntrue\nreturn this\n",
    "RaidBossParam": "def RaidBossParam(json):\n    this={}#RaidBossParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['mId'] = json['id']\n    if 'stamp_index' in json:\n        this['mStampIndex'] = json['stamp_index']\n    if 'period_id' in json:\n        this['mPeriodId'] = json['period_id']\n    if 'weight' in json:\n        this['mWeight'] = json['weight']\n    if 'name' in json:\n        this['mName'] = json['name']\n    if 'hp' in json:\n        this['mHP'] = json['hp']\n    if 'unit_iname' in json:\n        this['mUnitIName'] = json['unit_iname']\n    if 'quest_iname' in json:\n        this['mQuestIName'] = json['quest_iname']\n    if 'time_limit' in json:\n        this['mTimeLimit'] = json['time_limit']\n    if 'battle_reward_id' in json:\n        this['mBattleRewardId'] = json['battle_reward_id']\n    if 'beat_reward_id' in json:\n        this['mBeatRewardId'] = json['beat_reward_id']\n    if 'damage_ratio_reward_id' in json:\n        this['mDamageRatioRewardId'] = json['damage_ratio_reward_id']\n    if 'buff_id' in json:\n        this['mBuffId'] = json['buff_id']\n    if 'is_boss' in json:\n        this['mIsBoss'] = json['is_boss']==1\n    #stringstrArray=this.mTimeLimit.Split(':')\n    #intnumArray=newint[3]\n    #if(strArray.Length==2)\n    #numArray[2]=0\n    #for(intindex=0index<strArray.Length++index)\n    #numArray=int.Parse(strArray)\n    #this.mTimeLimitSpan=newTimeSpan(numArray[0],numArray[1],numArray[2])\n    #returntrue\nreturn this\n",
    "RaidCompleteRewardDataParam": "def RaidCompleteRewardDataParam(json):\n    this={}#RaidCompleteRewardDataParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'round' in json:\n        this['mRound'] = json['round']\n    if 'reward_id' in json:\n        this['mRewardId'] = json['reward_id']\n    #returntrue\nreturn this\n",
    "RaidCompleteRewardParam": "def RaidCompleteRewardParam(json):\n    this={}#RaidCompleteRewardParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['mId'] = json['id']\n    #this.mRewards=newList<RaidCompleteRewardDataParam>()\n    #if(json.rewards!=null)\n        #for(intindex=0index<json.rewards.Length++index)\n            #RaidCompleteRewardDataParamcompleteRewardDataParam=newRaidCompleteRewardDataParam()\n            #if(completeRewardDataParam.Deserialize(json.rewards))\n            #this.mRewards.Add(completeRewardDataParam)\n    #returntrue\nreturn this\n",
    "RaidDamageRatioRewardParam": "def RaidDamageRatioRewardParam(json):\n    this={}#RaidDamageRatioRewardParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['mId'] = json['id']\n    #this.mRewards=newList<RaidDamageRatioRewardWeightParam>()\n    #if(json.rewards!=null)\n        #for(intindex=0index<json.rewards.Length++index)\n            #RaidDamageRatioRewardWeightParamrewardWeightParam=newRaidDamageRatioRewardWeightParam()\n            #if(rewardWeightParam.Deserialize(json.rewards))\n            #this.mRewards.Add(rewardWeightParam)\n    #returntrue\nreturn this\n",
    "RaidDamageRatioRewardRatioParam": "def RaidDamageRatioRewardRatioParam(json):\n    this={}#RaidDamageRatioRewardRatioParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'damage_ratio' in json:\n        this['mDamageRatio'] = json['damage_ratio']\n    if 'reward_id' in json:\n        this['mRewardId'] = json['reward_id']\n    #returntrue\nreturn this\n",
    "RaidPeriodParam": "def RaidPeriodParam(json):\n    this={}#RaidPeriodParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['mId'] = json['id']\n    if 'max_bp' in json:\n        this['mMaxBp'] = json['max_bp']\n    if 'add_bp_time' in json:\n        this['mAddBpTime'] = json['add_bp_time']\n    if 'bp_by_coin' in json:\n        this['mBpByCoin'] = json['bp_by_coin']\n    if 'rescue_member_max' in json:\n        this['mRescueMemberMax'] = json['rescue_member_max']\n    if 'rescure_send_interval' in json:\n        this['mRescureSendInterval'] = json['rescure_send_interval']\n    if 'complete_reward_id' in json:\n        this['mCompleteRewardId'] = json['complete_reward_id']\n    if 'round_buff_max' in json:\n        this['mRoundBuffMax'] = json['round_buff_max']\n    #this.mBeginAt=DateTime.MinValue\n    #if(!string.IsNullOrEmpty(json.begin_at))\n    #DateTime.TryParse(json.begin_at,outthis.mBeginAt)\n    #this.mEndAt=DateTime.MaxValue\n    #if(!string.IsNullOrEmpty(json.end_at))\n    #DateTime.TryParse(json.end_at,outthis.mEndAt)\n    #returntrue\nreturn this\n",
    "RaidRescueMember": "def RaidRescueMember(json):\n    this={}#RaidRescueMemberjson)\n    if 'uid' in json:\n        this['mUID'] = json['uid']\n    if 'name' in json:\n        this['mName'] = json['name']\n    if 'lv' in json:\n        this['mLv'] = json['lv']\n    if 'member_type' in json:\n        this['mMemberType'] = ENUM['RaidRescueMemberType'][json['member_type']]\n    if 'selected_award' in json:\n        this['mSelectedAward'] = json['selected_award']\n    if 'lastlogin' in json:\n        this['mLastLogin'] = TimeManager.FromUnixTimejson['lastlogin'])\n    if 'area_id' in json:\n        this['mAreaId'] = json['area_id']\n    if 'boss_id' in json:\n        this['mBossId'] = json['boss_id']\n    if 'round' in json:\n        this['mRound'] = json['round']\n    if 'current_hp' in json:\n        this['mCurrentHp'] = json['current_hp']\n    if 'start_time' in json:\n        this['mStartTime'] = json['start_time']\n    #if(json.unit!=null)\n        #this.mUnit=newUnitData()\n        #this.mUnit.Deserialize(json.unit)\n    #returntrue\nreturn this\n",
    "RaidReward": "def RaidReward(json):\n    this={}#RaidRewardjson)\n    if 'item_type' in json:\n        this['mType'] = ENUM['RaidRewardType'][json['item_type']]\n    if 'item_iname' in json:\n        this['mIName'] = json['item_iname']\n    if 'item_num' in json:\n        this['mNum'] = json['item_num']\n    #returntrue\nreturn this\n",
    "RaidRewardParam": "def RaidRewardParam(json):\n    this={}#RaidRewardParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['mId'] = json['id']\n    #this.mRewards=newList<RaidReward>()\n    #if(json.rewards!=null)\n        #for(intindex=0index<json.rewards.Length++index)\n            #RaidRewardraidReward=newRaidReward()\n            #if(raidReward.Deserialize(json.rewards))\n            #this.mRewards.Add(raidReward)\n    #returntrue\nreturn this\n",
    "RaidSOSMember": "def RaidSOSMember(json):\n    this={}#RaidSOSMemberjson)\n    if 'fuid' in json:\n        this['mFUID'] = json['fuid']\n    if 'name' in json:\n        this['mName'] = json['name']\n    if 'lv' in json:\n        this['mLv'] = json['lv']\n    if 'member_type' in json:\n        this['mMemberType'] = ENUM['RaidRescueMemberType'][json['member_type']]\n    if 'last_battle_time' in json:\n        this['mLastBattleTime'] = json['last_battle_time']\n    #if(json.unit!=null)\n        #this.mUnit=newUnitData()\n        #this.mUnit.Deserialize(json.unit)\n    #returntrue\nreturn this\n",
    "RankingQuestParam": "def RankingQuestParam(json):\n    this={}#RankingQuestParamjson)\n    if 'schedule_id' in json:\n        this['schedule_id'] = json['schedule_id']\n    #if(Enum.GetNames(typeof(RankingQuestType)).Length>json.type)\n    if 'type' in json:\n        this['type'] = ENUM['RankingQuestType'][json['type']]\n    #else\n    #DebugUtility.LogError(\"定義されていない列挙値が指定されようとしました\")\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'reward_id' in json:\n        this['reward_id'] = json['reward_id']\n    #returntrue\nreturn this\n",
    "RankingQuestRewardParam": "def RankingQuestRewardParam(json):\n    this={}#RankingQuestRewardParamjson)\n    if 'id' in json:\n        this['id'] = json['id']\n    #try\n        if 'type' in json:\n            this['type'] = ENUM['RankingQuestRewardType'][json['type']]\n    #catch\n        #DebugUtility.LogError(\"定義されていない列挙値が指定されようとしました\")\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'num' in json:\n        this['num'] = json['num']\n    #returntrue\nreturn this\n",
    "RankingQuestScheduleParam": "def RankingQuestScheduleParam(json):\n    this={}#RankingQuestScheduleParamjson)\n    if 'id' in json:\n        this['id'] = json['id']\n    #this.beginAt=DateTime.MinValue\n    #this.endAt=DateTime.MaxValue\n    #if(!string.IsNullOrEmpty(json.begin_at))\n    #DateTime.TryParse(json.begin_at,outthis.beginAt)\n    #if(!string.IsNullOrEmpty(json.end_at))\n    #DateTime.TryParse(json.end_at,outthis.endAt)\n    #this.reward_begin_at=DateTime.MinValue\n    #this.reward_end_at=DateTime.MaxValue\n    #if(!string.IsNullOrEmpty(json.reward_begin_at))\n    #DateTime.TryParse(json.reward_begin_at,outthis.reward_begin_at)\n    #if(!string.IsNullOrEmpty(json.reward_end_at))\n    #DateTime.TryParse(json.reward_end_at,outthis.reward_end_at)\n    #this.visible_begin_at=DateTime.MinValue\n    #this.visible_end_at=DateTime.MaxValue\n    #if(!string.IsNullOrEmpty(json.visible_begin_at))\n    #DateTime.TryParse(json.visible_begin_at,outthis.visible_begin_at)\n    #if(!string.IsNullOrEmpty(json.visible_end_at))\n    #DateTime.TryParse(json.visible_end_at,outthis.visible_end_at)\n    #returntrue\nreturn this\n",
    "RarityParam": "def RarityParam(json):\n    this={}#RarityParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'unitcap' in json:\n        this['UnitLvCap'] = json['unitcap']\n    if 'jobcap' in json:\n        this['UnitJobLvCap'] = json['jobcap']\n    if 'awakecap' in json:\n        this['UnitAwakeLvCap'] = json['awakecap']\n    if 'piece' in json:\n        this['UnitUnlockPieceNum'] = json['piece']\n    if 'ch_piece' in json:\n        this['UnitChangePieceNum'] = json['ch_piece']\n    if 'ch_piece_select' in json:\n        this['UnitSelectChangePieceNum'] = json['ch_piece_select']\n    if 'rareup_cost' in json:\n        this['UnitRarityUpCost'] = json['rareup_cost']\n    if 'gain_pp' in json:\n        this['PieceToPoint'] = json['gain_pp']\n    #if(this.EquipEnhanceParam==null)\n    #this.EquipEnhanceParam=newRarityEquipEnhanceParam()\n    #intlength=json.eq_enhcap+1\n    #this.EquipEnhanceParam.rankcap=(OInt)length\n    this['']\n    this['EquipEnhanceParam']\n    if 'eq_costscale' in json:\n        this['EquipEnhanceParam']['cost_scale'] = json['eq_costscale']\n    #this.EquipEnhanceParam.ranks=(RarityEquipEnhanceParam.RankParam)null\n    #if(length>0)\n        #if(json.eq_points==null||json.eq_num1==null||(json.eq_num2==null||json.eq_num3==null))\n        #returnfalse\n        #this.EquipEnhanceParam.ranks=newRarityEquipEnhanceParam.RankParam[length]\n        #for(intindex=0index<length++index)\n            #this.EquipEnhanceParam.ranks=newRarityEquipEnhanceParam.RankParam()\n            this['EquipEnhanceParam']\n            this['EquipEnhanceParam']['ranks']\n            if 'eq_points' in json:\n                this['EquipEnhanceParam']['ranks']['need_point'] = json['eq_points']\n        #stringstrArray=newstring[3]{json.eq_item1,json.eq_item2,json.eq_item3}\n        #intnumArray=newint[3]{json.eq_num1,json.eq_num2,json.eq_num3}\n        #for(intindex1=0index1<strArray.Length++index1)\n            #for(intindex2=0index2<length++index2)\n                #this.EquipEnhanceParam.ranks[index2].return_item[index1]=newReturnItem()\n                #this.EquipEnhanceParam.ranks[index2].return_item[index1].iname=strArray[index1]\n                #this.EquipEnhanceParam.ranks[index2].return_item[index1].num=(OInt)numArray[index1][index2]\n    if 'af_lvcap' in json:\n        this['ArtifactLvCap'] = json['af_lvcap']\n    if 'af_upcost' in json:\n        this['ArtifactCostRate'] = json['af_upcost']\n    if 'af_unlock' in json:\n        this['ArtifactCreatePieceNum'] = json['af_unlock']\n    if 'af_gousei' in json:\n        this['ArtifactGouseiPieceNum'] = json['af_gousei']\n    if 'af_change' in json:\n        this['ArtifactChangePieceNum'] = json['af_change']\n    if 'af_unlock_cost' in json:\n        this['ArtifactCreateCost'] = json['af_unlock_cost']\n    if 'af_gousei_cost' in json:\n        this['ArtifactRarityUpCost'] = json['af_gousei_cost']\n    if 'af_change_cost' in json:\n        this['ArtifactChangeCost'] = json['af_change_cost']\n    this['']\n    this['GrowStatus']\n    if 'hp' in json:\n        this['GrowStatus']['hp'] = json['hp']\n    this['GrowStatus']\n    if 'mp' in json:\n        this['GrowStatus']['mp'] = json['mp']\n    this['GrowStatus']\n    if 'atk' in json:\n        this['GrowStatus']['atk'] = json['atk']\n    this['GrowStatus']\n    if 'def' in json:\n        this['GrowStatus']['def'] = json['def']\n    this['GrowStatus']\n    if 'mag' in json:\n        this['GrowStatus']['mag'] = json['mag']\n    this['GrowStatus']\n    if 'mnd' in json:\n        this['GrowStatus']['mnd'] = json['mnd']\n    this['GrowStatus']\n    if 'dex' in json:\n        this['GrowStatus']['dex'] = json['dex']\n    this['GrowStatus']\n    if 'spd' in json:\n        this['GrowStatus']['spd'] = json['spd']\n    this['GrowStatus']\n    if 'cri' in json:\n        this['GrowStatus']['cri'] = json['cri']\n    this['GrowStatus']\n    if 'luk' in json:\n        this['GrowStatus']['luk'] = json['luk']\n    if 'drop' in json:\n        this['DropSE'] = json['drop']\n    if 'card_lvcap' in json:\n        this['ConceptCardLvCap'] = json['card_lvcap']\n    if 'card_awake_count' in json:\n        this['ConceptCardAwakeCountMax'] = json['card_awake_count']\n    #returntrue\nreturn this\n",
    "RecipeParam": "def RecipeParam(json):\n    this={}#RecipeParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'cost' in json:\n        this['cost'] = json['cost']\n    #intlength=0\n    #stringstrArray=newstring[5]{json.mat1,json.mat2,json.mat3,json.mat4,json.mat5}\n    #for(intindex=0index<strArray.Length&&!string.IsNullOrEmpty(strArray)++index)\n    #++length\n    #if(length>0)\n        #intnumArray=newint[5]{json.num1,json.num2,json.num3,json.num4,json.num5}\n        #this.items=newRecipeItem[length]\n        #for(intindex=0index<length++index)\n            #this.items=newRecipeItem()\n            #this.items.iname=strArray\n            #this.items.num=numArray\n    #returntrue\nreturn this\n",
    "SectionParam": "def SectionParam(json):\n    this={}#SectionParamjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'expr' in json:\n        this['expr'] = json['expr']\n    if 'start' in json:\n        this['start'] = json['start']\n    if 'end' in json:\n        this['end'] = json['end']\n    if 'hide' in json:\n        this['hidden'] = json['hide']!=0\n    if 'home' in json:\n        this['home'] = json['home']\n    if 'unit' in json:\n        this['unit'] = json['unit']\n    if 'item' in json:\n        this['prefabPath'] = json['item']\n    if 'shop' in json:\n        this['shop'] = json['shop']\n    if 'inn' in json:\n        this['inn'] = json['inn']\n    if 'bar' in json:\n        this['bar'] = json['bar']\n    if 'bgm' in json:\n        this['bgm'] = json['bgm']\n    if 'story_part' in json:\n        this['storyPart'] = json['story_part']\n    if 'release_key_quest' in json:\n        this['releaseKeyQuest'] = json['release_key_quest']\n    if 'message_sys_id' in json:\n        this['message_sys_id'] = json['message_sys_id']\nreturn this\n",
    "ShopParam": "def ShopParam(json):\n    this={}#ShopParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'upd_type' in json:\n        this['UpdateCostType'] = ENUM['ESaleType'][json['upd_type']]\n    #this.UpdateCosts=(int)null\n    #if(json.upd_costs!=null&&json.upd_costs.Length>0)\n        #for(intindex=0index<json.upd_costs.Length++index)\n        if 'upd_costs' in json:\n            this['UpdateCosts'] = json['upd_costs']\n    #returntrue\nreturn this\n",
    "SimpleDropTableParam": "def SimpleDropTableParam(json):\n    this={}#SimpleDropTableParamjson)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'droplist' in json:\n        this['dropList'] = json['droplist']\n    if 'dropcards' in json:\n        this['dropcards'] = json['dropcards']\n    #this.beginAt=DateTime.MinValue\n    #this.endAt=DateTime.MaxValue\n    #if(!string.IsNullOrEmpty(json.begin_at))\n    #DateTime.TryParse(json.begin_at,outthis.beginAt)\n    #if(!string.IsNullOrEmpty(json.end_at))\n    #DateTime.TryParse(json.end_at,outthis.endAt)\n    #returntrue\nreturn this\n",
    "SimpleLocalMapsParam": "def SimpleLocalMapsParam(json):\n    this={}#SimpleLocalMapsParamjson)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'droplist' in json:\n        this['droplist'] = json['droplist']\n    #returntrue\nreturn this\n",
    "SimpleQuestDropParam": "def SimpleQuestDropParam(json):\n    this={}#SimpleQuestDropParamjson)\n    if 'iname' in json:\n        this['item_iname'] = json['iname']\n    if 'questlist' in json:\n        this['questlist'] = json['questlist']\n    #returntrue\nreturn this\n",
    "SkillAbilityDeriveParam": "def SkillAbilityDeriveParam(json):\n    this={}#SkillAbilityDeriveParamjson)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    #ESkillAbilityDeriveCondsarray1=((IEnumerable<ESkillAbilityDeriveConds>)newESkillAbilityDeriveConds[3]{(ESkillAbilityDeriveConds)json.trig_type_1,(ESkillAbilityDeriveConds)json.trig_type_2,(ESkillAbilityDeriveConds)json.trig_type_3}).Where<ESkillAbilityDeriveConds>((Func<ESkillAbilityDeriveConds,bool>)(trig_type=>trig_type!=ESkillAbilityDeriveConds.Unknown)).ToArray<ESkillAbilityDeriveConds>()\n    #stringarray2=((IEnumerable<string>)newstring[3]{json.trig_iname_1,json.trig_iname_2,json.trig_iname_3}).Where<string>((Func<string,bool>)(trig_iname=>!string.IsNullOrEmpty(trig_iname))).ToArray<string>()\n    #this.deriveTriggers=newSkillAbilityDeriveTriggerParam[array2.Length]\n    #for(intindex=0index<array2.Length++index)\n    #this.deriveTriggers=newSkillAbilityDeriveTriggerParam(array1,array2)\n    #if(json.base_abils!=null)\n        #for(intindex=0index<this.base_abils.Length++index)\n        if 'base_abils' in json:\n            this['base_abils'] = json['base_abils']\n    #if(json.derive_abils!=null)\n        #for(intindex=0index<this.derive_abils.Length++index)\n        if 'derive_abils' in json:\n            this['derive_abils'] = json['derive_abils']\n    #if(json.base_skills!=null)\n        #for(intindex=0index<this.base_skills.Length++index)\n        if 'base_skills' in json:\n            this['base_skills'] = json['base_skills']\n    #if(json.base_skills==null)\n    #return\n    #for(intindex=0index<this.derive_skills.Length++index)\n    if 'derive_skills' in json:\n        this['derive_skills'] = json['derive_skills']\nreturn this\n",
    "SkillMotionDataParam": "def SkillMotionDataParam(json):\n    this={}#SkillMotionDataParamjson)\n    #if(json==null)\n    #return\n    #if(json.unit_ids!=null)\n        #for(intindex=0index<json.unit_ids.Length++index)\n        #this.mUnitList.Add(json.unit_ids)\n    #if(json.job_ids!=null)\n        #for(intindex=0index<json.job_ids.Length++index)\n        #this.mJobList.Add(json.job_ids)\n    if 'motnm' in json:\n        this['mMotionId'] = json['motnm']\n    #this.mFlags=(SkillMotionDataParam.Flags)0\n    #if(json.isbtl==0)\n    #return\n    #this.mFlags|=SkillMotionDataParam.Flags.IsBattleScene\nreturn this\n",
    "SkillMotionParam": "def SkillMotionParam(json):\n    this={}#SkillMotionParamjson)\n    #if(json==null)\n    #return\n    if 'iname' in json:\n        this['mIname'] = json['iname']\n    #if(json.datas==null)\n    #return\n    if 'datas' in json:\n        this['mDataList'] = newList<SkillMotionDataParam>\n    #for(intindex=0index<json.datas.Length++index)\n        #SkillMotionDataParamskillMotionDataParam=newSkillMotionDataParam()\n        #skillMotionDataParam.Deserialize(json.datas)\n        #this.mDataList.Add(skillMotionDataParam)\nreturn this\n",
    "SkillParam": "def SkillParam(json):\n    this={}#SkillParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'expr' in json:\n        this['expr'] = json['expr']\n    if 'motnm' in json:\n        this['motion'] = json['motnm']\n    if 'effnm' in json:\n        this['effect'] = json['effnm']\n    if 'effdef' in json:\n        this['defend_effect'] = json['effdef']\n    if 'weapon' in json:\n        this['weapon'] = json['weapon']\n    if 'tktag' in json:\n        this['tokkou'] = json['tktag']\n    if 'tkrate' in json:\n        this['tk_rate'] = json['tkrate']\n    if 'type' in json:\n        this['type'] = ENUM['ESkillType'][json['type']]\n    if 'timing' in json:\n        this['timing'] = ENUM['ESkillTiming'][json['timing']]\n    if 'cond' in json:\n        this['condition'] = ENUM['ESkillCondition'][json['cond']]\n    if 'target' in json:\n        this['target'] = ENUM['ESkillTarget'][json['target']]\n    if 'line' in json:\n        this['line_type'] = ENUM['ELineType'][json['line']]\n    if 'cap' in json:\n        this['lvcap'] = json['cap']\n    if 'cost' in json:\n        this['cost'] = json['cost']\n    if 'count' in json:\n        this['count'] = json['count']\n    if 'rate' in json:\n        this['rate'] = json['rate']\n    if 'sran' in json:\n        this['select_range'] = ENUM['ESelectType'][json['sran']]\n    if 'rangemin' in json:\n        this['range_min'] = json['rangemin']\n    if 'range' in json:\n        this['range_max'] = json['range']\n    if 'ssco' in json:\n        this['select_scope'] = ENUM['ESelectType'][json['ssco']]\n    if 'scope' in json:\n        this['scope'] = json['scope']\n    if 'eff_h' in json:\n        this['effect_height'] = json['eff_h']\n    if 'bdb' in json:\n        this['back_defrate'] = json['bdb']\n    if 'sdb' in json:\n        this['side_defrate'] = json['sdb']\n    if 'idr' in json:\n        this['ignore_defense_rate'] = json['idr']\n    if 'job' in json:\n        this['job'] = json['job']\n    if 'scn' in json:\n        this['SceneName'] = json['scn']\n    if 'scn_bu' in json:\n        this['SceneNameBigUnit'] = json['scn_bu']\n    if 'combo_num' in json:\n        this['ComboNum'] = json['combo_num']\n    if 'combo_rate' in json:\n        this['ComboDamageRate'] = (100-Math.Abs(json['combo_rate']))\n    if 'is_cri' in json:\n        this['IsCritical'] = (json['is_cri']!=0)\n    if 'jdtype' in json:\n        this['JewelDamageType'] = ENUM['JewelDamageTypes'][json['jdtype']]\n    if 'jdv' in json:\n        this['JewelDamageValue'] = json['jdv']\n    if 'jdabs' in json:\n        this['IsJewelAbsorb'] = (json['jdabs']!=0)\n    if 'dupli' in json:\n        this['DuplicateCount'] = json['dupli']\n    if 'cs_main_id' in json:\n        this['CollaboMainId'] = json['cs_main_id']\n    if 'cs_height' in json:\n        this['CollaboHeight'] = json['cs_height']\n    if 'kb_rate' in json:\n        this['KnockBackRate'] = json['kb_rate']\n    if 'kb_val' in json:\n        this['KnockBackVal'] = json['kb_val']\n    if 'kb_dir' in json:\n        this['KnockBackDir'] = ENUM['eKnockBackDir'][json['kb_dir']]\n    if 'kb_ds' in json:\n        this['KnockBackDs'] = ENUM['eKnockBackDs'][json['kb_ds']]\n    if 'dmg_dt' in json:\n        this['DamageDispType'] = ENUM['eDamageDispType'][json['dmg_dt']]\n    #this.ReplaceTargetIdLists=(List<string>)null\n    #if(json.rp_tgt_ids!=null)\n        #this.ReplaceTargetIdLists=newList<string>()\n        #foreach(stringrpTgtIdinjson.rp_tgt_ids)\n        #this.ReplaceTargetIdLists.Add(rpTgtId)\n    #this.ReplaceChangeIdLists=(List<string>)null\n    #if(json.rp_chg_ids!=null&&this.ReplaceTargetIdLists!=null)\n        #this.ReplaceChangeIdLists=newList<string>()\n        #foreach(stringrpChgIdinjson.rp_chg_ids)\n        #this.ReplaceChangeIdLists.Add(rpChgId)\n    #if(this.ReplaceTargetIdLists!=null&&this.ReplaceChangeIdLists!=null&&this.ReplaceTargetIdLists.Count!=this.ReplaceChangeIdLists.Count)\n        #this.ReplaceTargetIdLists.Clear()\n        #this.ReplaceChangeIdLists.Clear()\n    #this.AbilityReplaceTargetIdLists=(List<string>)null\n    #if(json.ab_rp_tgt_ids!=null)\n        #this.AbilityReplaceTargetIdLists=newList<string>()\n        #foreach(stringabRpTgtIdinjson.ab_rp_tgt_ids)\n        #this.AbilityReplaceTargetIdLists.Add(abRpTgtId)\n    #this.AbilityReplaceChangeIdLists=(List<string>)null\n    #if(json.ab_rp_chg_ids!=null&&this.AbilityReplaceTargetIdLists!=null)\n        #this.AbilityReplaceChangeIdLists=newList<string>()\n        #foreach(stringabRpChgIdinjson.ab_rp_chg_ids)\n        #this.AbilityReplaceChangeIdLists.Add(abRpChgId)\n    #if(this.AbilityReplaceTargetIdLists!=null&&this.AbilityReplaceChangeIdLists!=null&&this.AbilityReplaceTargetIdLists.Count!=this.AbilityReplaceChangeIdLists.Count)\n        #this.AbilityReplaceTargetIdLists.Clear()\n        #this.AbilityReplaceChangeIdLists.Clear()\n    if 'cs_voice' in json:\n        this['CollaboVoiceId'] = json['cs_voice']\n    if 'cs_vp_df' in json:\n        this['CollaboVoicePlayDelayFrame'] = json['cs_vp_df']\n    if 'tl_type' in json:\n        this['TeleportType'] = ENUM['eTeleportType'][json['tl_type']]\n    if 'tl_target' in json:\n        this['TeleportTarget'] = ENUM['ESkillTarget'][json['tl_target']]\n    if 'tl_height' in json:\n        this['TeleportHeight'] = json['tl_height']\n    if 'tl_is_mov' in json:\n        this['TeleportIsMove'] = json['tl_is_mov']!=0\n    if 'tsk_pos' in json:\n        this['TeleportSkillPos'] = ENUM['eTeleportSkillPos'][json['tsk_pos']]\n    if 'tr_id' in json:\n        this['TrickId'] = json['tr_id']\n    if 'tr_set' in json:\n        this['TrickSetType'] = ENUM['eTrickSetType'][json['tr_set']]\n    if 'bo_id' in json:\n        this['BreakObjId'] = json['bo_id']\n    if 'me_desc' in json:\n        this['MapEffectDesc'] = json['me_desc']\n    if 'wth_rate' in json:\n        this['WeatherRate'] = json['wth_rate']\n    if 'wth_id' in json:\n        this['WeatherId'] = json['wth_id']\n    if 'elem_tk' in json:\n        this['ElementSpcAtkRate'] = json['elem_tk']\n    if 'max_dmg' in json:\n        this['MaxDamageValue'] = json['max_dmg']\n    if 'ci_cc_id' in json:\n        this['CutInConceptCardId'] = json['ci_cc_id']\n    if 'jhp_val' in json:\n        this['JudgeHpVal'] = json['jhp_val']\n    if 'jhp_calc' in json:\n        this['JudgeHpCalc'] = ENUM['SkillParamCalcTypes'][json['jhp_calc']]\n    if 'ac_fr_ab_id' in json:\n        this['AcFromAbilId'] = json['ac_fr_ab_id']\n    if 'ac_to_ab_id' in json:\n        this['AcToAbilId'] = json['ac_to_ab_id']\n    if 'ac_turn' in json:\n        this['AcTurn'] = json['ac_turn']\n    if 'eff_htnrate' in json:\n        this['EffectHitTargetNumRate'] = json['eff_htnrate']\n    if 'aag' in json:\n        this['AbsorbAndGive'] = ENUM['eAbsorbAndGive'][json['aag']]\n    if 'target_ex' in json:\n        this['TargetEx'] = ENUM['eSkillTargetEx'][json['target_ex']]\n    if 'jmp_tk' in json:\n        this['JumpSpcAtkRate'] = json['jmp_tk']\n    if 'dtu_id' in json:\n        this['DynamicTransformUnitId'] = json['dtu_id']\n    if 'sm_id' in json:\n        this['SkillMotionId'] = json['sm_id']\n    #this.flags=(SkillFlags)0\n    #if(json.cutin!=0)\n    #this.flags|=SkillFlags.ExecuteCutin\n    #if(json.isbtl!=0)\n    #this.flags|=SkillFlags.ExecuteInBattle\n    #if(json.chran!=0)\n    #this.flags|=SkillFlags.EnableChangeRange\n    #if(json.sonoba!=0)\n    #this.flags|=SkillFlags.SelfTargetSelect\n    #if(json.pierce!=0)\n    #this.flags|=SkillFlags.PierceAttack\n    #if(json.hbonus!=0)\n    #this.flags|=SkillFlags.EnableHeightRangeBonus\n    #if(json.ehpa!=0)\n    #this.flags|=SkillFlags.EnableHeightParamAdjust\n    #if(json.utgt!=0)\n    #this.flags|=SkillFlags.EnableUnitLockTarget\n    #if(json.ctbreak!=0)\n    #this.flags|=SkillFlags.CastBreak\n    #if(json.mpatk!=0)\n    #this.flags|=SkillFlags.JewelAttack\n    #if(json.fhit!=0)\n    #this.flags|=SkillFlags.ForceHit\n    #if(json.suicide!=0)\n    #this.flags|=SkillFlags.Suicide\n    #if(json.sub_actuate!=0)\n    #this.flags|=SkillFlags.SubActuate\n    #if(json.is_fixed!=0)\n    #this.flags|=SkillFlags.FixedDamage\n    #if(json.f_ulock!=0)\n    #this.flags|=SkillFlags.ForceUnitLock\n    #if(json.ad_react!=0)\n    #this.flags|=SkillFlags.AllDamageReaction\n    #if(json.ig_elem!=0)\n    #this.flags|=SkillFlags.IgnoreElement\n    #if(json.is_pre_apply!=0)\n    #this.flags|=SkillFlags.PrevApply\n    #if(json.jhp_over!=0)\n    #this.flags|=SkillFlags.JudgeHpOver\n    #if(json.is_mhm_dmg!=0)\n    #this.flags|=SkillFlags.MhmDamage\n    #if(json.ac_is_self!=0)\n    #this.flags|=SkillFlags.AcSelf\n    #if(json.ac_is_reset!=0)\n    #this.flags|=SkillFlags.AcReset\n    #if(json.is_htndiv!=0)\n    #this.flags|=SkillFlags.HitTargetNumDiv\n    #if(json.is_no_ccc!=0)\n    #this.flags|=SkillFlags.NoChargeCalcCT\n    #if(json.jmpbreak!=0)\n    #this.flags|=SkillFlags.JumpBreak\n    if 'hp_cost' in json:\n        this['hp_cost'] = json['hp_cost']\n    if 'hp_cost_rate' in json:\n        this['hp_cost_rate'] = Math.Min(Math.Max(json['hp_cost_rate'],0),100)\n    if 'rhit' in json:\n        this['random_hit_rate'] = json['rhit']\n    if 'eff_type' in json:\n        this['effect_type'] = ENUM['SkillEffectTypes'][json['eff_type']]\n    if 'eff_calc' in json:\n        this['effect_calc'] = ENUM['SkillParamCalcTypes'][json['eff_calc']]\n    #this.effect_rate=newSkillRankUpValue()\n    this['']\n    this['effect_rate']\n    if 'eff_rate_ini' in json:\n        this['effect_rate']['ini'] = json['eff_rate_ini']\n    this['effect_rate']\n    if 'eff_rate_max' in json:\n        this['effect_rate']['max'] = json['eff_rate_max']\n    #this.effect_value=newSkillRankUpValue()\n    this['']\n    this['effect_value']\n    if 'eff_val_ini' in json:\n        this['effect_value']['ini'] = json['eff_val_ini']\n    this['effect_value']\n    if 'eff_val_max' in json:\n        this['effect_value']['max'] = json['eff_val_max']\n    #this.effect_range=newSkillRankUpValue()\n    this['']\n    this['effect_range']\n    if 'eff_range_ini' in json:\n        this['effect_range']['ini'] = json['eff_range_ini']\n    this['effect_range']\n    if 'eff_range_max' in json:\n        this['effect_range']['max'] = json['eff_range_max']\n    if 'eff_hprate' in json:\n        this['effect_hprate'] = json['eff_hprate']\n    if 'eff_mprate' in json:\n        this['effect_mprate'] = json['eff_mprate']\n    if 'eff_durate' in json:\n        this['effect_dead_rate'] = json['eff_durate']\n    if 'eff_lvrate' in json:\n        this['effect_lvrate'] = json['eff_lvrate']\n    if 'atk_type' in json:\n        this['attack_type'] = ENUM['AttackTypes'][json['atk_type']]\n    if 'atk_det' in json:\n        this['attack_detail'] = ENUM['AttackDetailTypes'][json['atk_det']]\n    if 'elem' in json:\n        this['element_type'] = ENUM['EElement'][json['elem']]\n    #this.element_value=(SkillRankUpValue)null\n    #if(this.element_type!=EElement.None)\n        #this.element_value=newSkillRankUpValue()\n        this['']\n        this['element_value']\n        if 'elem_ini' in json:\n            this['element_value']['ini'] = json['elem_ini']\n        this['element_value']\n        if 'elem_max' in json:\n            this['element_value']['max'] = json['elem_max']\n    if 'ct_type' in json:\n        this['cast_type'] = ENUM['ECastTypes'][json['ct_type']]\n    #this.cast_speed=(SkillRankUpValue)null\n    if 'ct_spd_ini' in json:\n        this['type'] = =ESkillType.Skill&&)\n        #this.cast_speed=newSkillRankUpValue()\n        this['']\n        this['cast_speed']\n        if 'ct_spd_ini' in json:\n            this['cast_speed']['ini'] = json['ct_spd_ini']\n        this['cast_speed']\n        if 'ct_spd_max' in json:\n            this['cast_speed']['max'] = json['ct_spd_max']\n    if 'abs_d_rate' in json:\n        this['absorb_damage_rate'] = json['abs_d_rate']\n    if 'react_d_type' in json:\n        this['reaction_damage_type'] = ENUM['DamageTypes'][json['react_d_type']]\n    #this.reaction_det_lists=(List<AttackDetailTypes>)null\n    #if(json.react_dets!=null)\n        #this.reaction_det_lists=newList<AttackDetailTypes>()\n        #foreach(AttackDetailTypesreactDetinjson.react_dets)\n        #this.reaction_det_lists.Add(reactDet)\n    #this.control_ct_rate=(SkillRankUpValue)null\n    #this.control_ct_value=(SkillRankUpValue)null\n    if 'ct_val_ini' in json:\n        this['control_ct_calc'] = =SkillParamCalcTypes.Fixed||json['ct_val_ini']!=0||json.ct_val_max!=0)\n        #this.control_ct_rate=newSkillRankUpValue()\n        this['']\n        this['control_ct_rate']\n        if 'ct_rate_ini' in json:\n            this['control_ct_rate']['ini'] = json['ct_rate_ini']\n        this['control_ct_rate']\n        if 'ct_rate_max' in json:\n            this['control_ct_rate']['max'] = json['ct_rate_max']\n        #this.control_ct_value=newSkillRankUpValue()\n        this['']\n        this['control_ct_value']\n        if 'ct_val_ini' in json:\n            this['control_ct_value']['ini'] = json['ct_val_ini']\n        this['control_ct_value']\n        if 'ct_val_max' in json:\n            this['control_ct_value']['max'] = json['ct_val_max']\n        if 'ct_calc' in json:\n            this['control_ct_calc'] = ENUM['SkillParamCalcTypes'][json['ct_calc']]\n    if 't_buff' in json:\n        this['target_buff_iname'] = json['t_buff']\n    if 't_cond' in json:\n        this['target_cond_iname'] = json['t_cond']\n    if 's_buff' in json:\n        this['self_buff_iname'] = json['s_buff']\n    if 's_cond' in json:\n        this['self_cond_iname'] = json['s_cond']\n    if 'shield_type' in json:\n        this['shield_type'] = ENUM['ShieldTypes'][json['shield_type']]\n    if 'shield_d_type' in json:\n        this['shield_damage_type'] = ENUM['DamageTypes'][json['shield_d_type']]\n    #this.shield_turn=(SkillRankUpValue)null\n    #this.shield_value=(SkillRankUpValue)null\n    #if(this.shield_type!=ShieldTypes.None&&this.shield_damage_type!=DamageTypes.None)\n        #this.shield_turn=newSkillRankUpValue()\n        this['']\n        this['shield_turn']\n        if 'shield_turn_ini' in json:\n            this['shield_turn']['ini'] = json['shield_turn_ini']\n        this['shield_turn']\n        if 'shield_turn_max' in json:\n            this['shield_turn']['max'] = json['shield_turn_max']\n        #this.shield_value=newSkillRankUpValue()\n        this['']\n        this['shield_value']\n        if 'shield_ini' in json:\n            this['shield_value']['ini'] = json['shield_ini']\n        this['shield_value']\n        if 'shield_max' in json:\n            this['shield_value']['max'] = json['shield_max']\n        #if(json.shield_reset!=0)\n        #this.flags|=SkillFlags.ShieldReset\n    #if(this.reaction_damage_type!=DamageTypes.None||this.shield_damage_type!=DamageTypes.None)\n        #this.control_damage_rate=newSkillRankUpValue()\n        this['']\n        this['control_damage_rate']\n        if 'ctrl_d_rate_ini' in json:\n            this['control_damage_rate']['ini'] = json['ctrl_d_rate_ini']\n        this['control_damage_rate']\n        if 'ctrl_d_rate_max' in json:\n            this['control_damage_rate']['max'] = json['ctrl_d_rate_max']\n        #this.control_damage_value=newSkillRankUpValue()\n        this['']\n        this['control_damage_value']\n        if 'ctrl_d_ini' in json:\n            this['control_damage_value']['ini'] = json['ctrl_d_ini']\n        this['control_damage_value']\n        if 'ctrl_d_max' in json:\n            this['control_damage_value']['max'] = json['ctrl_d_max']\n        if 'ctrl_d_calc' in json:\n            this['control_damage_calc'] = ENUM['SkillParamCalcTypes'][json['ctrl_d_calc']]\n    #SkillEffectTypeseffectType=this.effect_type\n    #switch(effectType)\n        #caseSkillEffectTypes.Teleport:\n        #caseSkillEffectTypes.Changing:\n        #caseSkillEffectTypes.Throw:\n        #this.scope=(OInt)0\n        #this.select_scope=ESelectType.Cross\n        #break\n        #caseSkillEffectTypes.RateDamage:\n        #if(this.attack_type==AttackTypes.None)\n            #this.attack_type=AttackTypes.PhyAttack\n            #break\n        #break\n        #default:\n        #if(effectType==SkillEffectTypes.Attack||effectType==SkillEffectTypes.ReflectDamage||effectType==SkillEffectTypes.RateDamageCurrent)\n        #gotocaseSkillEffectTypes.RateDamage\n        #else\n        #break\n    #if(this.select_range==ESelectType.Laser)\n        #this.select_scope=ESelectType.Laser\n        #this.scope=(OInt)Math.Max((int)this.scope,1)\n    #else\n        #switch(this.select_range)\n            #caseESelectType.LaserSpread:\n            #this.select_scope=ESelectType.LaserSpread\n            #break\n            #caseESelectType.LaserWide:\n            #this.select_scope=ESelectType.LaserWide\n            #break\n            #caseESelectType.LaserTwin:\n            #this.select_scope=ESelectType.LaserTwin\n            #break\n            #caseESelectType.LaserTriple:\n            #this.select_scope=ESelectType.LaserTriple\n            #break\n        #switch(this.select_scope)\n            #caseESelectType.LaserSpread:\n            #caseESelectType.LaserWide:\n            #caseESelectType.LaserTwin:\n            #caseESelectType.LaserTriple:\n            #this.scope=(OInt)1\n            #break\n    #if(this.TeleportType!=eTeleportType.None)\n        #if(!this.IsTargetGridNoUnit&&this.TeleportType!=eTeleportType.BeforeSkill)\n        #this.target=ESkillTarget.GridNoUnit\n        #if(this.IsTargetTeleport)\n            #if(this.IsCastSkill())\n            #this.cast_speed=(SkillRankUpValue)null\n            #if((int)this.scope!=0)\n            #this.scope=(OInt)0\n    #if(this.IsTargetValidGrid&&!this.IsTrickSkill())\n    #this.target=ESkillTarget.GridNoUnit\n    #if(this.timing==ESkillTiming.Auto&&this.effect_type==SkillEffectTypes.Attack)\n    #this.effect_type=SkillEffectTypes.Buff\n    #returntrue\nreturn this\n",
    "StatusCoefficientParam": "def StatusCoefficientParam(json):\n    this={}#StatusCoefficientParamjson)\n    #if(json==null)\n    #return\n    if 'hp' in json:\n        this['mHP'] = json['hp']\n    if 'atk' in json:\n        this['mAttack'] = json['atk']\n    if 'def' in json:\n        this['mDefense'] = json['def']\n    if 'matk' in json:\n        this['mMagAttack'] = json['matk']\n    if 'mdef' in json:\n        this['mMagDefense'] = json['mdef']\n    if 'dex' in json:\n        this['mDex'] = json['dex']\n    if 'spd' in json:\n        this['mSpeed'] = json['spd']\n    if 'cri' in json:\n        this['mCritical'] = json['cri']\n    if 'luck' in json:\n        this['mLuck'] = json['luck']\n    if 'cmb' in json:\n        this['mCombo'] = json['cmb']\n    if 'move' in json:\n        this['mMove'] = json['move']\n    if 'jmp' in json:\n        this['mJump'] = json['jmp']\nreturn this\n",
    "TipsParam": "def TipsParam(json):\n    this={}#TipsParamjson)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'type' in json:\n        this['type'] = ENUM['ETipsType'][json['type']]\n    if 'order' in json:\n        this['order'] = json['order']\n    if 'title' in json:\n        this['title'] = json['title']\n    if 'text' in json:\n        this['text'] = json['text']\n    if 'images' in json:\n        this['images'] = json['images']\n    if 'hide' in json:\n        this['hide'] = json['hide']!=0\n    if 'cond_text' in json:\n        this['cond_text'] = json['cond_text']\nreturn this\n",
    "TobiraCategoriesParam": "def TobiraCategoriesParam(json):\n    this={}#TobiraCategoriesParamjson)\n    #if(json==null)\n    #return\n    if 'category' in json:\n        this['mCategory'] = json['category']\n    if 'name' in json:\n        this['mName'] = json['name']\nreturn this\n",
    "TobiraConditionParam": "def TobiraConditionParam(json):\n    this={}#TobiraConditionParamjson)\n    #if(json==null)\n    #return\n    if 'conds_type' in json:\n        this['mCondType'] = json['conds_type']\n    if 'conds_iname' in json:\n        this['mCondIname'] = json['conds_iname']\nreturn this\n",
    "TobiraCondsParam": "def TobiraCondsParam(json):\n    this={}#TobiraCondsParamjson)\n    #if(json==null)\n    #return\n    if 'unit_iname' in json:\n        this['mUnitIname'] = json['unit_iname']\n    if 'category' in json:\n        this['mCategory'] = json['category']\n    #this.mConditions.Clear()\n    #if(json.conds==null)\n    #return\n    #for(intindex=0index<json.conds.Length++index)\n        #TobiraConditionParamtobiraConditionParam=newTobiraConditionParam()\n        #tobiraConditionParam.Deserialize(json.conds)\n        #this.mConditions.Add(tobiraConditionParam)\nreturn this\n",
    "TobiraCondsUnitParam": "def TobiraCondsUnitParam(json):\n    this={}#TobiraCondsUnitParamjson)\n    #if(json==null)\n    #return\n    if 'id' in json:\n        this['mId'] = json['id']\n    if 'unit_iname' in json:\n        this['mUnitIname'] = json['unit_iname']\n    if 'lv' in json:\n        this['mLevel'] = json['lv']\n    if 'awake_lv' in json:\n        this['mAwakeLevel'] = json['awake_lv']\n    if 'job_iname' in json:\n        this['mJobIname'] = json['job_iname']\n    if 'job_lv' in json:\n        this['mJobLevel'] = json['job_lv']\n    if 'category' in json:\n        this['mCategory'] = json['category']\n    if 'tobira_lv' in json:\n        this['mTobiraLv'] = json['tobira_lv']\n    #this.UpdateConditionsFlag()\nreturn this\n",
    "TobiraLearnAbilityParam": "def TobiraLearnAbilityParam(json):\n    this={}#TobiraLearnAbilityParamjson)\n    #if(json==null)\n    #return\n    if 'abil_iname' in json:\n        this['mAbilityIname'] = json['abil_iname']\n    if 'learn_lv' in json:\n        this['mLevel'] = json['learn_lv']\n    if 'add_type' in json:\n        this['mAddType'] = json['add_type']\n    if 'abil_overwrite' in json:\n        this['mAbilityOverwrite'] = json['abil_overwrite']\nreturn this\n",
    "TobiraParam": "def TobiraParam(json):\n    this={}#TobiraParamjson)\n    #if(json==null)\n    #return\n    if 'unit_iname' in json:\n        this['mUnitIname'] = json['unit_iname']\n    if 'enable' in json:\n        this['mEnable'] = json['enable']==1\n    if 'category' in json:\n        this['mCategory'] = json['category']\n    if 'recipe_id' in json:\n        this['mRecipeId'] = json['recipe_id']\n    if 'skill_iname' in json:\n        this['mSkillIname'] = json['skill_iname']\n    #this.mLearnAbilities.Clear()\n    #if(json.learn_abils!=null)\n        #for(intindex=0index<json.learn_abils.Length++index)\n            #TobiraLearnAbilityParamlearnAbilityParam=newTobiraLearnAbilityParam()\n            #learnAbilityParam.Deserialize(json.learn_abils)\n            #this.mLearnAbilities.Add(learnAbilityParam)\n    if 'overwrite_ls_iname' in json:\n        this['mOverwriteLeaderSkillIname'] = json['overwrite_ls_iname']\n    #if(!string.IsNullOrEmpty(this.mOverwriteLeaderSkillIname))\n        #GameManagerinstanceDirect=MonoSingleton<GameManager>.GetInstanceDirect()\n        #if(Object.op_Inequality((Object)instanceDirect,(Object)null)&&instanceDirect.MasterParam!=null)\n        #this.mOverwriteLeaderSkillLevel=(int)instanceDirect.MasterParam.FixParam.TobiraLvCap\n    if 'priority' in json:\n        this['mPriority'] = json['priority']\nreturn this\n",
    "TobiraRecipeMaterialParam": "def TobiraRecipeMaterialParam(json):\n    this={}#TobiraRecipeMaterialParamjson)\n    #if(json==null)\n    #return\n    if 'iname' in json:\n        this['mIname'] = json['iname']\n    if 'num' in json:\n        this['mNum'] = json['num']\nreturn this\n",
    "TobiraRecipeParam": "def TobiraRecipeParam(json):\n    this={}#TobiraRecipeParamjson)\n    #if(json==null)\n    #return\n    if 'recipe_iname' in json:\n        this['mRecipeIname'] = json['recipe_iname']\n    if 'tobira_lv' in json:\n        this['mLevel'] = json['tobira_lv']\n    if 'cost' in json:\n        this['mCost'] = json['cost']\n    if 'unit_piece_num' in json:\n        this['mUnitPieceNum'] = json['unit_piece_num']\n    if 'piece_elem_num' in json:\n        this['mElementNum'] = json['piece_elem_num']\n    if 'unlock_elem_num' in json:\n        this['mUnlockElementNum'] = json['unlock_elem_num']\n    if 'unlock_birth_num' in json:\n        this['mUnlockBirthNum'] = json['unlock_birth_num']\n    #this.mMaterials.Clear()\n    #if(json.mats==null)\n    #return\n    #for(intindex=0index<json.mats.Length++index)\n        #TobiraRecipeMaterialParamrecipeMaterialParam=newTobiraRecipeMaterialParam()\n        #recipeMaterialParam.Deserialize(json.mats)\n        #this.mMaterials.Add(recipeMaterialParam)\nreturn this\n",
    "TowerFloorParam": "def TowerFloorParam(json):\n    this={}#TowerFloorParamjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'title' in json:\n        this['title'] = json['title']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'expr' in json:\n        this['expr'] = json['expr']\n    if 'cond' in json:\n        this['cond'] = json['cond']\n    if 'tower_id' in json:\n        this['tower_id'] = json['tower_id']\n    if 'cond_quest' in json:\n        this['cond_quest'] = json['cond_quest']\n    if 'hp_recover_rate' in json:\n        this['hp_recover_rate'] = json['hp_recover_rate']\n    if 'pt' in json:\n        this['pt'] = json['pt']\n    if 'lv' in json:\n        this['lv'] = json['lv']\n    if 'joblv' in json:\n        this['joblv'] = json['joblv']\n    if 'can_help' in json:\n        this['can_help'] = json['can_help']==1\n    if 'rdy_cnd' in json:\n        this['rdy_cnd'] = json['rdy_cnd']\n    if 'reward_id' in json:\n        this['reward_id'] = json['reward_id']\n    if 'floor' in json:\n        this['floor'] = json['floor']\n    if 'is_unit_chg' in json:\n        this['is_unit_chg'] = json['is_unit_chg']\n    if 'me_id' in json:\n        this['me_id'] = json['me_id']\n    if 'is_wth_no_chg' in json:\n        this['is_wth_no_chg'] = json['is_wth_no_chg']\n    if 'wth_set_id' in json:\n        this['wth_set_id'] = json['wth_set_id']\n    if 'naut' in json:\n        this['naut'] = json['naut']\n    #this.map.Clear()\n    if 'mission' in json:\n        this['mission'] = json['mission']\n    #if(json.map!=null)\n        #for(intindex=0index<json.map.Length++index)\n            #MapParammapParam=newMapParam()\n            #mapParam.Deserialize(json.map)\n            #this.map.Add(mapParam)\n    #this.BaseQuest=MonoSingleton<GameManager>.Instance.FindBaseQuest(QuestTypes.Tower,this.tower_id)\nreturn this\n",
    "TowerParam": "def TowerParam(json):\n    this={}#TowerParamjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'expr' in json:\n        this['expr'] = json['expr']\n    if 'banr' in json:\n        this['banr'] = json['banr']\n    if 'item' in json:\n        this['prefabPath'] = json['item']\n    if 'bg' in json:\n        this['bg'] = json['bg']\n    if 'floor_bg_open' in json:\n        this['floor_bg_open'] = json['floor_bg_open']\n    if 'floor_bg_close' in json:\n        this['floor_bg_close'] = json['floor_bg_close']\n    if 'can_unit_recover' in json:\n        this['can_unit_recover'] = json['can_unit_recover']==1\n    if 'unit_recover_minute' in json:\n        this['unit_recover_minute'] = json['unit_recover_minute']\n    if 'unit_recover_coin' in json:\n        this['unit_recover_coin'] = json['unit_recover_coin']\n    if 'eventURL' in json:\n        this['eventURL'] = json['eventURL']\n    if 'is_down' in json:\n        this['is_down'] = json['is_down']>0\n    if 'is_view_ranking' in json:\n        this['is_view_ranking'] = json['is_view_ranking']>0\n    if 'unlock_level' in json:\n        this['unlock_level'] = json['unlock_level']\n    if 'unlock_quest' in json:\n        this['unlock_quest'] = json['unlock_quest']\n    if 'url' in json:\n        this['URL'] = json['url']\n    if 'floor_reset_coin' in json:\n        this['floor_reset_coin'] = json['floor_reset_coin']\n    if 'score_iname' in json:\n        this['score_iname'] = json['score_iname']\nreturn this\n",
    "ReqTowerResupons": "def ReqTowerResupons(json):\n    this={}#ReqTowerResuponseres)\n    #if(res==null)\n    #return\n    #this.TowerID=GlobalVars.SelectedTowerID\n    #this.rtime=res.rtime\n    #if(res.stats!=null)\n        #this.Deserialize(res.stats)\n    #else\n        #TowerFloorParamfirstTowerFloor=MonoSingleton<GameManager>.Instance.FindFirstTowerFloor(this.TowerID)\n        #if(firstTowerFloor!=null)\n        #this.Deserialize(newJSON_ReqTowerResuponse.Json_TowerStatus()\n            #fname=firstTowerFloor.iname,\n            #questStates=QuestStates.New\n            #})\n        #if(res.pdeck!=null)\n            #this.pdeck=newList<TowerResuponse.PlayerUnit>()\n            #for(intindex=0index<res.pdeck.Length++index)\n                #this.pdeck.Add(newTowerResuponse.PlayerUnit())\n                #this.pdeck.dmg=res.pdeck.damage\n                #this.pdeck.unitname=res.pdeck.uname\n                #this.pdeck.is_died=res.pdeck.is_died\n        #this.reset_cost=res.reset_cost\n        #this.round=res.round\n        #this.is_reset=res.is_reset==(byte)1\n        #if(res.lot_enemies!=null&&res.lot_enemies.Length>0)\n            #this.lot_enemies=newRandDeckResult[res.lot_enemies.Length]\n            #for(intindex=0index<res.lot_enemies.Length++index)\n            #this.lot_enemies=newRandDeckResult()\n                #id=res.lot_enemies.id,\n                #set_id=res.lot_enemies.set_id\n                #}\n            #this.Deserialize(res.edeck)\n            #this.Deserialize(res.rank)\n            #this.UpdateCurrentFloor()\n        #\n        #privatevoidDeserialize(JSON_ReqTowerResuponse.Json_RankStatusjson)\n            #if(json==null)\n            #return\n            if 'turn_num' in json:\n                this['turn_num'] = json['turn_num']\n            if 'died_num' in json:\n                this['died_num'] = json['died_num']\n            if 'retire_num' in json:\n                this['retire_num'] = json['retire_num']\n            if 'recovery_num' in json:\n                this['recover_num'] = json['recovery_num']\n            if 'spd_rank' in json:\n                this['speedRank'] = json['spd_rank']\n            if 'tec_rank' in json:\n                this['techRank'] = json['tec_rank']\n            if 'spd_score' in json:\n                this['spd_score'] = json['spd_score']\n            if 'tec_score' in json:\n                this['tec_score'] = json['tec_score']\n            if 'ret_score' in json:\n                this['ret_score'] = json['ret_score']\n            if 'rcv_score' in json:\n                this['rcv_score'] = json['rcv_score']\n            if 'challenge_num' in json:\n                this['challenge_num'] = json['challenge_num']\n            if 'lose_num' in json:\n                this['lose_num'] = json['lose_num']\n            if 'reset_num' in json:\n                this['reset_num'] = json['reset_num']\n            if 'challenge_score' in json:\n                this['challenge_score'] = json['challenge_score']\n            if 'lose_score' in json:\n                this['lose_score'] = json['lose_score']\n            if 'reset_score' in json:\n                this['reset_score'] = json['reset_score']\n        #\n        #publicvoidDeserialize(JSON_ReqTowerResuponse.Json_TowerPlayerUnitres)\n            #if(res==null||res==null)\n            #return\n            #this.pdeck=newList<TowerResuponse.PlayerUnit>()\n            #for(intindex=0index<res.Length++index)\n                #this.pdeck.Add(newTowerResuponse.PlayerUnit())\n                #this.pdeck.dmg=res.damage\n                #this.pdeck.unitname=res.uname\n                #this.pdeck.is_died=res.is_died\n        #\n        #publicvoidDeserialize(JSON_ReqTowerResuponse.Json_TowerEnemyUnitres)\n            #if(res==null)\n            #return\n            #this.edeck=newList<TowerResuponse.EnemyUnit>()\n            #for(intindex=0index<res.Length++index)\n                #this.edeck.Add(newTowerResuponse.EnemyUnit())\n                #this.edeck.hp=res.hp\n                #this.edeck.jewel=res.jewel\n                #this.edeck.eid=res.eid.ToString()\n        #\n        #publicvoidDeserialize(ReqTowerRank.JSON_TowerRankResponsejson)\n            #if(json==null)\n            #return\n            #if(json.speed!=null)\n                if 'speed' in json:\n                    this['SpdRank'] = newTowerResuponse.TowerRankParam[json['speed'].Length]\n                #for(intindex=0index<json.speed.Length++index)\n                    #this.SpdRank=newTowerResuponse.TowerRankParam()\n                    this['']\n                    this['SpdRank']\n                    if 'speed' in json:\n                        this['SpdRank']['lv'] = json['speed'].lv\n                    this['SpdRank']\n                    if 'speed' in json:\n                        this['SpdRank']['name'] = json['speed'].name\n                    this['SpdRank']\n                    if 'speed' in json:\n                        this['SpdRank']['rank'] = json['speed'].rank\n                    this['SpdRank']\n                    if 'speed' in json:\n                        this['SpdRank']['score'] = json['speed'].score\n                    #this.SpdRank.unit=newUnitData()\n                    #this.SpdRank.unit.Deserialize(json.speed.unit)\n                    this['SpdRank']\n                    if 'speed' in json:\n                        this['SpdRank']['selected_award'] = json['speed'].selected_award\n                    #if(json.speed.guild!=null)\n                        #this.SpdRank.ViewGuild=newViewGuildData()\n                        #this.SpdRank.ViewGuild.Deserialize(json.speed.guild)\n            #if(json.technical!=null)\n                if 'technical' in json:\n                    this['TecRank'] = newTowerResuponse.TowerRankParam[json['technical'].Length]\n                #for(intindex=0index<json.technical.Length++index)\n                    #this.TecRank=newTowerResuponse.TowerRankParam()\n                    this['']\n                    this['TecRank']\n                    if 'technical' in json:\n                        this['TecRank']['lv'] = json['technical'].lv\n                    this['TecRank']\n                    if 'technical' in json:\n                        this['TecRank']['name'] = json['technical'].name\n                    this['TecRank']\n                    if 'technical' in json:\n                        this['TecRank']['rank'] = json['technical'].rank\n                    this['TecRank']\n                    if 'technical' in json:\n                        this['TecRank']['score'] = json['technical'].score\n                    #this.TecRank.unit=newUnitData()\n                    #this.TecRank.unit.Deserialize(json.technical.unit)\n                    this['TecRank']\n                    if 'technical' in json:\n                        this['TecRank']['selected_award'] = json['technical'].selected_award\n                    #if(json.technical.guild!=null)\n                        #this.TecRank.ViewGuild=newViewGuildData()\n                        #this.TecRank.ViewGuild.Deserialize(json.technical.guild)\n            #this.Deserialize(json.rank)\n        #\n        #privatevoidUpdateCurrentFloor()\n            #if(this.status==null)\n                #this.currentFloor=MonoSingleton<GameManager>.Instance.FindFirstTowerFloor(GlobalVars.SelectedTowerID)\n            #else\n                #this.currentFloor=MonoSingleton<GameManager>.Instance.FindTowerFloor(this.status.fname)\n                #DebugUtility.Assert(this.currentFloor!=null,string.Format(\"フロア[{0}]が見つかりません\",(object)this.status.fname))\n                #if(this.currentFloor==null||this.status.state!=QuestStates.Cleared)\n                #return\n                #TowerFloorParamnextTowerFloor=MonoSingleton<GameManager>.Instance.FindNextTowerFloor(this.currentFloor.tower_id,this.currentFloor.iname)\n                #if(nextTowerFloor==null)\n                #return\n                #this.currentFloor=nextTowerFloor\n        #\n        #publicvoidDeserialize(JSON_ReqTowerResuponse.Json_TowerStatusjson)\n            #this.status=newTowerResuponse.Status()\n            this['']\n            this['status']\n            if 'fname' in json:\n                this['status']['fname'] = json['fname']\n            this['status']\n            if 'questStates' in json:\n                this['status']['state'] = json['questStates']\n            #TowerFloorParamtowerFloor=MonoSingleton<GameManager>.Instance.FindTowerFloor(this.status.fname)\n            #if(towerFloor==null)\n            #return\n            #List<TowerFloorParam>towerFloors=MonoSingleton<GameManager>.Instance.FindTowerFloors(towerFloor.tower_id)\n            #List<QuestParam>referenceQuestList=newList<QuestParam>()\n            #for(shortindex=0(int)index<towerFloors.Count++index)\n                #towerFloors[(int)index].FloorIndex=index\n                #referenceQuestList.Add(towerFloors[(int)index].GetQuestParam())\n            #QuestParamquestParam1=towerFloor.GetQuestParam()\n            #foreach(QuestParamquestParam2inreferenceQuestList)\n            #questParam2.state=QuestStates.New\n            #this.SetQuestState(referenceQuestList,questParam1,QuestStates.Cleared,true)\n            #questParam1.state=this.status.state\n        #\n        #privatevoidUpdateFloorQuestsState()\n        #\n        #privatevoidSetQuestState(List<QuestParam>referenceQuestList,QuestParamquestParam,QuestStatesstate,boolcond_recursive)\n            #if(questParam==null)\n            #return\n            #questParam.state=state\n            #if(!cond_recursive||questParam.cond_quests==null)\n            #return\n            #foreach(stringcondQuestinquestParam.cond_quests)\n                #stringiname=condQuest\n                #QuestParamquestParam1=referenceQuestList.Find((Predicate<QuestParam>)(q=>q.iname==iname))\n                #this.SetQuestState(referenceQuestList,questParam1,state,cond_recursive)\n        #\n        #publicTowerFloorParamGetCurrentFloor()\n            #returnthis.currentFloor\n        #\n        #publicvoidCalcDamage(List<Unit>player)\n            #if(this.pdeck==null)\n            #return\n            #for(inti=0i<this.pdeck.Count++i)\n                #Unitunit=player.Find((Predicate<Unit>)(x=>x.UnitParam.iname==this.pdeck[i].unitname))\n                #if(unit!=null)\n                    #intnum=Mathf.Min(this.pdeck[i].dmg,(int)unit.MaximumStatus.param.hp-1)\n                    #unit.Damage(num,false)\n        #\n        #publicintGetPlayerUnitHP(UnitDatadata)\n            #if(this.pdeck==null)\n            #return(int)data.Status.param.hp\n            #TowerResuponse.PlayerUnitplayerUnit=this.FindPlayerUnit(data)\n            #if(playerUnit==null)\n            #return(int)data.Status.param.hp\n            #intnum=Mathf.Min(playerUnit.dmg,(int)data.Status.param.hp-1)\n            #return(int)data.Status.param.hp-num\n        #\n        #publicintGetUnitDamage(UnitDataunit_data)\n            #if(this.pdeck==null)\n            #return0\n            #TowerResuponse.PlayerUnitplayerUnit=this.FindPlayerUnit(unit_data)\n            #if(playerUnit==null)\n            #return0\n            #returnplayerUnit.dmg\n        #\n        #publicvoidCalcEnemyDamage(List<Unit>enemy,boolis_menu=false)\n            #if(this.edeck==null)\n            #return\n            #List<Unit>unitList=newList<Unit>()\n            #for(intindex1=0index1<this.edeck.Count++index1)\n                #intindex2=int.Parse(this.edeck[index1].eid)\n                #if(index2>=0&&enemy.Count>index2)\n                    #Unitunit=enemy[index2]\n                    #if(unit!=null&&(!is_menu||!unit.IsGimmick))\n                        #if(unit.IsGimmick&&this.edeck[index1].hp==0)\n                            #unitList.Add(unit)\n                        #else\n                            #unit.Damage((int)unit.MaximumStatus.param.hp-this.edeck[index1].hp,false)\n                            #unit.Gems=this.edeck[index1].jewel\n                            #this.edeck[index1].id=unit.UnitData.UniqueID\n                            #this.edeck[index1].iname=unit.UnitParam.iname\n            #enemy.RemoveAll((Predicate<Unit>)(x=>\n                #if(!x.IsGimmick)\n                #return(int)x.CurrentStatus.param.hp<=0\n                #returnfalse\n                #}))\n                #for(intindex=0index<unitList.Count++index)\n                    #if(unitList!=null)\n                    #enemy.Remove(unitList)\n            #\n            #publicintCalcRecoverCost()\n                #TowerParamtower=MonoSingleton<GameManager>.Instance.FindTower(this.TowerID)\n                #if(tower==null)\n                #return0\n                #doublenum=Math.Ceiling((TimeManager.FromUnixTime(this.rtime).AddMinutes(-1.0)-TimeManager.ServerTime).TotalMinutes)/(double)tower.unit_recover_minute\n                #returnMathf.Clamp((int)Math.Ceiling((double)tower.unit_recover_coin*num),0,(int)tower.unit_recover_coin)\n            #\n            #publicboolExistDamagedUnit()\n                #if(this.pdeck==null)\n                #returnfalse\n                #for(intindex=0index<this.pdeck.Count++index)\n                    #if(this.pdeck.dmg>0)\n                    #returntrue\n                #returnfalse\n            #\n            #publicintGetDiedUnitNum()\n                #intnum=0\n                #if(this.pdeck==null)\n                #returnnum\n                #for(intindex=0index<this.pdeck.Count++index)\n                    #if(this.pdeck.isDied)\n                    #++num\n                #returnnum\n            #\n            #publicList<UnitData>GetAvailableUnits()\n                #returnMonoSingleton<GameManager>.Instance.Player.Units.FindAll((Predicate<UnitData>)(unitData=>unitData.Lv>=20))\n            #\n            #publicTowerResuponse.PlayerUnitFindPlayerUnit(UnitDataunit)\n                #if(this.pdeck==null)\n                #return(TowerResuponse.PlayerUnit)null\n                #returnthis.pdeck.Find((Predicate<TowerResuponse.PlayerUnit>)(x=>x.unitname==unit.UnitParam.iname))\n            #\n            #publicvoidOnFloorReset()\n                #this.edeck=(List<TowerResuponse.EnemyUnit>)null\n                #this.lot_enemies=(RandDeckResult)null\n            #\n            #publicvoidOnFloorRanking(ReqTowerFloorRanking.Json_Responsejson)\n                #this.FloorScores=newTowerScore.ViewParam()\n                #this.FloorSpdRank=(TowerResuponse.TowerRankParam)null\n                #this.FloorTecRank=(TowerResuponse.TowerRankParam)null\n                #if(json==null)\n                #return\n                #if(json.score!=null)\n                    this['']\n                    this['FloorScores']\n                    if 'score' in json:\n                        this['FloorScores']['TurnNum'] = json['score'].turn_num\n                    this['FloorScores']\n                    if 'score' in json:\n                        this['FloorScores']['DiedNum'] = json['score'].died_num\n                    this['FloorScores']\n                    if 'score' in json:\n                        this['FloorScores']['RecoveryNum'] = json['score'].recovery_num\n                    this['FloorScores']\n                    if 'score' in json:\n                        this['FloorScores']['RetireNum'] = json['score'].retire_num\n                    this['FloorScores']\n                    if 'score' in json:\n                        this['FloorScores']['FloorResetNum'] = json['score'].reset_num\n                    this['FloorScores']\n                    if 'score' in json:\n                        this['FloorScores']['LoseNum'] = json['score'].lose_num\n                    this['FloorScores']\n                    if 'score' in json:\n                        this['FloorScores']['ChallengeNum'] = json['score'].challenge_num\n                #if(json.speed!=null)\n                    if 'speed' in json:\n                        this['FloorSpdRank'] = newTowerResuponse.TowerRankParam[json['speed'].Length]\n                    #for(intindex=0index<json.speed.Length++index)\n                        #this.FloorSpdRank=newTowerResuponse.TowerRankParam()\n                        this['']\n                        this['FloorSpdRank']\n                        if 'speed' in json:\n                            this['FloorSpdRank']['lv'] = json['speed'].lv\n                        this['FloorSpdRank']\n                        if 'speed' in json:\n                            this['FloorSpdRank']['name'] = json['speed'].name\n                        this['FloorSpdRank']\n                        if 'speed' in json:\n                            this['FloorSpdRank']['rank'] = json['speed'].rank\n                        this['FloorSpdRank']\n                        if 'speed' in json:\n                            this['FloorSpdRank']['score'] = json['speed'].score\n                        #this.FloorSpdRank.unit=newUnitData()\n                        #this.FloorSpdRank.unit.Deserialize(json.speed.unit)\n                        this['FloorSpdRank']\n                        if 'speed' in json:\n                            this['FloorSpdRank']['selected_award'] = json['speed'].selected_award\n                        #if(json.speed.guild!=null)\n                            #this.FloorSpdRank.ViewGuild=newViewGuildData()\n                            #this.FloorSpdRank.ViewGuild.Deserialize(json.speed.guild)\n                #if(json.technical==null)\n                #return\n                if 'technical' in json:\n                    this['FloorTecRank'] = newTowerResuponse.TowerRankParam[json['technical'].Length]\n                #for(intindex=0index<json.technical.Length++index)\n                    #this.FloorTecRank=newTowerResuponse.TowerRankParam()\n                    this['']\n                    this['FloorTecRank']\n                    if 'technical' in json:\n                        this['FloorTecRank']['lv'] = json['technical'].lv\n                    this['FloorTecRank']\n                    if 'technical' in json:\n                        this['FloorTecRank']['name'] = json['technical'].name\n                    this['FloorTecRank']\n                    if 'technical' in json:\n                        this['FloorTecRank']['rank'] = json['technical'].rank\n                    this['FloorTecRank']\n                    if 'technical' in json:\n                        this['FloorTecRank']['score'] = json['technical'].score\n                    #this.FloorTecRank.unit=newUnitData()\n                    #this.FloorTecRank.unit.Deserialize(json.technical.unit)\n                    this['FloorTecRank']\n                    if 'technical' in json:\n                        this['FloorTecRank']['selected_award'] = json['technical'].selected_award\n                    #if(json.technical.guild!=null)\n                        #this.FloorTecRank.ViewGuild=newViewGuildData()\n                        #this.FloorTecRank.ViewGuild.Deserialize(json.technical.guild)\n            #\n            #publicboolCheckEnemyDeck()\n                #returnthis.edeck!=null\n            #\n            #publicclassStatus\n                #publicstringfname\n                #publicQuestStatesstate\n            #\n            #publicclassPlayerUnit\n                #publicstringunitname\n                #publicintdmg\n                #publicintis_died\n                #\n                #publicboolisDied\n                    #get\n                        #returnthis.is_died==1\n            #\n            #publicclassEnemyUnit\n                #publiclongid\n                #publicstringiname\n                #publicstringeid\n                #publicinthp\n                #publicintjewel\n            #\n            #publicclassTowerRankParam\n                #publicstringname\n                #publicintlv\n                #publicintrank\n                #publicintscore\n                #publicstringuid\n                #publicUnitDataunit\n                #publicstringselected_award\n                #publicViewGuildDataViewGuild\n    #\nreturn this\n",
    "ReqTowerResuponse.Json_RankStatus": "def ReqTowerResuponse.Json_RankStatus(json):\n    this={}#ReqTowerResuponse.Json_RankStatusjson)\n    #if(json==null)\n    #return\n    if 'turn_num' in json:\n        this['turn_num'] = json['turn_num']\n    if 'died_num' in json:\n        this['died_num'] = json['died_num']\n    if 'retire_num' in json:\n        this['retire_num'] = json['retire_num']\n    if 'recovery_num' in json:\n        this['recover_num'] = json['recovery_num']\n    if 'spd_rank' in json:\n        this['speedRank'] = json['spd_rank']\n    if 'tec_rank' in json:\n        this['techRank'] = json['tec_rank']\n    if 'spd_score' in json:\n        this['spd_score'] = json['spd_score']\n    if 'tec_score' in json:\n        this['tec_score'] = json['tec_score']\n    if 'ret_score' in json:\n        this['ret_score'] = json['ret_score']\n    if 'rcv_score' in json:\n        this['rcv_score'] = json['rcv_score']\n    if 'challenge_num' in json:\n        this['challenge_num'] = json['challenge_num']\n    if 'lose_num' in json:\n        this['lose_num'] = json['lose_num']\n    if 'reset_num' in json:\n        this['reset_num'] = json['reset_num']\n    if 'challenge_score' in json:\n        this['challenge_score'] = json['challenge_score']\n    if 'lose_score' in json:\n        this['lose_score'] = json['lose_score']\n    if 'reset_score' in json:\n        this['reset_score'] = json['reset_score']\nreturn this\n",
    "ReqTowerResuponse.Json_TowerStatus": "def ReqTowerResuponse.Json_TowerStatus(json):\n    this={}#ReqTowerResuponse.Json_TowerStatusjson)\n    #this.status=newTowerResuponse.Status()\n    this['']\n    this['status']\n    if 'fname' in json:\n        this['status']['fname'] = json['fname']\n    this['status']\n    if 'questStates' in json:\n        this['status']['state'] = json['questStates']\n    #TowerFloorParamtowerFloor=MonoSingleton<GameManager>.Instance.FindTowerFloor(this.status.fname)\n    #if(towerFloor==null)\n    #return\n    #List<TowerFloorParam>towerFloors=MonoSingleton<GameManager>.Instance.FindTowerFloors(towerFloor.tower_id)\n    #List<QuestParam>referenceQuestList=newList<QuestParam>()\n    #for(shortindex=0(int)index<towerFloors.Count++index)\n        #towerFloors[(int)index].FloorIndex=index\n        #referenceQuestList.Add(towerFloors[(int)index].GetQuestParam())\n    #QuestParamquestParam1=towerFloor.GetQuestParam()\n    #foreach(QuestParamquestParam2inreferenceQuestList)\n    #questParam2.state=QuestStates.New\n    #this.SetQuestState(referenceQuestList,questParam1,QuestStates.Cleared,true)\n    #questParam1.state=this.status.state\nreturn this\n",
    "TowerRewardItem": "def TowerRewardItem(json):\n    this={}#TowerRewardItemjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'type' in json:\n        this['type'] = json['type']\n    if 'num' in json:\n        this['num'] = json['num']\n    if 'visible' in json:\n        this['visible'] = json['visible']==1\nreturn this\n",
    "TowerRewardParam": "def TowerRewardParam(json):\n    this={}#TowerRewardParamjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    #if(json.rewards==null)\n    #return\n    #this.mTowerRewardItems=newList<TowerRewardItem>()\n    #for(intindex=0index<json.rewards.Length++index)\n        #TowerRewardItemtowerRewardItem=newTowerRewardItem()\n        #towerRewardItem.Deserialize(json.rewards)\n        #this.mTowerRewardItems.Add(towerRewardItem)\nreturn this\n",
    "TowerRoundRewardParam": "def TowerRoundRewardParam(json):\n    this={}#TowerRoundRewardParamjson)\n    #if(json==null)\n    #thrownewInvalidJSONException()\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    #this.mRoundList=newList<byte>()\n    #if(json.rewards==null)\n    #return\n    #this.mTowerRewardItems=newList<TowerRewardItem>()\n    #for(intindex=0index<json.rewards.Length++index)\n        #TowerRewardItemtowerRewardItem=newTowerRewardItem()\n        #towerRewardItem.Deserialize((JSON_TowerRewardItem)json.rewards)\n        #this.mTowerRewardItems.Add(towerRewardItem)\n        #this.mRoundList.Add(json.rewards.round_num)\nreturn this\n",
    "TowerScoreThreshold": "def TowerScoreThreshold(json):\n    this={}#TowerScoreThresholdjson)\n    #if(json==null)\n    #returnfalse\n    if 'rank' in json:\n        this['Rank'] = json['rank']\n    if 'score' in json:\n        this['Score'] = json['score']\n    if 'turn' in json:\n        this['TurnCnt'] = json['turn']\n    if 'died' in json:\n        this['DiedCnt'] = json['died']\n    if 'retire' in json:\n        this['RetireCnt'] = json['retire']\n    if 'recover' in json:\n        this['RecoverCnt'] = json['recover']\n    #returntrue\nreturn this\n",
    "TrickParam": "def TrickParam(json):\n    this={}#TrickParamjson)\n    #if(json==null)\n    #return\n    if 'iname' in json:\n        this['mIname'] = json['iname']\n    if 'name' in json:\n        this['mName'] = json['name']\n    if 'expr' in json:\n        this['mExpr'] = json['expr']\n    if 'dmg_type' in json:\n        this['mDamageType'] = ENUM['eTrickDamageType'][json['dmg_type']]\n    if 'dmg_val' in json:\n        this['mDamageVal'] = json['dmg_val']\n    if 'calc' in json:\n        this['mCalcType'] = ENUM['SkillParamCalcTypes'][json['calc']]\n    if 'elem' in json:\n        this['mElem'] = ENUM['EElement'][json['elem']]\n    if 'atk_det' in json:\n        this['mAttackDetail'] = ENUM['AttackDetailTypes'][json['atk_det']]\n    if 'buff' in json:\n        this['mBuffId'] = json['buff']\n    if 'cond' in json:\n        this['mCondId'] = json['cond']\n    if 'kb_rate' in json:\n        this['mKnockBackRate'] = json['kb_rate']\n    if 'kb_val' in json:\n        this['mKnockBackVal'] = json['kb_val']\n    if 'target' in json:\n        this['mTarget'] = ENUM['ESkillTarget'][json['target']]\n    if 'visual' in json:\n        this['mVisualType'] = ENUM['eTrickVisualType'][json['visual']]\n    if 'count' in json:\n        this['mActionCount'] = json['count']\n    if 'clock' in json:\n        this['mValidClock'] = json['clock']\n    if 'is_no_ow' in json:\n        this['mIsNoOverWrite'] = (json['is_no_ow']!=0)\n    if 'marker' in json:\n        this['mMarkerName'] = json['marker']\n    if 'effect' in json:\n        this['mEffectName'] = json['effect']\n    if 'eff_target' in json:\n        this['mEffTarget'] = ENUM['ESkillTarget'][json['eff_target']]\n    if 'eff_shape' in json:\n        this['mEffShape'] = ENUM['ESelectType'][json['eff_shape']]\n    if 'eff_scope' in json:\n        this['mEffScope'] = json['eff_scope']\n    if 'eff_height' in json:\n        this['mEffHeight'] = json['eff_height']\nreturn this\n",
    "TrophyCategoryParam": "def TrophyCategoryParam(json):\n    this={}#TrophyCategoryParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    #this.hash_code=this.iname.GetHashCode()\n    if 'is_not_pull' in json:\n        this['is_not_pull'] = json['is_not_pull']==1\n    if 'day_reset' in json:\n        this['days'] = json['day_reset']\n    if 'bgnr' in json:\n        this['beginner'] = json['bgnr']\n    #this.begin_at.Set(json.begin_at,DateTime.MinValue)\n    #this.end_at.Set(json.end_at,DateTime.MaxValue)\n    if 'category' in json:\n        this['category'] = ENUM['TrophyCategorys'][json['category']]\n    if 'linked_quest' in json:\n        this['linked_quest'] = json['linked_quest']\n    if 'banner' in json:\n        this['banner'] = json['banner']\n    #returntrue\nreturn this\n",
    "TrophyParam": "def TrophyParam(json):\n    this={}#TrophyParamjson)\n    #if(json==null)\n    #returnfalse\n    #if(json.flg_quests==null)\n        #this.RequiredTrophies=newstring[0]\n    #else\n        #for(intindex=0index<json.flg_quests.Length++index)\n        if 'flg_quests' in json:\n            this['RequiredTrophies'] = json['flg_quests']\n    #this.Objectives=newTrophyObjective[1]\n    #for(intindex=0index<1++index)\n        #this.Objectives=newTrophyObjective()\n        #this.Objectives.Param=this\n        #this.Objectives.index=index\n        this['']\n        this['Objectives']\n        if 'type' in json:\n            this['Objectives']['type'] = ENUM['TrophyConditionTypes'][json['type']]\n        this['Objectives']\n        if 'ival' in json:\n            this['Objectives']['ival'] = json['ival']\n        #if(json.sval!=null)\n        this['Objectives']\n        if 'sval' in json:\n            this['Objectives']['sval'] = newList<string>json['sval'])\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['Name'] = json['name']\n    if 'expr' in json:\n        this['Expr'] = json['expr']\n    if 'reward_gold' in json:\n        this['Gold'] = json['reward_gold']\n    if 'reward_coin' in json:\n        this['Coin'] = json['reward_coin']\n    if 'reward_exp' in json:\n        this['Exp'] = json['reward_exp']\n    if 'reward_stamina' in json:\n        this['Stamina'] = json['reward_stamina']\n    if 'parent_iname' in json:\n        this['ParentTrophy'] = json['parent_iname']\n    if 'help' in json:\n        this['help'] = json['help']\n    #if(!string.IsNullOrEmpty(json.category))\n        if 'category' in json:\n            this['category_hash_code'] = json['category'].GetHashCode\n        #this.is_none_category_hash=false\n    if 'category' in json:\n        this['Category'] = json['category']\n    if 'disp' in json:\n        this['DispType'] = ENUM['TrophyDispType'][json['disp']]\n    #this.Items=TrophyParam.InitializeItems(json)\n    #this.Artifacts=TrophyParam.InitializeArtifacts(json)\n    #this.ConceptCards=TrophyParam.InitializeConceptCards(json)\n    #returntrue\nreturn this\n",
    "UnitGroupParam": "def UnitGroupParam(json):\n    this={}#UnitGroupParamjson)\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'units' in json:\n        this['units'] = json['units']\n    #returntrue\nreturn this\n",
    "UnitJobOverwriteParam": "def UnitJobOverwriteParam(json):\n    this={}#UnitJobOverwriteParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'unit_iname' in json:\n        this['mUnitIname'] = json['unit_iname']\n    if 'job_iname' in json:\n        this['mJobIname'] = json['job_iname']\n    if 'avoid' in json:\n        this['mAvoid'] = json['avoid']\n    if 'inimp' in json:\n        this['mInimp'] = json['inimp']\n    #this.status=newStatusParam()\n    this['']\n    this['status']\n    if 'hp' in json:\n        this['status']['hp'] = json['hp']\n    this['status']\n    if 'mp' in json:\n        this['status']['mp'] = json['mp']\n    this['status']\n    if 'atk' in json:\n        this['status']['atk'] = json['atk']\n    this['status']\n    if 'def' in json:\n        this['status']['def'] = json['def']\n    this['status']\n    if 'mag' in json:\n        this['status']['mag'] = json['mag']\n    this['status']\n    if 'mnd' in json:\n        this['status']['mnd'] = json['mnd']\n    this['status']\n    if 'dex' in json:\n        this['status']['dex'] = json['dex']\n    this['status']\n    if 'spd' in json:\n        this['status']['spd'] = json['spd']\n    this['status']\n    if 'cri' in json:\n        this['status']['cri'] = json['cri']\n    this['status']\n    if 'luk' in json:\n        this['status']['luk'] = json['luk']\n    #returntrue\nreturn this\n",
    "UnitParam": "def UnitParam(json):\n    this={}#UnitParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'mdl' in json:\n        this['model'] = json['mdl']\n    if 'grow' in json:\n        this['grow'] = json['grow']\n    if 'piece' in json:\n        this['piece'] = json['piece']\n    if 'sub_piece' in json:\n        this['subPiece'] = json['sub_piece']\n    if 'birth' in json:\n        this['birth'] = json['birth']\n    if 'birth_id' in json:\n        this['birthID'] = json['birth_id']\n    if 'ability' in json:\n        this['ability'] = json['ability']\n    if 'ma_quest' in json:\n        this['ma_quest'] = json['ma_quest']\n    if 'sex' in json:\n        this['sex'] = ENUM['ESex'][json['sex']]\n    if 'rare' in json:\n        this['rare'] = json['rare']\n    if 'raremax' in json:\n        this['raremax'] = json['raremax']\n    if 'type' in json:\n        this['type'] = ENUM['EUnitType'][json['type']]\n    if 'elem' in json:\n        this['element'] = ENUM['EElement'][json['elem']]\n    #this.flag.Set(0,json.hero!=0)\n    if 'sw' in json:\n        this['sw'] = json['sw']\n    if 'sh' in json:\n        this['sh'] = json['sh']\n    if 'sd' in json:\n        this['sd'] = json['sd']\n    if 'dbuki' in json:\n        this['dbuki'] = json['dbuki']\n    if 'search' in json:\n        this['search'] = json['search']\n    #this.flag.Set(1,json.notsmn==0)\n    #if(!string.IsNullOrEmpty(json.available_at))\n        #try\n            if 'available_at' in json:\n                this['available_at'] = DateTime.Parse\n        #catch\n            #this.available_at=DateTime.MaxValue\n    if 'height' in json:\n        this['height'] = json['height']\n    if 'weight' in json:\n        this['weight'] = json['weight']\n    #this.jobsets=(string)null\n    #this.mJobSetCache=(JobSetParam)null\n    #this.tags=(string)null\n    #if(json.skins!=null&&json.skins.Length>=1)\n        #for(intindex=0index<json.skins.Length++index)\n        if 'skins' in json:\n            this['skins'] = json['skins']\n    #if(UnitParam.NoJobStatus.IsExistParam(json))\n        #this.no_job_status=newUnitParam.NoJobStatus()\n        #this.no_job_status.SetParam(json)\n    #if(this.type==EUnitType.EventUnit)\n    #returntrue\n    #if(json.jobsets!=null)\n        #for(intindex=0index<this.jobsets.Length++index)\n        if 'jobsets' in json:\n            this['jobsets'] = json['jobsets']\n    #if(json.tag!=null)\n    if 'tag' in json:\n        this['tags'] = json['tag'].Split\n    #if(this.ini_status==null)\n    #this.ini_status=newUnitParam.Status()\n    #this.ini_status.SetParamIni(json)\n    #this.ini_status.SetEnchentParamIni(json)\n    #if(this.max_status==null)\n    #this.max_status=newUnitParam.Status()\n    #this.max_status.SetParamMax(json)\n    #this.max_status.SetEnchentParamMax(json)\n    if 'ls1' in json:\n        this['leader_skills'][0] = json['ls1']\n    if 'ls2' in json:\n        this['leader_skills'][1] = json['ls2']\n    if 'ls3' in json:\n        this['leader_skills'][2] = json['ls3']\n    if 'ls4' in json:\n        this['leader_skills'][3] = json['ls4']\n    if 'ls5' in json:\n        this['leader_skills'][4] = json['ls5']\n    if 'ls6' in json:\n        this['leader_skills'][5] = json['ls6']\n    if 'recipe1' in json:\n        this['recipes'][0] = json['recipe1']\n    if 'recipe2' in json:\n        this['recipes'][1] = json['recipe2']\n    if 'recipe3' in json:\n        this['recipes'][2] = json['recipe3']\n    if 'recipe4' in json:\n        this['recipes'][3] = json['recipe4']\n    if 'recipe5' in json:\n        this['recipes'][4] = json['recipe5']\n    if 'recipe6' in json:\n        this['recipes'][5] = json['recipe6']\n    if 'img' in json:\n        this['image'] = json['img']\n    if 'vce' in json:\n        this['voice'] = json['vce']\n    #this.flag.Set(2,json.no_trw==0)\n    #this.flag.Set(3,json.no_kb==0)\n    #this.flag.Set(4,json.no_chg==0)\n    if 'unlck_t' in json:\n        this['unlock_time'] = json['unlck_t']\n    #returntrue\nreturn this\n",
    "UnitUnlockTimeParam": "def UnitUnlockTimeParam(json):\n    this={}#UnitUnlockTimeParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'name' in json:\n        this['name'] = json['name']\n    #if(!string.IsNullOrEmpty(json.begin_at))\n        #try\n            if 'begin_at' in json:\n                this['begin_at'] = DateTime.Parse\n        #catch\n            #this.begin_at=DateTime.MaxValue\n    #if(!string.IsNullOrEmpty(json.end_at))\n        #try\n            if 'end_at' in json:\n                this['end_at'] = DateTime.Parse\n        #catch\n            #this.end_at=DateTime.MinValue\n    #returntrue\nreturn this\n",
    "UnlockParam": "def UnlockParam(json):\n    this={}#UnlockParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    #try\n        if 'iname' in json:\n            this['UnlockTarget'] = ENUM['UnlockTargets'][json['iname']]\n    #catch(Exceptionex)\n        #returnfalse\n    if 'lv' in json:\n        this['PlayerLevel'] = json['lv']\n    if 'vip' in json:\n        this['VipRank'] = json['vip']\n    #returntrue\nreturn this\n",
    "VersusCoinCampParam": "def VersusCoinCampParam(json):\n    this={}#VersusCoinCampParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'rate' in json:\n        this['coinrate'] = json['rate']<=0?1:json['rate']\n    #try\n        #if(!string.IsNullOrEmpty(json.begin_at))\n        if 'begin_at' in json:\n            this['begin_at'] = DateTime.Parse\n        #if(!string.IsNullOrEmpty(json.end_at))\n        if 'end_at' in json:\n            this['end_at'] = DateTime.Parse\n    #catch(Exceptionex)\n        #DebugUtility.LogError(ex.Message)\n        #returnfalse\n    #returntrue\nreturn this\n",
    "VersusCoin": "def VersusCoin(json):\n    this={}#VersusCoinjson)\n    #if(json==null)\n    #return\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'coin_iname' in json:\n        this['coin_iname'] = json['coin_iname']\n    if 'win_cnt' in json:\n        this['win_cnt'] = json['win_cnt']\n    if 'lose_cnt' in json:\n        this['lose_cnt'] = json['lose_cnt']\n    if 'draw_cnt' in json:\n        this['draw_cnt'] = json['draw_cnt']\nreturn this\n",
    "VersusEnableTimeParam": "def VersusEnableTimeParam(json):\n    this={}#VersusEnableTimeParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['mScheduleId'] = json['id']\n    if 'mode' in json:\n        this['mVersusType'] = ENUM['VERSUS_TYPE'][json['mode']]\n    #try\n        #if(!string.IsNullOrEmpty(json.begin_at))\n        if 'begin_at' in json:\n            this['mBeginAt'] = DateTime.Parse\n        #if(!string.IsNullOrEmpty(json.end_at))\n        if 'end_at' in json:\n            this['mEndAt'] = DateTime.Parse\n    #catch(Exceptionex)\n        #DebugUtility.LogError(ex.Message)\n        #returnfalse\n    #this.mSchedule=newList<VersusEnableTimeScheduleParam>()\n    #for(intindex=0index<json.schedule.Length++index)\n        #VersusEnableTimeScheduleParamtimeScheduleParam=newVersusEnableTimeScheduleParam()\n        #if(timeScheduleParam.Deserialize(json.schedule))\n        #this.mSchedule.Add(timeScheduleParam)\n    if 'draft_type' in json:\n        this['mDraftType'] = ENUM['VersusDraftType'][json['draft_type']]\n    #returntrue\nreturn this\n",
    "VersusEnableTimeScheduleParam": "def VersusEnableTimeScheduleParam(json):\n    this={}#VersusEnableTimeScheduleParamjson)\n    if 'begin_time' in json:\n        this['mBegin'] = json['begin_time']\n    if 'open_time' in json:\n        this['mOpen'] = json['open_time']\n    if 'quest_iname' in json:\n        this['mQuestIname'] = json['quest_iname']\n    #try\n        #if(json.add_date!=null)\n            #this.mAddDateList=newList<DateTime>()\n            #for(intindex=0index<json.add_date.Length++index)\n                #if(!string.IsNullOrEmpty(json.add_date))\n                #this.mAddDateList.Add(DateTime.Parse(json.add_date))\n    #catch(Exceptionex)\n        #DebugUtility.LogError(ex.Message)\n        #returnfalse\n    #returntrue\nreturn this\n",
    "VersusFirstWinBonus": "def VersusFirstWinBonus(json):\n    this={}#VersusFirstWinBonusjson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['id'] = json['id']\n    #if(json.rewards!=null)\n        #intlength=json.rewards.Length\n        #this.rewards=newVersusWinBonusRewardParam[length]\n        #if(this.rewards!=null)\n            #for(intindex=0index<length++index)\n                #this.rewards=newVersusWinBonusRewardParam()\n                this['']\n                this['rewards']\n                if 'rewards' in json:\n                    this['rewards']['type'] = ENUM['VERSUS_REWARD_TYPE'][json['rewards']]\n                this['rewards']\n                if 'rewards' in json:\n                    this['rewards']['iname'] = json['rewards'].item_iname\n                this['rewards']\n                if 'rewards' in json:\n                    this['rewards']['num'] = json['rewards'].item_num\n    #try\n        #if(!string.IsNullOrEmpty(json.begin_at))\n        if 'begin_at' in json:\n            this['begin_at'] = DateTime.Parse\n        #if(!string.IsNullOrEmpty(json.end_at))\n        if 'end_at' in json:\n            this['end_at'] = DateTime.Parse\n    #catch(Exceptionex)\n        #DebugUtility.LogError(ex.Message)\n        #returnfalse\n    #returntrue\nreturn this\n",
    "VersusMatchCondParam": "def VersusMatchCondParam(json):\n    this={}#VersusMatchCondParamjson)\n    #if(json==null)\n    #return\n    if 'floor' in json:\n        this['Floor'] = json['floor']\n    if 'lvrang' in json:\n        this['LvRange'] = json['lvrang']\n    if 'floorrange' in json:\n        this['FloorRange'] = json['floorrange']\nreturn this\n",
    "VersusMatchingParam": "def VersusMatchingParam(json):\n    this={}#VersusMatchingParamjson)\n    #if(json==null)\n    #return\n    if 'key' in json:\n        this['MatchKey'] = json['key']\n    if 'key' in json:\n        this['MatchKeyHash'] = VersusMatchingParam.CalcHash\n    if 'point' in json:\n        this['MatchLinePoint'] = json['point']\nreturn this\n",
    "VersusRankClassParam": "def VersusRankClassParam(json):\n    this={}#VersusRankClassParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'schedule_id' in json:\n        this['mScheduleId'] = json['schedule_id']\n    if 'type' in json:\n        this['mClass'] = ENUM['RankMatchClass'][json['type']]\n    if 'up_pt' in json:\n        this['mUpPoint'] = json['up_pt']\n    if 'down_pt' in json:\n        this['mDownPoint'] = json['down_pt']\n    if 'down_losing_streak' in json:\n        this['mDownLosingStreak'] = json['down_losing_streak']\n    if 'reward_id' in json:\n        this['mRewardId'] = json['reward_id']\n    if 'win_pt_max' in json:\n        this['mWinPointMax'] = json['win_pt_max']\n    if 'win_pt_min' in json:\n        this['mWinPointMin'] = json['win_pt_min']\n    if 'lose_pt_max' in json:\n        this['mLosePointMax'] = json['lose_pt_max']\n    if 'lose_pt_min' in json:\n        this['mLosePointMin'] = json['lose_pt_min']\n    #returntrue\nreturn this\n",
    "VersusRankMissionParam": "def VersusRankMissionParam(json):\n    this={}#VersusRankMissionParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['mIName'] = json['iname']\n    if 'name' in json:\n        this['mName'] = json['name']\n    if 'expr' in json:\n        this['mExpire'] = json['expr']\n    if 'type' in json:\n        this['mType'] = ENUM['RankMatchMissionType'][json['type']]\n    if 'sval' in json:\n        this['mSVal'] = json['sval']\n    if 'ival' in json:\n        this['mIVal'] = json['ival']\n    if 'reward_id' in json:\n        this['mRewardId'] = json['reward_id']\n    #returntrue\nreturn this\n",
    "VersusRankMissionScheduleParam": "def VersusRankMissionScheduleParam(json):\n    this={}#VersusRankMissionScheduleParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'schedule_id' in json:\n        this['mScheduleId'] = json['schedule_id']\n    if 'iname' in json:\n        this['mIName'] = json['iname']\n    #returntrue\nreturn this\n",
    "VersusRankParam": "def VersusRankParam(json):\n    this={}#VersusRankParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['mId'] = json['id']\n    if 'btl_mode' in json:\n        this['mVSMode'] = ENUM['VS_MODE'][json['btl_mode']]\n    if 'name' in json:\n        this['mName'] = json['name']\n    if 'limit' in json:\n        this['mLimit'] = json['limit']\n    if 'win_pt_base' in json:\n        this['mWinPointBase'] = json['win_pt_base']\n    if 'lose_pt_base' in json:\n        this['mLosePointBase'] = json['lose_pt_base']\n    if 'hurl' in json:\n        this['mHUrl'] = json['hurl']\n    #this.mDisableDateList=newList<DateTime>()\n    #try\n        #if(!string.IsNullOrEmpty(json.begin_at))\n        if 'begin_at' in json:\n            this['mBeginAt'] = DateTime.Parse\n        #if(!string.IsNullOrEmpty(json.end_at))\n        if 'end_at' in json:\n            this['mEndAt'] = DateTime.Parse\n        #if(json.disabledate!=null)\n            #for(intindex=0index<json.disabledate.Length++index)\n                #if(!string.IsNullOrEmpty(json.disabledate))\n                #this.mDisableDateList.Add(DateTime.Parse(json.disabledate))\n    #catch(Exceptionex)\n        #DebugUtility.LogError(ex.Message)\n        #returnfalse\n    #returntrue\nreturn this\n",
    "VersusRankRankingRewardParam": "def VersusRankRankingRewardParam(json):\n    this={}#VersusRankRankingRewardParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'schedule_id' in json:\n        this['mScheduleId'] = json['schedule_id']\n    if 'rank_begin' in json:\n        this['mRankBegin'] = json['rank_begin']\n    if 'rank_end' in json:\n        this['mRankEnd'] = json['rank_end']\n    if 'reward_id' in json:\n        this['mRewardId'] = json['reward_id']\n    #returntrue\nreturn this\n",
    "VersusRankRewardRewardParam": "def VersusRankRewardRewardParam(json):\n    this={}#VersusRankRewardRewardParamjson)\n    if 'item_type' in json:\n        this['mType'] = ENUM['RewardType'][json['item_type']]\n    if 'item_iname' in json:\n        this['mIName'] = json['item_iname']\n    if 'item_num' in json:\n        this['mNum'] = json['item_num']\n    #returntrue\nreturn this\n",
    "VersusRankRewardParam": "def VersusRankRewardParam(json):\n    this={}#VersusRankRewardParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'reward_id' in json:\n        this['mRewardId'] = json['reward_id']\n    #this.mRewardList=newList<VersusRankReward>()\n    #for(intindex=0index<json.rewards.Length++index)\n        #VersusRankRewardversusRankReward=newVersusRankReward()\n        #if(versusRankReward.Deserialize(json.rewards))\n        #this.mRewardList.Add(versusRankReward)\n    #returntrue\nreturn this\n",
    "VersusRule": "def VersusRule(json):\n    this={}#VersusRulejson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['id'] = json['id']\n    if 'vsmode' in json:\n        this['mode'] = ENUM['VS_MODE'][json['vsmode']]\n    if 'getcoin' in json:\n        this['coin'] = json['getcoin']\n    if 'rate' in json:\n        this['coinrate'] = json['rate']<=0?1:json['rate']\n    #try\n        #if(!string.IsNullOrEmpty(json.begin_at))\n        if 'begin_at' in json:\n            this['begin_at'] = DateTime.Parse\n        #if(!string.IsNullOrEmpty(json.end_at))\n        if 'end_at' in json:\n            this['end_at'] = DateTime.Parse\n    #catch(Exceptionex)\n        #DebugUtility.LogError(ex.Message)\n        #returnfalse\n    #returntrue\nreturn this\n",
    "VersusSchedule": "def VersusSchedule(json):\n    this={}#VersusSchedulejson)\n    #if(json==null)\n    #return\n    if 'tower_iname' in json:\n        this['tower_iname'] = json['tower_iname']\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'begin_at' in json:\n        this['begin_at'] = json['begin_at']\n    if 'end_at' in json:\n        this['end_at'] = json['end_at']\n    if 'gift_begin_at' in json:\n        this['gift_begin_at'] = json['gift_begin_at']\n    if 'gift_end_at' in json:\n        this['gift_end_at'] = json['gift_end_at']\n    #try\n        #this.BeginDate=DateTime.Parse(this.begin_at)\n        #this.EndDate=DateTime.Parse(this.end_at)\n        #this.GiftBeginDate=DateTime.Parse(this.gift_begin_at)\n        #this.GiftEndDate=DateTime.Parse(this.gift_end_at)\n    #catch(Exceptionex)\n        #DebugUtility.Log(ex.ToString())\nreturn this\n",
    "VersusStreakWinBonus": "def VersusStreakWinBonus(json):\n    this={}#VersusStreakWinBonusjson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['id'] = json['id']\n    if 'wincnt' in json:\n        this['wincnt'] = json['wincnt']\n    #if(json.rewards!=null)\n        #intlength=json.rewards.Length\n        #this.rewards=newVersusWinBonusRewardParam[length]\n        #if(this.rewards!=null)\n            #for(intindex=0index<length++index)\n                #this.rewards=newVersusWinBonusRewardParam()\n                this['']\n                this['rewards']\n                if 'rewards' in json:\n                    this['rewards']['type'] = ENUM['VERSUS_REWARD_TYPE'][json['rewards']]\n                this['rewards']\n                if 'rewards' in json:\n                    this['rewards']['iname'] = json['rewards'].item_iname\n                this['rewards']\n                if 'rewards' in json:\n                    this['rewards']['num'] = json['rewards'].item_num\n    #returntrue\nreturn this\n",
    "VersusStreakWinSchedule": "def VersusStreakWinSchedule(json):\n    this={}#VersusStreakWinSchedulejson)\n    #if(json==null)\n    #returnfalse\n    if 'id' in json:\n        this['id'] = json['id']\n    #try\n        if 'judge' in json:\n            this['judge'] = ENUM['STREAK_JUDGE'][json['judge']]\n        #if(!string.IsNullOrEmpty(json.begin_at))\n        if 'begin_at' in json:\n            this['begin_at'] = DateTime.Parse\n        #if(!string.IsNullOrEmpty(json.end_at))\n        if 'end_at' in json:\n            this['end_at'] = DateTime.Parse\n    #catch(Exceptionex)\n        #DebugUtility.LogError(ex.Message)\n        #returnfalse\n    #returntrue\nreturn this\n",
    "VersusTowerParam": "def VersusTowerParam(json):\n    this={}#VersusTowerParamjson)\n    #if(json==null)\n    #return\n    if 'vstower_id' in json:\n        this['VersusTowerID'] = json['vstower_id']\n    if 'iname' in json:\n        this['FloorName'] = json['iname']\n    if 'floor' in json:\n        this['Floor'] = json['floor']\n    if 'rankup_num' in json:\n        this['RankupNum'] = json['rankup_num']\n    if 'win_num' in json:\n        this['WinNum'] = json['win_num']\n    if 'lose_num' in json:\n        this['LoseNum'] = json['lose_num']\n    if 'bonus_num' in json:\n        this['BonusNum'] = json['bonus_num']\n    if 'downfloor' in json:\n        this['DownFloor'] = json['downfloor']\n    if 'resetfloor' in json:\n        this['ResetFloor'] = json['resetfloor']\n    #if(json.winitem!=null&&json.win_itemnum!=null)\n        #if(json.winitem.Length!=json.win_itemnum.Length)\n        #Debug.LogError((object)\"VersusTowerParam[WinItem]isInvalid\")\n        if 'winitem' in json:\n            this['WinIteminame'] = newOString[json['winitem'].Length]\n        #for(intindex=0index<json.winitem.Length++index)\n        if 'winitem' in json:\n            this['WinIteminame'] = json['winitem']\n        #for(intindex=0index<json.win_itemnum.Length++index)\n        if 'win_itemnum' in json:\n            this['WinItemNum'] = json['win_itemnum']\n    #if(json.joinitem!=null&&json.join_itemnum!=null)\n        #if(json.joinitem.Length!=json.join_itemnum.Length)\n        #Debug.LogError((object)\"VersusTowerParam[LoseItem]isInvalid\")\n        if 'joinitem' in json:\n            this['JoinIteminame'] = newOString[json['joinitem'].Length]\n        #for(intindex=0index<json.joinitem.Length++index)\n        if 'joinitem' in json:\n            this['JoinIteminame'] = json['joinitem']\n        #for(intindex=0index<json.join_itemnum.Length++index)\n        if 'join_itemnum' in json:\n            this['JoinItemNum'] = json['join_itemnum']\n    #if(json.spbtl_item!=null&&json.spbtl_itemnum!=null)\n        #if(json.spbtl_item.Length!=json.spbtl_itemnum.Length)\n        #Debug.LogError((object)\"VersusTowerParam[SpecialItem]isInvalid\")\n        if 'spbtl_item' in json:\n            this['SpIteminame'] = newOString[json['spbtl_item'].Length]\n        #for(intindex=0index<json.spbtl_item.Length++index)\n        if 'spbtl_item' in json:\n            this['SpIteminame'] = json['spbtl_item']\n        #for(intindex=0index<json.spbtl_itemnum.Length++index)\n        if 'spbtl_itemnum' in json:\n            this['SpItemnum'] = json['spbtl_itemnum']\n    #if(json.season_item!=null&&json.season_itemnum!=null&&json.season_itype!=null)\n        #if(json.season_item.Length!=json.season_itemnum.Length)\n        #Debug.LogError((object)\"VersusTowerParam[SeasonItem]isInvalid\")\n        if 'season_item' in json:\n            this['SeasonIteminame'] = newOString[json['season_item'].Length]\n        if 'season_itype' in json:\n            this['SeasonItemType'] = newVERSUS_ITEM_TYPE[json['season_itype'].Length]\n        #for(intindex=0index<json.season_item.Length++index)\n        if 'season_item' in json:\n            this['SeasonIteminame'] = json['season_item']\n        #for(intindex=0index<json.season_itype.Length++index)\n        if 'season_itype' in json:\n            this['SeasonItemType'] = ENUM['VERSUS_ITEM_TYPE'][json['season_itype']]\n        #for(intindex=0index<json.season_itemnum.Length++index)\n        if 'season_itemnum' in json:\n            this['SeasonItemnum'] = json['season_itemnum']\n    #if(string.IsNullOrEmpty(json.arrival_item))\n    #return\n    if 'arrival_item' in json:\n        this['ArrivalIteminame'] = json['arrival_item']\n    if 'arrival_type' in json:\n        this['ArrivalItemType'] = ENUM['VERSUS_ITEM_TYPE'][json['arrival_type']]\n    if 'arrival_num' in json:\n        this['ArrivalItemNum'] = json['arrival_num']\nreturn this\n",
    "ViewGuild": "def ViewGuild(json):\n    this={}#ViewGuildjson)\n    if 'id' in json:\n        this['id'] = json['id']\n    if 'name' in json:\n        this['name'] = json['name']\n    if 'award_id' in json:\n        this['award_id'] = json['award_id']\n    if 'level' in json:\n        this['level'] = json['level']\n    if 'count' in json:\n        this['count'] = json['count']\n    if 'max_count' in json:\n        this['max_count'] = json['max_count']\nreturn this\n",
    "VipParam": "def VipParam(json):\n    this={}#VipParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'exp' in json:\n        this['NextRankNeedPoint'] = json['exp']\n    if 'ticket' in json:\n        this['Ticket'] = json['ticket']\n    if 'buy_coin_bonus' in json:\n        this['BuyCoinBonus'] = json['buy_coin_bonus']\n    if 'buy_coin_num' in json:\n        this['BuyCoinNum'] = json['buy_coin_num']\n    if 'buy_stmn_num' in json:\n        this['BuyStaminaNum'] = json['buy_stmn_num']\n    if 'reset_elite' in json:\n        this['ResetEliteNum'] = json['reset_elite']\n    if 'reset_arena' in json:\n        this['ResetArenaNum'] = json['reset_arena']\n    #returntrue\nreturn this\n",
    "WeaponParam": "def WeaponParam(json):\n    this={}#WeaponParamjson)\n    #if(json==null)\n    #returnfalse\n    if 'iname' in json:\n        this['iname'] = json['iname']\n    if 'atk' in json:\n        this['atk'] = json['atk']\n    if 'formula' in json:\n        this['formula'] = json['formula']\n    #returntrue\nreturn this\n",
    "WeatherParam": "def WeatherParam(json):\n    this={}#WeatherParamjson)\n    #if(json==null)\n    #return\n    if 'iname' in json:\n        this['mIname'] = json['iname']\n    if 'name' in json:\n        this['mName'] = json['name']\n    if 'expr' in json:\n        this['mExpr'] = json['expr']\n    if 'icon' in json:\n        this['mIcon'] = json['icon']\n    if 'effect' in json:\n        this['mEffect'] = json['effect']\n    #this.mBuffIdLists.Clear()\n    #if(json.buff_ids!=null)\n        #foreach(stringbuffIdinjson.buff_ids)\n        #this.mBuffIdLists.Add(buffId)\n    #this.mCondIdLists.Clear()\n    #if(json.cond_ids==null)\n    #return\n    #foreach(stringcondIdinjson.cond_ids)\n    #this.mCondIdLists.Add(condId)\nreturn this\n",
    "WeatherSetParam": "def WeatherSetParam(json):\n    this={}#WeatherSetParamjson)\n    #if(json==null)\n    #return\n    if 'iname' in json:\n        this['mIname'] = json['iname']\n    if 'name' in json:\n        this['mName'] = json['name']\n    #this.mStartWeatherIdLists.Clear()\n    #if(json.st_wth!=null)\n        #foreach(stringstrinjson.st_wth)\n        #this.mStartWeatherIdLists.Add(str)\n    #this.mStartWeatherRateLists.Clear()\n    #if(json.st_rate!=null)\n        #foreach(intnuminjson.st_rate)\n        #this.mStartWeatherRateLists.Add(num)\n    #if(this.mStartWeatherIdLists.Count>this.mStartWeatherRateLists.Count)\n        #for(intindex=0index<this.mStartWeatherIdLists.Count-this.mStartWeatherRateLists.Count++index)\n        #this.mStartWeatherRateLists.Add(0)\n    if 'ch_cl_min' in json:\n        this['mChangeClockMin'] = json['ch_cl_min']\n    if 'ch_cl_max' in json:\n        this['mChangeClockMax'] = json['ch_cl_max']\n    #if(this.mChangeClockMin>this.mChangeClockMax)\n    #this.mChangeClockMax=this.mChangeClockMin\n    #this.mChangeWeatherIdLists.Clear()\n    #if(json.ch_wth!=null)\n        #foreach(stringstrinjson.ch_wth)\n        #this.mChangeWeatherIdLists.Add(str)\n    #this.mChangeWeatherRateLists.Clear()\n    #if(json.ch_rate!=null)\n        #foreach(intnuminjson.ch_rate)\n        #this.mChangeWeatherRateLists.Add(num)\n    #if(this.mChangeWeatherIdLists.Count<=this.mChangeWeatherRateLists.Count)\n    #return\n    #for(intindex=0index<this.mChangeWeatherIdLists.Count-this.mChangeWeatherRateLists.Count++index)\n    #this.mChangeWeatherRateLists.Add(0)\nreturn this\n"
}
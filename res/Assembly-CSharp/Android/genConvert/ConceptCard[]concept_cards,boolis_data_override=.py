def ConceptCardconcept_cards,boolis_data_override=(json):
    this={}#ConceptCardconcept_cards,boolis_data_override=true)
    #if(is_data_override&&(concept_cards==null||concept_cards.Length<=0))
        #this.mConceptCards.Clear()
        #this.mConceptCardNum.Clear()
    #else
        #if(concept_cards==null)
        #return
        #for(inti=0i<concept_cards.Length++i)
            #ConceptCardDataconceptCardData=this.FindConceptCardByUniqueID(concept_cards[i].iid)
            #if(conceptCardData==null)
                #try
                    #conceptCardData=newConceptCardData()
                    #conceptCardData.Deserialize(concept_cards[i])
                    #this.mConceptCards.Add(conceptCardData)
                #catch(Exceptionex)
                    #DebugUtility.LogException(ex)
                    #continue
            #UnitDataunitData=this.Units.Find((Predicate<UnitData>)(ud=>
                #if(ud.ConceptCard!=null)
                #return(long)ud.ConceptCard.UniqueID==concept_cards[i].iid
                #returnfalse
                #}))
                #if(unitData!=null)
                #unitData.ConceptCard=conceptCardData
            #if(is_data_override)
                #inti=0
                #while(i<this.mConceptCards.Count)
                    #if(Array.Find<JSON_ConceptCard>(concept_cards,(Predicate<JSON_ConceptCard>)(p=>p.iid==(long)this.mConceptCards[i].UniqueID))!=null)
                        #++i
                    #else
                        #UnitDataunitData=this.Units.Find((Predicate<UnitData>)(ud=>
                            #if(ud.ConceptCard!=null)
                            #return(long)ud.ConceptCard.UniqueID==(long)this.mConceptCards[i].UniqueID
                            #returnfalse
                            #}))
                            #if(unitData!=null)
                            #unitData.ConceptCard=(ConceptCardData)null
                            #this.mConceptCards.RemoveAt(i)
                #this.UpdateConceptCardNum()
        #
        #publicvoidDeserialize(JSON_ConceptCardMaterialconcept_card_materials,boolis_data_override=true)
            #if(is_data_override&&(concept_card_materials==null||concept_card_materials.Length<=0))
                #this.mConceptCardExpMaterials.Clear()
                #this.mConceptCardTrustMaterials.Clear()
            #else
                #if(concept_card_materials==null)
                #return
                #this.mConceptCardExpMaterials.Clear()
                #this.mConceptCardTrustMaterials.Clear()
                #for(intindex=0index<concept_card_materials.Length++index)
                    #ConceptCardParamconceptCardParam=MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam(concept_card_materials.iname)
                    #if(conceptCardParam!=null)
                        #try
                            #ConceptCardMaterialDatacardMaterialData=newConceptCardMaterialData()
                            #cardMaterialData.Deserialize(concept_card_materials)
                            #if(conceptCardParam.type==eCardType.Enhance_exp)
                            #this.mConceptCardExpMaterials.Add(cardMaterialData)
                            #elseif(conceptCardParam.type==eCardType.Enhance_trust)
                            #this.mConceptCardTrustMaterials.Add(cardMaterialData)
                        #catch(Exceptionex)
                            #DebugUtility.LogException(ex)
        #
        #publicvoidDeserialize(stringinames)
            #this.mSkinConceptCards.Clear()
            #if(inames==null)
            #return
            #for(intindex=0index<inames.Length++index)
                #SkinConceptCardDataskinConceptCardData=newSkinConceptCardData()
                #skinConceptCardData.Deserialize(inames)
                #this.mSkinConceptCards.Add(skinConceptCardData)
        #
        #publicvoidDeserialize(Json_Skinskins)
            #if(this.mSkins==null)
            #this.mSkins=newList<string>()
            #this.mSkins.Clear()
            #if(skins==null||skins.Length<1)
            #return
            #for(intindex=0index<skins.Length++index)
                #if(skins!=null&&!string.IsNullOrEmpty(skins.iname))
                #this.mSkins.Add(skins.iname)
        #
        #publicvoidDeserialize(Json_Partyparties)
            #for(intindex=0index<this.mPartys.Count++index)
            #this.mPartys.Reset()
            #if(parties==null)
            #thrownewInvalidJSONException()
            #for(intindex1=0index1<parties.Length++index1)
                #intindex2=index1
                #if(!string.IsNullOrEmpty(parties[index1].ptype))
                #index2=(int)PartyData.GetPartyTypeFromString(parties[index1].ptype)
                #this.mPartys[index2].Deserialize(parties[index1])
                #intlastSelectionIndex=0
                #PartyWindow2.EditPartyTypeseditPartyType=((PlayerPartyTypes)index2).ToEditPartyType()
                #if(PartyUtility.LoadTeamPresets(editPartyType,outlastSelectionIndex,false)==null)
                    #intmaxTeamCount=editPartyType.GetMaxTeamCount()
                    #List<PartyEditData>teams=newList<PartyEditData>()
                    #for(intindex3=0index3<maxTeamCount++index3)
                        #PartyEditDatapartyEditData=newPartyEditData(PartyUtility.CreateDefaultPartyNameFromIndex(index3),this.mPartys[index2])
                        #teams.Add(partyEditData)
                    #PartyUtility.SaveTeamPresets(editPartyType,0,teams,false)
        #
        #publicboolDeserialize(Json_Mailmails)
            #this.Mails.Clear()
            #if(mails==null)
            #returntrue
            #for(intindex=0index<mails.Length++index)
                #MailDatamailData=newMailData()
                #if(!mailData.Deserialize(mails))
                    #DebugUtility.Assert("FailedMailDeserialize.")
                    #returnfalse
                #this.Mails.Add(mailData)
            #returntrue
        #
        #publicboolDeserialize(Json_Mailsmails)
            #this.MailPage=newMailPageData()
            #if(mails==null)
            #returnfalse
            #this.MailPage.Deserialize(mails.list)
            #this.MailPage.Deserialize(mails.option)
            #returntrue
        #
        #publicvoidDeserialize(Json_Friendfriends)
            #this.Deserialize(friends,FriendStates.Friend)
            #this.Deserialize(friends,FriendStates.Follwer)
            #this.Deserialize(friends,FriendStates.Follow)
        #
        #publicvoidDeserialize(Json_Friendfriends,FriendStatesstate)
            #switch(state)
                #caseFriendStates.Friend:
                #this.Friends.Clear()
                #break
                #caseFriendStates.Follow:
                #this.FriendsFollow.Clear()
                #break
                #caseFriendStates.Follwer:
                #this.FriendsFollower.Clear()
                #break
                #default:
                #return
            #if(friends==null)
            #return
            #for(intindex=0index<friends.Length++index)
                #FriendDatafriendData=newFriendData()
                #try
                    #friendData.Deserialize(friends)
                    #if(friendData.State==state)
                        #switch(friendData.State)
                            #caseFriendStates.Friend:
                            #this.Friends.Add(friendData)
                            #continue
                            #caseFriendStates.Follow:
                            #this.FriendsFollow.Add(friendData)
                            #continue
                            #caseFriendStates.Follwer:
                            #this.FriendsFollower.Add(friendData)
                            #continue
                            #default:
                            #continue
                #catch(Exceptionex)
                    #DebugUtility.LogException(ex)
            #if(state!=FriendStates.Friend)
                #if(state!=FriendStates.Follwer)
                #return
                #this.FollowerNum=this.FriendsFollower.Count
            #else
            #this.FriendNum=this.Friends.Count
        #
        #publicvoidDeserialize(Json_Supportsupports)
            #this.Supports.Clear()
            #if(supports==null)
            #return
            #for(intindex=0index<supports.Length++index)
                #SupportDatasupportData=newSupportData()
                #try
                    #supportData.Deserialize(supports)
                    #this.Supports.Add(supportData)
                #catch(Exceptionex)
                    #DebugUtility.LogException(ex)
        #
        #publicvoidDeserialize(Json_MultiFuidsfuids)
            #this.MultiFuids.Clear()
            #if(fuids==null)
            #return
            #for(intindex=0index<fuids.Length++index)
                #MultiFuidmultiFuid=newMultiFuid()
                #try
                    #multiFuid.Deserialize(fuids)
                    #this.MultiFuids.Add(multiFuid)
                #catch(Exceptionex)
                    #DebugUtility.LogException(ex)
        #
        #publicvoidDeserialize(FriendPresentWishList.Jsonjsons)
            #try
                #this.FriendPresentWishList.Clear()
                #if(jsons==null)
                #return
                #this.FriendPresentWishList.Deserialize(jsons)
            #catch(Exceptionex)
                #DebugUtility.LogException(ex)
        #
        #publicvoidDeserialize(FriendPresentReceiveList.Jsonjsons)
            #try
                #this.FriendPresentReceiveList.Clear()
                #if(jsons==null)
                #return
                #this.FriendPresentReceiveList.Deserialize(jsons)
            #catch(Exceptionex)
                #DebugUtility.LogException(ex)
        #
        #publicboolDeserialize(Json_Notifynotify)
            #if(notify==null)
            #returntrue
            #this.mFirstLogin=(notify.bonus>>5&1)!=0
            #this.mLoginBonusCount=notify.bonus&31
            #this.mLoginBonus=notify.logbonus
            #this.mLoginBonus28days=(Json_LoginBonusTable)null
            #this.mPremiumLoginBonus=(Json_LoginBonusTable)null
            #if(notify.logbotables!=null)
                #for(intindex=0index<notify.logbotables.Length++index)
                    #if(notify.logbotables!=null&&!string.IsNullOrEmpty(notify.logbotables.type))
                        #this.mLoginBonusTables[notify.logbotables.type]=notify.logbotables
                        #if(this.mFirstLogin)
                        #this.mLoginBonusQueue.Enqueue(notify.logbotables.type)
                        #if(notify.logbotables.bonus_units!=null&&notify.logbotables.premium_bonuses==null)
                        #this.mLoginBonus28days=notify.logbotables
                        #elseif(notify.logbotables.premium_bonuses!=null)
                        #this.mPremiumLoginBonus=notify.logbotables
            #this.SupportCount=1
            #this.SupportGold=notify.supgold
            #returntrue
        #
        #publicvoidDeserialize(Json_Versusjson)
            #VERSUS_TYPEtype=VERSUS_TYPE.Free
            if 'point' in json:
                this['mVersusPoint'] = json['point']
            #if(json.counts==null)
            #return
            #for(intindex=0index<json.counts.Length++index)
                #if(string.Compare(json.counts.type,VERSUS_TYPE.Free.ToString().ToLower())==0)
                #type=VERSUS_TYPE.Free
                #elseif(string.Compare(json.counts.type,VERSUS_TYPE.Tower.ToString().ToLower())==0)
                #type=VERSUS_TYPE.Tower
                #elseif(string.Compare(json.counts.type,VERSUS_TYPE.Friend.ToString().ToLower())==0)
                #type=VERSUS_TYPE.Friend
                #this.SetVersusWinCount(type,json.counts.win)
                #this.SetVersusTotalCount(type,json.counts.win+json.counts.lose)
        #
        #publicvoidSetVersusWinCount(VERSUS_TYPEtype,intwincnt)
            #if(type!=VERSUS_TYPE.Free&&type!=VERSUS_TYPE.Tower&&type!=VERSUS_TYPE.Friend)
            #return
            #this.mVersusWinCount[(int)type]=wincnt
        #
        #publicvoidAddVersusTotalCount(VERSUS_TYPEtype,intaddcnt)
            #if(type!=VERSUS_TYPE.Free&&type!=VERSUS_TYPE.Tower&&type!=VERSUS_TYPE.Friend)
            #return
            #this.mVersusTotalCount[(int)type]=addcnt+this.mVersusTotalCount[(int)type]
        #
        #publicvoidSetVersusTotalCount(VERSUS_TYPEtype,intcnt)
            #if(type!=VERSUS_TYPE.Free&&type!=VERSUS_TYPE.Tower&&type!=VERSUS_TYPE.Friend)
            #return
            #this.mVersusTotalCount[(int)type]=cnt
        #
        #publicvoidSetVersusRankpoint(intpoint)
            #this.mVersusPoint=point
        #
        #publicvoidSetHaveAward(stringawards)
            #if(awards==null||awards.Length<=0)
            #return
            #this.mHaveAward.Clear()
            #for(intindex=0index<awards.Length++index)
                #if(!string.IsNullOrEmpty(awards))
                #this.mHaveAward.Add(awards)
        #
        #publicvoidDeserialize(JSON_PlayerGuildplayer_guild)
            #this.mPlayerGuild=(PlayerGuildData)null
            #if(player_guild==null)
            #return
            #try
                #this.mPlayerGuild=newPlayerGuildData()
                #this.mPlayerGuild.Deserialize(player_guild)
            #catch(Exceptionex)
                #DebugUtility.LogException(ex)
        #
        #publicvoidDeserialize(JSON_Guildguild)
            #if(guild!=null)
                #try
                    #if(this.mGuild==null)
                    #this.mGuild=newGuildData()
                    #this.mGuild.Deserialize(guild)
                #catch(Exceptionex)
                    #DebugUtility.LogException(ex)
            #else
            #this.mGuild=(GuildData)null
        #
        #publicboolIsFirstLogin
            #get
                #returnthis.mFirstLogin
        #
        #publicvoidForceFirstLogin()
            #this.mFirstLogin=true
        #
        #publicintLoginCountWithType(stringtype)
            #if(string.IsNullOrEmpty(type)||!this.mLoginBonusTables.ContainsKey(type))
            #return0
            #returnthis.mLoginBonusTables[type].count
        #
        #publicJson_LoginBonusRecentLoginBonus
            #get
                #if(this.LoginBonus!=null&&0<this.mLoginBonusCount&&this.mLoginBonusCount<=this.LoginBonus.Length)
                #returnthis.LoginBonus[this.mLoginBonusCount-1]
                #return(Json_LoginBonus)null
        #
        #publicJson_LoginBonusFindRecentLoginBonus(stringtype)
            #Json_LoginBonusloginBonuses=this.FindLoginBonuses(type)
            #if(loginBonuses==null)
            #return(Json_LoginBonus)null
            #intnum=this.LoginCountWithType(type)
            #if(num<1||loginBonuses.Length<num)
            #return(Json_LoginBonus)null
            #returnloginBonuses[num-1]
        #
        #publicJson_LoginBonusTableLoginBonus28days
            #get
                #returnthis.mLoginBonus28days
        #
        #publicJson_LoginBonusLoginBonus
            #get
                #returnthis.mLoginBonus
        #
        #publicJson_LoginBonusFindLoginBonuses(stringtype)
            #if(string.IsNullOrEmpty(type))
            #returnthis.mLoginBonus
            #if(!this.mLoginBonusTables.ContainsKey(type))
            #return(Json_LoginBonus)null
            #returnthis.mLoginBonusTables[type].bonuses
        #
        #publicJson_LoginBonusTablePremiumLoginBonus
            #get
                #returnthis.mPremiumLoginBonus
        #
        #publicintLoginBonusCount
            #get
                #returnthis.mLoginBonusCount
        #
        #publicstringGetLoginBonusePrefabName(stringtype)
            #if(string.IsNullOrEmpty(type))
            #return(string)null
            #if(!this.mLoginBonusTables.ContainsKey(type))
            #return(string)null
            #returnthis.mLoginBonusTables[type].prefab
        #
        #publicstringGetLoginBonuseUnitIDs(stringtype)
            #if(string.IsNullOrEmpty(type))
            #return(string)null
            #if(!this.mLoginBonusTables.ContainsKey(type))
            #return(string)null
            #returnthis.mLoginBonusTables[type].bonus_units
        #
        #publicboolIsLastLoginBonus(stringtype)
            #if(string.IsNullOrEmpty(type)||!this.mLoginBonusTables.ContainsKey(type))
            #returnfalse
            #returnthis.mLoginBonusTables[type].lastday>0
        #
        #publicboolCheckUnlock(UnlockTargetstarget)
            #return((UnlockTargets)(int)this.mUnlocks&target)!=(UnlockTargets)0
        #
        #publicvoidSetParty(intindex,PartyDataparty)
            #if(index<0||index>this.mPartys.Count-1)
            #return
            #this.mPartys.SetParty(party)
        #
        #publicUnitDataFindUnitDataByUnitID(stringiname)
            #for(intindex=0index<this.mUnits.Count++index)
                #if(iname==this.mUnits.UnitParam.iname)
                #returnthis.mUnits
            #return(UnitData)null
        #
        #publicUnitDataFindUnitDataByUniqueID(longiid)
            #try
                #returnthis.mUniqueID2UnitData[iid]
            #catch(Exceptionex)
                #return(UnitData)null
        #
        #publicUnitDataFindUnitDataByUniqueParam(UnitParamunit)
            #for(intindex=0index<this.mUnits.Count++index)
                #if(unit==this.mUnits.UnitParam)
                #returnthis.mUnits
            #return(UnitData)null
        #
        #publicPartyDataFindPartyOfType(PlayerPartyTypestype)
            #returnthis.mPartys[(int)type]
        #
        #publicvoidSetQuestState(stringname,QuestStatesst)
            #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(name)
            #if(quest==null)
            #return
            #quest.state=st
            #this.mQuestListDirty=true
        #
        #publicvoidResetQuestStates()
            #QuestParamquests=MonoSingleton<GameManager>.Instance.Quests
            #for(intindex=quests.Length-1index>=0--index)
            #quests.state=QuestStates.New
            #this.mQuestListDirty=true
        #
        #publicvoidResetQuestChallengeResets()
            #QuestParamquests=MonoSingleton<GameManager>.Instance.Quests
            #for(intindex=quests.Length-1index>=0--index)
                #if(quests.dayReset>0)
                    #DateTimedateTime=TimeManager.FromUnixTime(quests.end-quests.start)
                    #if(quests.dayReset>=dateTime.Day)
                    #quests.dailyReset=(short)0
            #this.mQuestListDirty=true
        #
        #publicvoidResetQuestChallenges()
            #QuestParamquests=MonoSingleton<GameManager>.Instance.Quests
            #for(intindex=quests.Length-1index>=0--index)
                #if(quests.dayReset>0)
                    #DateTimedateTime=TimeManager.FromUnixTime(quests.end-quests.start)
                    #if(quests.dayReset>=dateTime.Day)
                    #quests.dailyCount=(short)0
            #this.mQuestListDirty=true
        #
        #publicvoidMarkQuestChallenged(stringname)
            #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(name)
            #if(quest==null||quest.state!=QuestStates.New)
            #return
            #this.SetQuestState(name,QuestStates.Challenged)
        #
        #publicvoidMarkQuestCleared(stringname)
            #this.SetQuestState(name,QuestStates.Cleared)
        #
        #publicQuestParamFindLastStoryQuest()
            #QuestParamavailableQuests=this.AvailableQuests
            #intnum=0
            #stringiname=PlayerPrefsUtility.GetString(PlayerPrefsUtility.LAST_SELECTED_STORY_QUEST_ID,string.Empty)
            #if(!string.IsNullOrEmpty(iname))
                #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(iname)
                #if(quest!=null&&quest.Chapter!=null&&(quest.Chapter.sectionParam!=null&&quest.Chapter.sectionParam.storyPart>0))
                #num=quest.Chapter.sectionParam.storyPart
            #for(intindex1=0index1<availableQuests.Length++index1)
                #if(availableQuests[index1].IsStory&&!string.IsNullOrEmpty(availableQuests[index1].ChapterID)&&(num<=0||availableQuests[index1].Chapter==null||(availableQuests[index1].Chapter.sectionParam==null||num==availableQuests[index1].Chapter.sectionParam.storyPart)))
                    #QuestParamquestParam=availableQuests[index1]
                    #for(intindex2=index1+1index2<availableQuests.Length++index2)
                        #if(availableQuests[index2].IsStory&&(num<=0||availableQuests[index2].Chapter==null||(availableQuests[index2].Chapter.sectionParam==null||num==availableQuests[index2].Chapter.sectionParam.storyPart)))
                            #questParam=availableQuests[index2]
                            #if(availableQuests[index2].state!=QuestStates.Cleared)
                            #returnavailableQuests[index2]
                    #returnquestParam
            #return(QuestParam)null
        #
        #publicvoidSetQuestMissionFlags(stringname,boolmissions)
            #intmissions1=0
            #if(missions!=null)
                #for(intindex=0index<missions.Length++index)
                    #if(missions)
                    #missions1|=1<<index
            #this.SetQuestMissionFlags(name,missions1)
        #
        #publicvoidSetQuestMissionFlags(stringname,intmissions)
            #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(name)
            #if(quest==null)
            #return
            #quest.clear_missions|=missions
        #
        #publicboolIsQuestArchiveOpenByArea(stringchapterIname)
            #ArchiveParamarchiveByArea=MonoSingleton<GameManager>.Instance.FindArchiveByArea(chapterIname)
            #if(archiveByArea!=null)
            #returnthis.IsQuestArchiveOpen(archiveByArea.iname)
            #returnfalse
        #
        #publicboolIsQuestArchiveOpen(stringiname)
            #return!string.IsNullOrEmpty(iname)&&this.OpenedQuestArchives!=null&&(this.OpenedQuestArchives.Any<OpenedQuestArchive>((Func<OpenedQuestArchive,bool>)(t=>t.iname.Equals(iname)))&&this.OpenedQuestArchives.Find((Predicate<OpenedQuestArchive>)(t=>t.iname.Equals(iname))).end_at>TimeManager.ServerTime)
        #
        #publicOpenedQuestArchiveGetOpenedQuestArchive(stringiname)
            #OpenedQuestArchiveopenedQuestArchive=this.OpenedQuestArchives.Find((Predicate<OpenedQuestArchive>)(t=>t.iname.Equals(iname)))
            #if(openedQuestArchive!=null&&openedQuestArchive.end_at>TimeManager.ServerTime)
            #returnopenedQuestArchive
            #return(OpenedQuestArchive)null
        #
        #publicvoidSetQuestChallengeNumDaily(stringname,intnum)
            #MonoSingleton<GameManager>.Instance.FindQuest(name)?.SetChallangeCount(num)
        #
        #publicvoidIncrementQuestChallangeNumDaily(stringname)
            #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(name)
            #if(quest==null)
            #return
            #intnum=quest.GetChallangeCount()+1
            #this.SetQuestChallengeNumDaily(name,num)
        #
        #publicboolHasItem(stringiname)
            #ItemDataitemDataByItemId=this.FindItemDataByItemID(iname)
            #if(itemDataByItemId!=null)
            #returnitemDataByItemId.Num>0
            #returnfalse
        #
        #publicintGetItemAmount(stringiname)
            #ItemDataitemDataByItemId=this.FindItemDataByItemID(iname)
            #if(itemDataByItemId!=null)
            #returnitemDataByItemId.Num
            #return0
        #
        #publicItemDataFindItemDataByItemID(stringiname)
            #if(string.IsNullOrEmpty(iname))
            #return(ItemData)null
            #returnthis.mItems.Find((Predicate<ItemData>)(p=>p.ItemID==iname))
        #
        #publicItemDataFindItemDataByItemParam(ItemParamparam)
            #returnthis.mItems.Find((Predicate<ItemData>)(p=>p.Param==param))
        #
        #publicItemDataFindInventoryByItemID(stringiname)
            #if(string.IsNullOrEmpty(iname))
            #return(ItemData)null
            #for(intindex=0index<this.mInventory.Length++index)
                #if(this.mInventory!=null&&iname==this.mInventory.ItemID)
                #returnthis.mInventory
            #return(ItemData)null
        #
        #publicArtifactDataFindArtifactByUniqueID(longiid)
            #returnthis.mArtifacts.Find((Predicate<ArtifactData>)(p=>(long)p.UniqueID==iid))
        #
        #publicList<ArtifactData>FindArtifactsByIDs(HashSet<string>ids)
            #returnthis.mArtifacts.FindAll((Predicate<ArtifactData>)(artifact=>ids.Contains(artifact.ArtifactParam.iname)))
        #
        #publicList<ArtifactData>FindArtifactsByArtifactID(stringiname)
            #returnthis.mArtifacts.FindAll((Predicate<ArtifactData>)(p=>p.ArtifactParam.iname==iname))
        #
        #publicboolFindOwner(ArtifactDataarti,outUnitDataunit,outJobDatajob)
            #unit=(UnitData)null
            #job=(JobData)null
            #for(intindex1=0index1<this.mUnits.Count++index1)
                #for(intindex2=0index2<this.mUnits[index1].Jobs.Length++index2)
                    #for(intindex3=0index3<this.mUnits[index1].Jobs[index2].Artifacts.Length++index3)
                        #if(this.mUnits[index1].Jobs[index2].Artifacts[index3]==(long)arti.UniqueID)
                            #unit=this.mUnits[index1]
                            #job=this.mUnits[index1].Jobs[index2]
                            #returntrue
            #returnfalse
        #
        #publicvoidSetPartyCurrentIndex(intindex)
            #for(intindex1=0index1<this.mPartys.Count++index1)
            #this.mPartys[index1].Selected=index==index1
        #
        #publicintGetDefensePartyIndex()
            #for(intindex=1index<this.mPartys.Count++index)
                #if(this.mPartys.IsDefense)
                #returnindex
            #return0
        #
        #publicvoidSetDefenseParty(intindex)
            #for(intindex1=0index1<this.mPartys.Count++index1)
            #this.mPartys[index1].IsDefense=index==index1
        #
        #publicintGetPartyCurrentIndex()
            #for(intindex=0index<this.mPartys.Count++index)
                #if(this.mPartys.Selected)
                #returnindex
            #return0
        #
        #publicPartyDataGetPartyCurrent()
            #returnthis.Partys[this.GetPartyCurrentIndex()]
        #
        #publicvoidAutoSetLeaderUnit()
            #List<UnitData>units=MonoSingleton<GameManager>.Instance.Player.Units
            #if(units.Count<=0)
            #return
            #for(intindex1=0index1<this.mPartys.Count++index1)
                #PartyDatamParty=this.mPartys[index1]
                #if(mParty.GetUnitUniqueID(0)==0L)
                    #for(intindex2=0index2<units.Count++index2)
                        #UnitDataunitData=units[index2]
                        #if(unitData!=null)
                            #boolflag=false
                            #for(intindex3=0index3<mParty.MAX_UNIT++index3)
                                #if(mParty.GetUnitUniqueID(index3)==unitData.UniqueID)
                                    #flag=true
                                    #break
                            #if(!flag)
                                #mParty.SetUnitUniqueID(0,unitData.UniqueID)
                                #break
        #
        #publicstaticintCalcLevelFromExp(intcurrent)
            #MasterParammasterParam=MonoSingleton<GameManager>.Instance.MasterParam
            #intplayerLevelCap=masterParam.GetPlayerLevelCap()
            #intnum=0
            #intval1=0
            #for(intindex=0index<playerLevelCap++index)
                #num+=masterParam.GetPlayerNextExp(index+1)
                #if(num>current)
                #returnval1
                #++val1
            #returnMath.Min(Math.Max(val1,1),playerLevelCap)
        #
        #publicintCalcLevel()
            #returnPlayerData.CalcLevelFromExp((int)this.mExp)
        #
        #publicintGetLevelExp()
            #returnMonoSingleton<GameManager>.Instance.MasterParam.GetPlayerNextExp((int)this.mLv)
        #
        #publicintGetExp()
            #return(int)this.mExp-MonoSingleton<GameManager>.Instance.MasterParam.GetPlayerLevelExp((int)this.mLv)
        #
        #publicintGetNextExp()
            #MasterParammasterParam=MonoSingleton<GameManager>.Instance.MasterParam
            #intplayerLevelCap=masterParam.GetPlayerLevelCap()
            #intnum=0
            #for(intindex=0index<playerLevelCap++index)
                #num+=masterParam.GetPlayerNextExp(index+1)
                #if(num>(int)this.mExp)
                #returnnum-(int)this.mExp
            #return0
        #
        #publicvoidGainExp(intexp)
            #intmLv=(int)this.mLv
            #PlayerDataplayerData=this
            #playerData.mExp=(OInt)((int)playerData.mExp+exp)
            #this.mLv=(OInt)this.CalcLevel()
            #if(mLv==(int)this.mLv)
            #return
            #this.PlayerLevelUp((int)this.mLv-mLv)
        #
        #privatevoidPlayerLevelUp(intdelta)
            #GameManagerinstance=MonoSingleton<GameManager>.Instance
            #this.mStamina.valMax=instance.MasterParam.GetPlayerParam((int)this.mLv).pt
            #this.mStamina.val=(OInt)Math.Min((int)this.mStamina.val+(int)instance.MasterParam.FixParam.StaminaAdd2*delta,this.StaminaStockCap)
            #this.UpdateUnlocks()
            #if(Network.Mode!=Network.EConnectMode.Offline)
            #return
            #this.SavePlayerPrefs()
        #
        #publicstaticintCalcVipRankFromPoint(intcurrent)
            #if(current==0)
            #return0
            #MasterParammasterParam=MonoSingleton<GameManager>.Instance.MasterParam
            #intnum1=0
            #intnum2=0
            #intvipRankCap=masterParam.GetVipRankCap()
            #for(intindex=0index<vipRankCap++index)
                #num1+=masterParam.GetVipRankNextPoint(index+1)
                #if(num1<=current)
                #++num2
            #returnnum2
        #
        #publicvoidGainVipPoint(intpoint)
        #
        #publicvoidAddPaymentInfo(stringproductId,intnum=1)
            #if(this.PaymentInfos.ContainsKey(productId))
            #this.PaymentInfos[productId].AddNum(num)
            #else
            #this.PaymentInfos.Add(productId,newPaymentInfo(productId,num))
        #
        #publicvoidUpdateUnlocks()
            #UnlockTargetsunlockTargets=(UnlockTargets)0
            #this.mUnlocks=(OInt)0
            #foreach(UnlockParamunlockinMonoSingleton<GameManager>.Instance.MasterParam.Unlocks)
                #if(unlock!=null)
                    #unlockTargets|=unlock.UnlockTarget
                    #if(unlock.PlayerLevel<=this.Lv&&unlock.VipRank<=this.VipRank)
                        #PlayerDataplayerData=this
                        #playerData.mUnlocks=(OInt)((int)((UnlockTargets)(int)playerData.mUnlocks|unlock.UnlockTarget))
            #PlayerDataplayerData1=this
            #playerData1.mUnlocks=(OInt)((int)((UnlockTargets)(int)playerData1.mUnlocks|~unlockTargets))
        #
        #publicvoidGainGold(intgold)
            #this.mGold=(OInt)Math.Max((int)this.mGold+gold,0)
        #
        #privateItemDataFindByItemID(stringitemID)
            #try
                #returnthis.mID2ItemData[itemID]
            #catch(Exceptionex)
                #return(ItemData)null
        #
        #publicboolCheckFreeGachaGold()
            #DateTimedateTime1=TimeManager.FromUnixTime(Network.GetServerTime())
            #DateTimedateTime2=TimeManager.FromUnixTime(this.FreeGachaGold.at)
            #if(dateTime1.Year<dateTime2.Year||dateTime1.Month<dateTime2.Month||(dateTime1.Day<dateTime2.Day||this.FreeGachaGold.num==0))
            #returntrue
            #if(this.FreeGachaGold.num==(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.FreeGachaGoldMax)
            #returnfalse
            #returnthis.GetNextFreeGachaGoldCoolDownSec()==0L
        #
        #publicboolCheckFreeGachaGoldMax()
            #DateTimedateTime1=TimeManager.FromUnixTime(Network.GetServerTime())
            #DateTimedateTime2=TimeManager.FromUnixTime(this.FreeGachaGold.at)
            #if(dateTime1.Year<dateTime2.Year||dateTime1.Month<dateTime2.Month||dateTime1.Day<dateTime2.Day)
            #returnfalse
            #returnthis.FreeGachaGold.num==(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.FreeGachaGoldMax
        #
        #publiclongGetNextFreeGachaGoldCoolDownSec()
            #longserverTime=Network.GetServerTime()
            #DateTimedateTime1=TimeManager.FromUnixTime(serverTime)
            #DateTimedateTime2=TimeManager.FromUnixTime(this.FreeGachaGold.at)
            #if(dateTime1.Year<dateTime2.Year||dateTime1.Month<dateTime2.Month||dateTime1.Day<dateTime2.Day)
            #return0
            #returnMath.Max((long)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.FreeGachaGoldCoolDownSec-(serverTime-this.FreeGachaGold.at),0L)
        #
        #publicboolCheckFreeGachaCoin()
            #returnthis.GetNextFreeGachaCoinCoolDownSec()==0L
        #
        #publiclongGetNextFreeGachaCoinCoolDownSec()
            #returnMath.Max((long)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.FreeGachaCoinCoolDownSec-(Network.GetServerTime()-this.FreeGachaCoin.at),0L)
        #
        #publicboolCheckPaidGacha()
            #returnthis.PaidGacha.num==0
        #
        #publicvoidSetInventory(intindex,ItemDataitem)
            #if(0>index||index>=this.mInventory.Length)
            #return
            #this.mInventory=item
        #
        #publicvoidSaveInventory()
            #for(intindex=0index<this.mInventory.Length++index)
                #if(this.mInventory!=null)
                #PlayerPrefsUtility.SetString(PlayerPrefsUtility.PLAYERDATA_INVENTORY+(object)index,this.mInventory.ItemID,false)
                #else
                #PlayerPrefsUtility.DeleteKey(PlayerPrefsUtility.PLAYERDATA_INVENTORY+(object)index)
        #
        #publicvoidUpdateInventory()
            #for(intindex=0index<this.mInventory.Length++index)
                #this.mInventory=(ItemData)null
                #if(PlayerPrefsUtility.HasKey(PlayerPrefsUtility.PLAYERDATA_INVENTORY+(object)index))
                    #stringiname=PlayerPrefsUtility.GetString(PlayerPrefsUtility.PLAYERDATA_INVENTORY+(object)index,string.Empty)
                    #if(!string.IsNullOrEmpty(iname))
                        #ItemDataitemDataByItemId=this.FindItemDataByItemID(iname)
                        #if(itemDataByItemId!=null)
                        #this.mInventory=itemDataByItemId
        #
        #publicboolUseExpPotion(UnitDataunit,ItemDataitem)
            #if(item==null||item.Param==null||(item.Num<=0||item.ItemType!=EItemType.ExpUpUnit))
            #returnfalse
            #unit.GainExp(item.Param.value,MonoSingleton<GameManager>.Instance.Player.Lv)
            #item.Used(1)
            #returntrue
        #
        #publicboolCheckFriend(stringfuid)
            #if(string.IsNullOrEmpty(fuid))
            #returnfalse
            #FriendDatafriendData=this.Friends.Find((Predicate<FriendData>)(p=>p.FUID==fuid))
            #if(friendData!=null)
            #returnfriendData.IsFriend()
            #returnfalse
        #
        #publicvoidRemoveFriendFollowerAll()
            #MonoSingleton<GameManager>.Instance.Player.FriendsFollower.Clear()
            #this.FollowerNum=0
        #
        #publicvoidRemoveFriendFollower(stringfuid)
            #if(string.IsNullOrEmpty(fuid))
            #return
            #FriendDatafriendData=this.FriendsFollower.Find((Predicate<FriendData>)(p=>p.FUID==fuid))
            #if(friendData==null)
            #return
            #this.FriendsFollower.Remove(friendData)
            #--this.FollowerNum
        #
        #publicboolCheckEnableEquipUnit(ItemParamitem)
            #if(item==null||item.type!=EItemType.Equip)
            #returnfalse
            #for(intindex=0index<this.Units.Count++index)
                #if(this.Units.CheckEnableEquipment(item))
                #returntrue
            #returnfalse
        #
        #publicboolCheckEnableCreateItem(ItemParamparam,boolroot=true,intneedNum=1,NeedEquipItemListitem_list=null)
            #boolis_ikkatsu=false
            #returnthis.CheckEnableCreateItem(param,refis_ikkatsu,root,needNum,item_list)
        #
        #publicboolCheckEnableCreateItem(ItemParamparam,refboolis_ikkatsu,boolroot=true,intneedNum=1,NeedEquipItemListitem_list=null)
            #if(root)
                #this.mConsumeMaterials.Clear()
                #this.mCreateItemCost=0
                #is_ikkatsu=false
            #if(param==null||string.IsNullOrEmpty(param.recipe))
                #if(item_list!=null&&param.IsCommon&&(int)param.cmn_type-1==2)
                #item_list.Add(param,1,true)
                #returnfalse
            #RecipeParamrecipe=param.Recipe
            #if(recipe==null||recipe.items==null)
            #returnfalse
            #this.mCreateItemCost+=recipe.cost*needNum
            #boolflag=true
            #for(intindex=0index<recipe.items.Length++index)
                #RecipeItemrecipeItem=recipe.items
                #ItemDataitemDataByItemId=this.FindItemDataByItemID(recipeItem.iname)
                #intval1=itemDataByItemId==null?0:itemDataByItemId.Num
                #intnum1=recipeItem.num*needNum
                #if(this.mConsumeMaterials.ContainsKey(recipeItem.iname))
                    #intnum2=Math.Min(Math.Max(val1-this.mConsumeMaterials[recipeItem.iname],0),num1)
                    #if(num2>0)
                        #Dictionary<string,int>consumeMaterials
                        #stringiname
                        #(consumeMaterials=this.mConsumeMaterials)[iname=recipeItem.iname]=consumeMaterials[iname]+num2
                        #num1-=num2
                #else
                    #intnum2=Math.Min(val1,num1)
                    #if(num2>0)
                        #this.mConsumeMaterials.Add(recipeItem.iname,num2)
                        #num1-=num2
                #if(num1>0)
                    #ItemParamitemParam=MonoSingleton<GameManager>.GetInstanceDirect().GetItemParam(recipeItem.iname)
                    #if(item_list!=null)
                        #boolis_common=itemParam.IsCommon&&index==0
                        #if(is_common)
                        #item_list.Add(itemParam,num1,false)
                        #elseif(!itemParam.IsCommon&&string.IsNullOrEmpty(itemParam.recipe))
                        #item_list.IsNotEnough=true
                        #item_list.SetRecipeTree(newRecipeTree(itemParam),is_common)
                    #if(!this.CheckEnableCreateItem(itemParam,refis_ikkatsu,false,num1,item_list))
                    #flag=false
                    #item_list?.UpRecipeTree()
                    #if(itemParam.recipe!=null)
                    #is_ikkatsu=true
            #returnflag
        #
        #publicboolCheckEnableCreateItem(ItemParamparam,refboolis_ikkatsu,refintcost,refDictionary<string,int>consumes,NeedEquipItemListitem_list=null)
            #returnthis.CheckEnableCreateItem(param,1,refis_ikkatsu,refcost,refconsumes,item_list)
        #
        #publicboolCheckEnableCreateItem(ItemParamparam,intcount,refboolis_ikkatsu,refintcost,refDictionary<string,int>consumes,NeedEquipItemListitem_list=null)
            #boolflag=this.CheckEnableCreateItem(param,refis_ikkatsu,true,count,item_list)
            #cost=this.mCreateItemCost
            #consumes=this.mConsumeMaterials
            #returnflag
        #
        #publicintGetCreateItemCost(ItemParamparam)
            #boolis_ikkatsu=false
            #this.CheckEnableCreateItem(param,refis_ikkatsu,true,1,(NeedEquipItemList)null)
            #returnthis.mCreateItemCost
        #
        #publicboolCheckEnableCreateEquipItemAll(UnitDataself,EquipDataequips,refDictionary<string,int>consume,refintcost,NeedEquipItemListitem_list=null)
            #if(self==null||equips==null)
            #returnfalse
            #this.mConsumeMaterials.Clear()
            #this.mCreateItemCost=0
            #for(intindex=0index<equips.Length++index)
                #EquipDataequip=equips
                #if(equip==null||equip.ItemParam.equipLv>self.Lv)
                    #if(item_list!=null)
                    #item_list.IsNotEnough=true
                    #returnfalse
                #if(!equip.IsEquiped())
                    #ItemDataitemDataByItemParam=this.FindItemDataByItemParam(equip.ItemParam)
                    #intval1=itemDataByItemParam==null?0:itemDataByItemParam.Num
                    #intnum1=1
                    #if(this.mConsumeMaterials.ContainsKey(equip.ItemID))
                        #intnum2=Math.Min(Math.Max(val1-this.mConsumeMaterials[equip.ItemID],0),num1)
                        #if(num2>0)
                            #Dictionary<string,int>consumeMaterials
                            #stringitemId
                            #(consumeMaterials=this.mConsumeMaterials)[itemId=equip.ItemID]=consumeMaterials[itemId]+num2
                            #num1-=num2
                    #else
                        #intnum2=Math.Min(val1,num1)
                        #if(num2>0)
                            #this.mConsumeMaterials.Add(equip.ItemID,num2)
                            #num1-=num2
                    #if(num1!=0&&!this.CheckEnableCreateItem(equips.ItemParam,false,num1,item_list))
                        #if(equips.ItemParam.Recipe==null&&(int)equips.ItemParam.cmn_type-1!=2)
                            #if(item_list!=null)
                            #item_list.IsNotEnough=true
                            #returnfalse
                        #if(item_list==null||!item_list.IsEnoughCommon())
                        #returnfalse
            #consume=this.mConsumeMaterials
            #cost=this.mCreateItemCost
            #if(this.Gold>=cost)
            #returntrue
            #if(item_list!=null)
            #item_list.IsNotEnough=true
            #returnfalse
        #
        #publicboolCheckEnableCreateEquipItemAll(UnitDataself,EquipDataequips,NeedEquipItemListitem_list=null)
            #returnthis.CheckEnableCreateEquipItemAll(self,equips,refthis.mConsumeMaterials,refthis.mCreateItemCost,item_list)
        #
        #publicboolCheckEnable2(UnitDataself,EquipDataequips_base,refDictionary<string,int>consume,refintcost,refinttarget_rank,refboolcan_jobmaster,refboolcan_jobmax,NeedEquipItemListitem_list=null)
            #JobParamjobParam=MonoSingleton<GameManager>.Instance.MasterParam.GetJobParam(self.CurrentJob.JobID)
            #intrank=self.CurrentJob.Rank
            #intjobRankCap=self.CurrentJob.GetJobRankCap(self)
            #this.mConsumeMaterials.Clear()
            #this.mCreateItemCost=0
            #EquipDataequips=newEquipData[6]
            #for(intlv=ranklv<=jobRankCap++lv)
                #boolequipItemAll2
                #if(lv==rank)
                    #equipItemAll2=this.CheckEnableCreateEquipItemAll2(self,equips_base,item_list)
                #else
                    #for(intindex=0index<equips.Length++index)
                        #equips=newEquipData()
                        #equips.Setup(jobParam.GetRankupItemID(lv,index))
                    #equipItemAll2=this.CheckEnableCreateEquipItemAll2(self,equips,item_list)
                #if(equipItemAll2)
                    #if(jobRankCap==JobParam.MAX_JOB_RANK&&lv==jobRankCap&&equipItemAll2)
                    #can_jobmaster=true
                    #if(lv==jobRankCap)
                    #can_jobmax=true
                    #consume=newDictionary<string,int>((IDictionary<string,int>)this.mConsumeMaterials)
                    #cost=this.mCreateItemCost
                    #target_rank=Mathf.Min(lv+1,jobRankCap)
                #else
                #break
            #returntrue
        #
        #publicboolCheckEnableCreateEquipItemAll2(UnitDataself,EquipDataequips,NeedEquipItemListitem_list=null)
            #if(self==null||equips==null)
            #returnfalse
            #for(intindex=0index<equips.Length++index)
                #EquipDataequip=equips
                #if(equip==null||string.IsNullOrEmpty(equip.ItemID)||equip.ItemParam.equipLv>self.Lv)
                #returnfalse
                #if(!equip.IsEquiped())
                    #ItemDataitemDataByItemParam=this.FindItemDataByItemParam(equip.ItemParam)
                    #intval1=itemDataByItemParam==null?0:itemDataByItemParam.Num
                    #intnum1=1
                    #if(this.mConsumeMaterials.ContainsKey(equip.ItemID))
                        #intnum2=Math.Min(Math.Max(val1-this.mConsumeMaterials[equip.ItemID],0),num1)
                        #if(num2>0)
                            #Dictionary<string,int>consumeMaterials
                            #stringitemId
                            #(consumeMaterials=this.mConsumeMaterials)[itemId=equip.ItemID]=consumeMaterials[itemId]+num2
                            #num1-=num2
                    #else
                        #intnum2=Math.Min(val1,num1)
                        #if(num2>0)
                            #this.mConsumeMaterials.Add(equip.ItemID,num2)
                            #num1-=num2
                    #if(num1!=0&&!this.CheckEnableCreateItem(equip.ItemParam,false,num1,item_list)&&(item_list==null||!item_list.IsEnoughCommon()))
                        #item_list?.Remove()
                        #returnfalse
            #if(this.Gold>=this.mCreateItemCost)
            #returntrue
            #if(item_list!=null)
            #item_list.IsNotEnough=true
            #returnfalse
        #
        #publicboolSetUnitEquipment(UnitDataunit,intslotIndex)
            #if(!unit.CurrentJob.CheckEnableEquipSlot(slotIndex))
                #Debug.LogError((object)"指定スロットに装備を装着する事はできません。")
                #returnfalse
            #ItemDataitemDataByItemId=this.FindItemDataByItemID(unit.GetRankupEquipData(unit.JobIndex,slotIndex).ItemID)
            #if(itemDataByItemId==null||itemDataByItemId.Num<=0)
                #Debug.LogError((object)"装備アイテムを所持していません。")
                #returnfalse
            #unit.CurrentJob.Equip(slotIndex)
            #unit.CalcStatus()
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)
            #returntrue
        #
        #publicboolRarityUpUnit(UnitDataunit)
            #if(!unit.CheckUnitRarityUp())
            #returnfalse
            #RecipeParamrarityUpRecipe=unit.GetRarityUpRecipe()
            #if(rarityUpRecipe.cost>(int)this.mGold||!unit.UnitRarityUp())
            #returnfalse
            #PlayerDataplayerData=this
            #playerData.mGold=(OInt)((int)playerData.mGold-rarityUpRecipe.cost)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.UnitUnlock)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)
            #returntrue
        #
        #privatevoidConsumeAwakePieces(UnitDataunit,intnum)
            #ItemDataitemDataByItemId1=this.FindItemDataByItemID(unit.UnitParam.piece)
            #ItemDataitemDataByItemId2=this.FindItemDataByItemID(unit.UnitParam.piece)
            #ItemDataitemDataByItemId3=this.FindItemDataByItemID(unit.UnitParam.piece)
            #if(itemDataByItemId1!=null&&itemDataByItemId1.Num>0)
                #intnum1=itemDataByItemId1.Num<num?itemDataByItemId1.Num:num
                #itemDataByItemId1.Used(num1)
                #num-=num1
            #if(num<1)
            #return
            #if(itemDataByItemId2!=null&&itemDataByItemId2.Num>0)
                #intnum1=itemDataByItemId2.Num<num?itemDataByItemId2.Num:num
                #itemDataByItemId2.Used(num1)
                #num-=num1
            #if(num<1)
            #return
            #if(itemDataByItemId3!=null&&itemDataByItemId3.Num>0)
                #intnum1=itemDataByItemId3.Num<num?itemDataByItemId3.Num:num
                #itemDataByItemId3.Used(num1)
                #num-=num1
            #if(num<1)
            #return
            #Debug.LogError((object)("減算できていない欠片個数:"+(object)num))
        #
        #publicboolAwakingUnit(UnitDataunit)
            #if(!unit.CheckUnitAwaking())
            #returnfalse
            #intawakeNeedPieces=unit.GetAwakeNeedPieces()
            #if(!unit.UnitAwaking())
            #returnfalse
            #this.ConsumeAwakePieces(unit,awakeNeedPieces)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.UnitUnlock)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)
            #returntrue
        #
        #publicList<ItemData>GetJobRankUpReturnItemData(UnitDataself,intjobNo,boolignoreEquiped=false)
            #returnself.GetJobRankUpReturnItemData(jobNo,ignoreEquiped)
        #
        #publicboolJobRankUpUnit(UnitDataunit,intjobIndex)
            #if(!unit.CheckJobRankUpAllEquip(jobIndex,true))
            #returnfalse
            #unit.JobRankUp(jobIndex)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.UnitUnlock)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)
            #returntrue
        #
        #publicboolClassChangeUnit(UnitDataunit,intindex)
            #if(!unit.CheckJobClassChange(index))
            #returnfalse
            #unit.JobClassChange(index)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.Unit)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.UnitUnlock)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.ItemEquipment)
            #returntrue
        #
        #publicboolCheckRankUpAbility(AbilityDataability)
            #returnability.Rank<ability.GetRankCap()&&this.AbilityRankUpCountNum!=0&&this.Gold>=MonoSingleton<GameManager>.Instance.MasterParam.GetAbilityNextGold(ability.Rank)
        #
        #publicboolRankUpAbility(AbilityDataability,boolis_update_badges=true)
            #if(!this.CheckRankUpAbility(ability))
            #returnfalse
            #this.GainGold(-ability.GetNextGold())
            #ability.GainExp(1)
            #this.mAbilityRankUpCount.val=(OInt)Math.Max((int)(--this.mAbilityRankUpCount.val),0)
            #if(is_update_badges)
            #MonoSingleton<GameManager>.Instance.RequestUpdateBadges(GameManager.BadgeTypes.DailyMission)
            #returntrue
        #
        #publicvoidGainItem(stringitemID,intnum)
            #ItemDatabyItemId=this.FindByItemID(itemID)
            #if(byItemId==null)
                #ItemDataitemData=newItemData()
                #itemData.Setup(0L,itemID,num)
                #itemData.IsNew=true
                #itemData.IsNewSkin=itemData.Param!=null&&itemData.Param.type==EItemType.UnitSkin
                #this.Items.Add(itemData)
            #else
            #byItemId.Gain(num)
        #
        #publicvoidGainUnit(stringunitID)
            #UnitParamunitParam=MonoSingleton<GameManager>.Instance.MasterParam.GetUnitParam(unitID)
            #UnitDataunitData=newUnitData()
            #List<long>longList=newList<long>()
            #foreach(UnitDatamUnitinthis.mUnits)
            #longList.Add(mUnit.UniqueID)
            #longuniqueID=1
            #for(longindex=1index<1000L++index)
                #boolflag=false
                #foreach(longnuminlongList)
                    #if(index==num)
                        #flag=true
                        #break
                #if(!flag)
                    #uniqueID=index
                    #break
            #Json_Unitjson=newJson_Unit(){iid=uniqueID,iname=unitParam.iname,exp=0,lv=1,plus=0,rare=0,select=newJson_UnitSelectable()}
            #json.select.job=0L
            #json.jobs=(Json_Job)null
            #json.abil=(Json_MasterAbility)null
            #if(unitParam.jobsets!=null&&unitParam.jobsets.Length>0)
                #List<Json_Job>jsonJobList=newList<Json_Job>(unitParam.jobsets.Length)
                #intnum=1
                #for(intindex=0index<unitParam.jobsets.Length++index)
                    #JobSetParamjobSetParam=MonoSingleton<GameManager>.Instance.GetJobSetParam(unitParam.jobsets)
                    #if(jobSetParam!=null)
                    #jsonJobList.Add(newJson_Job()
                        #iid=(long)num++,
                        #iname=jobSetParam.job,
                        #rank=0,
                        #equips=(Json_Equip)null,
                        #abils=(Json_Ability)null,
                        #artis=(Json_Artifact)null
                        #})
                    #for(intindex=0index<unitParam.jobsets.Length++index)
                        #JobSetParamjobSetParam=MonoSingleton<GameManager>.Instance.GetJobSetParam(unitParam.jobsets)
                        #while(!string.IsNullOrEmpty(jobSetParam.jobchange))
                            #jobSetParam=MonoSingleton<GameManager>.Instance.GetJobSetParam(jobSetParam.jobchange)
                            #if(jobSetParam!=null)
                            #jsonJobList.Add(newJson_Job()
                                #iid=(long)num++,
                                #iname=jobSetParam.job,
                                #rank=0,
                                #equips=(Json_Equip)null,
                                #abils=(Json_Ability)null,
                                #artis=(Json_Artifact)null
                                #})
                                #else
                                #break
                        #json.jobs=jsonJobList.ToArray()
                    #unitData.Deserialize(json)
                    #unitData.SetUniqueID(uniqueID)
                    #unitData.JobRankUp(0)
                    #this.mUnits.Add(unitData)
                    #this.mUniqueID2UnitData[unitData.UniqueID]=unitData
                #
                #publicvoidGainUnit(UnitDataunit)
                    #this.mUnits.Add(unit)
                    #this.mUniqueID2UnitData[unit.UniqueID]=unit
                #
                #publicList<UnitData>GetSortedUnits(stringmenuID,boolincludeShujinko=true)
                    #GameUtility.UnitSortModessortMode=GameUtility.UnitSortModes.Time
                    #boolascending=false
                    #if(!string.IsNullOrEmpty(menuID)&&PlayerPrefsUtility.HasKey(menuID))
                        #stringstr=PlayerPrefsUtility.GetString(menuID,string.Empty)
                        #ascending=PlayerPrefsUtility.GetInt(menuID+"#",0)!=0
                        #try
                            #sortMode=(GameUtility.UnitSortModes)Enum.Parse(typeof(GameUtility.UnitSortModes),str,true)
                        #catch(Exceptionex)
                    #returnthis.GetSortedUnits(sortMode,ascending,includeShujinko)
                #
                #publicList<UnitData>GetSortedUnits(GameUtility.UnitSortModessortMode,boolascending=false,boolincludeShujinko=true)
                    #List<UnitData>units1=MonoSingleton<GameManager>.Instance.Player.Units
                    #List<UnitData>units2=newList<UnitData>()
                    #for(intindex=0index<units1.Count++index)
                        #UnitDataunitData=units1
                        #if(includeShujinko||!unitData.UnitParam.IsHero())
                        #units2.Add(unitData)
                    #intsortValues=(int)null
                    #if(sortMode!=GameUtility.UnitSortModes.Time)
                    #GameUtility.SortUnits(units2,sortMode,false,outsortValues,true)
                    #else
                    #ascending=!ascending
                    #if(ascending)
                    #units2.Reverse()
                    #returnunits2
                #
                #publicUnitDataGetUnitData(longiid)
                    #for(intindex=0index<this.mUnits.Count++index)
                        #if(this.mUnits.UniqueID==iid)
                        #returnthis.mUnits
                    #return(UnitData)null
                #
                #publicintGetItemSlotAmount()
                    #intnum=0
                    #for(intindex=0index<this.mItems.Count++index)
                        #if(this.mItems.Num!=0)
                        #++num
                    #returnnum
                #
                #publicboolCheckConceptCardCapacity(intadddValue)
                    #return(int)GlobalVars.ConceptCardNum+adddValue<=this.ConceptCardCap
                #
                #publicboolCheckItemCapacity(ItemParamitem,intnum)
                    #returnthis.GetItemAmount(item.iname)+num<=item.cap
                #
                #publicCreateItemResultCheckCreateItem(ItemParamitem)
                    #if(item==null||string.IsNullOrEmpty(item.recipe))
                    #returnCreateItemResult.NotEnough
                    #RecipeParamrecipeParam=MonoSingleton<GameManager>.Instance.GetRecipeParam(item.recipe)
                    #if(recipeParam==null)
                    #returnCreateItemResult.NotEnough
                    #boolflag=false
                    #for(intindex=0index<recipeParam.items.Length++index)
                        #RecipeItemrecipeItem=recipeParam.items
                        #intnum=recipeItem.num
                        #intitemAmount1=this.GetItemAmount(recipeItem.iname)
                        #if(itemAmount1<num)
                            #ItemParamitemParam=MonoSingleton<GameManager>.Instance.GetItemParam(recipeItem.iname)
                            #if(itemParam==null||!itemParam.IsCommon)
                            #returnCreateItemResult.NotEnough
                            #intitemAmount2=this.GetItemAmount(MonoSingleton<GameManager>.Instance.MasterParam.GetCommonEquip(itemParam,false).iname)
                            #if(itemAmount1+itemAmount2<num)
                            #returnCreateItemResult.NotEnough
                            #flag=true
                    #returnflag?CreateItemResult.CanCreateCommon:CreateItemResult.CanCreate
                #
                #publicboolCreateItem(ItemParamitem)
                    #RecipeParamrecipeParam=MonoSingleton<GameManager>.Instance.GetRecipeParam(item.recipe)
                    #if(!this.CheckItemCapacity(item,1)||recipeParam.cost>this.Gold||this.CheckCreateItem(item)==CreateItemResult.NotEnough)
                    #returnfalse
                    #this.GainGold(-recipeParam.cost)
                    #for(intindex=0index<recipeParam.items.Length++index)
                        #RecipeItemrecipeItem=recipeParam.items
                        #this.GainItem(recipeItem.iname,-recipeItem.num)
                    #this.GainItem(item.iname,1)
                    #returntrue
                #
                #publicboolCreateItemAll(ItemParamitem)
                    #if(!this.CheckItemCapacity(item,1))
                    #returnfalse
                    #Dictionary<string,int>consumes=(Dictionary<string,int>)null
                    #boolis_ikkatsu=false
                    #intcost=0
                    #if(!this.CheckEnableCreateItem(item,refis_ikkatsu,refcost,refconsumes,(NeedEquipItemList)null)||cost>this.Gold)
                    #returnfalse
                    #this.GainGold(-cost)
                    #if(consumes!=null)
                        #foreach(stringkeyinconsumes.Keys)
                        #this.GainItem(key,-consumes[key])
                    #this.GainItem(item.iname,1)
                    #returntrue
                #
                #publicboolCheckEnableConvertGold()
                    #returnthis.Items.Find((Predicate<ItemData>)(item=>
                        #if(item.ItemType==EItemType.GoldConvert)
                        #returnitem.Num>0
                        #returnfalse
                        #}))!=null
                    #
                    #publicShopDataGetShopData(EShopTypetype)
                        #if(type==EShopType.Limited)
                        #returnthis.GetLimitedShopData().GetShopData()
                        #if(type==EShopType.Event)
                        #returnthis.GetEventShopData().GetShopData()
                        #returnthis.mShops[(int)type]
                    #
                    #publicvoidSetShopData(EShopTypetype,ShopDatashop)
                        #switch(type)
                            #caseEShopType.Event:
                            #this.mEventShops.SetShopData(shop)
                            #break
                            #caseEShopType.Limited:
                            #this.mLimitedShops.SetShopData(shop)
                            #break
                        #this.mShops[(int)type]=shop
                    #
                    #publicLimitedShopDataGetLimitedShopData()
                        #returnthis.mLimitedShops
                    #
                    #publicvoidSetLimitedShopData(LimitedShopDatashop)
                        #this.mLimitedShops=shop
                    #
                    #publicEventShopDataGetEventShopData()
                        #returnthis.mEventShops
                    #
                    #publicvoidSetEventShopData(EventShopDatashop)
                        #this.mEventShops=shop
                    #
                    #publicboolCheckUnlockShopType(EShopTypetype)
                        #UnlockTargetsunlockTargets=type.ToUnlockTargets()
                        #if(unlockTargets!=(UnlockTargets)0)
                        #returnthis.CheckUnlock(unlockTargets)
                        #returnfalse
                    #
                    #publicstringGetShopName(EShopTypetype)
                        #stringkey=string.Empty
                        #switch(type)
                            #caseEShopType.Normal:
                            #key="sys.SHOPNAME_NORMAL"
                            #break
                            #caseEShopType.Tabi:
                            #key="sys.SHOPNAME_TABI"
                            #break
                            #caseEShopType.Kimagure:
                            #key="sys.SHOPNAME_KIMAGURE"
                            #break
                            #caseEShopType.Monozuki:
                            #key="sys.SHOPNAME_MONOZUKI"
                            #break
                            #caseEShopType.Tour:
                            #key="sys.SHOPNAME_TOUR"
                            #break
                            #caseEShopType.Arena:
                            #key="sys.SHOPNAME_ARENA"
                            #break
                            #caseEShopType.Multi:
                            #key="sys.SHOPNAME_MULTI"
                            #break
                            #caseEShopType.AwakePiece:
                            #key="sys.SHOPNAME_KAKERA"
                            #break
                            #caseEShopType.Artifact:
                            #key="sys.SHOPNAME_ARTIFACT"
                            #break
                            #caseEShopType.Event:
                            #key="sys.SHOPNAME_EVENT"
                            #break
                            #caseEShopType.Limited:
                            #key="sys.SHOPNAME_LIMITED"
                            #break
                        #if(key==string.Empty)
                        #returnkey
                        #returnLocalizedText.Get(key)
                    #
                    #publicintGetShopUpdateCost(EShopTypetype,boolgetOldCost=false)
                        #ShopDatashopData=this.GetShopData(type)
                        #if(shopData==null)
                        #return0
                        #ShopParamshopParam=MonoSingleton<GameManager>.Instance.MasterParam.GetShopParam(type)
                        #if(shopParam==null||shopParam.UpdateCosts==null||shopParam.UpdateCosts.Length<=0)
                        #return0
                        #intupdateCount=shopData.UpdateCount
                        #if(getOldCost)
                        #--updateCount
                        #intindex=Mathf.Clamp(updateCount,0,shopParam.UpdateCosts.Length-1)
                        #returnshopParam.UpdateCosts
                    #
                    #publicintGetShopTypeCostAmount(ESaleTypetype)
                        #switch(type)
                            #caseESaleType.Gold:
                            #returnthis.Gold
                            #caseESaleType.Coin:
                            #returnthis.Coin
                            #caseESaleType.TourCoin:
                            #returnthis.TourCoin
                            #caseESaleType.ArenaCoin:
                            #returnthis.ArenaCoin
                            #caseESaleType.PiecePoint:
                            #returnthis.PiecePoint
                            #caseESaleType.MultiCoin:
                            #returnthis.MultiCoin
                            #caseESaleType.EventCoin:
                            #DebugUtility.Assert("Thereisnocommonpriceintheeventcoin.")
                            #return0
                            #caseESaleType.Coin_P:
                            #returnthis.PaidCoin
                            #default:
                            #return0
                    #
                    #publicboolCheckShopUpdateCost(EShopTypetype)
                        #if(this.GetShopData(type)==null)
                        #returnfalse
                        #ShopParamshopParam=MonoSingleton<GameManager>.Instance.MasterParam.GetShopParam(type)
                        #if(shopParam==null)
                        #returnfalse
                        #returnthis.GetShopUpdateCost(type,false)<=this.GetShopTypeCostAmount(shopParam.UpdateCostType)
                    #
                    #publicvoidDEBUG_BUY_ITEM_UPDATED(EShopTypeshoptype)
                        #ShopDatashopData=this.GetShopData(shoptype)
                        #ShopParamshopParam=MonoSingleton<GameManager>.Instance.MasterParam.GetShopParam(shoptype)
                        #if(shopData==null||shopParam==null||!this.CheckShopUpdateCost(shoptype))
                        #return
                        #for(intindex=0index<shopData.items.Count++index)
                        #shopData.items.is_soldout=false
                        #intshopUpdateCost=this.GetShopUpdateCost(shoptype,false)
                        #switch(shopParam.UpdateCostType)
                            #caseESaleType.Gold:
                            #this.mGold=(OInt)Math.Max((int)this.mGold-shopUpdateCost,0)
                            #break
                            #caseESaleType.Coin:
                            #this.DEBUG_CONSUME_COIN(shopUpdateCost)
                            #break
                            #caseESaleType.TourCoin:
                            #this.mTourCoin=(OInt)Math.Max((int)this.mTourCoin-shopUpdateCost,0)
                            #break
                            #caseESaleType.ArenaCoin:
                            #this.mArenaCoin=(OInt)Math.Max((int)this.mArenaCoin-shopUpdateCost,0)
                            #break
                            #caseESaleType.PiecePoint:
                            #this.mPiecePoint=(OInt)Math.Max((int)this.mPiecePoint-shopUpdateCost,0)
                            #break
                            #caseESaleType.MultiCoin:
                            #this.mMultiCoin=(OInt)Math.Max((int)this.mMultiCoin-shopUpdateCost,0)
                            #break
                            #caseESaleType.EventCoin:
                            #stringshopCostIname=GlobalVars.EventShopItem.shop_cost_iname
                            #this.SetEventCoinNum(shopCostIname,Math.Max(this.EventCoinNum(shopCostIname)-shopUpdateCost,0))
                            #break
                            #caseESaleType.Coin_P:
                            #this.DEBUG_CONSUME_PAID_COIN(shopUpdateCost)
                            #break
                    #
                    #publicvoidDEBUG_BUY_ITEM(EShopTypeshoptype,intindex)
                        #ShopDatashopData=this.GetShopData(shoptype)
                        #if(shopData==null)
                        #return
                        #ShopItemshopItem=shopData.items
                        #if(shopItem.is_soldout)
                        #return
                        #ItemDataitemDataByItemId=this.FindItemDataByItemID(shopItem.iname)
                        #if(itemDataByItemId!=null&&itemDataByItemId.Num==itemDataByItemId.HaveCap)
                        #return
                        #ItemParamitemParam=MonoSingleton<GameManager>.Instance.GetItemParam(shopItem.iname)
                        #switch(shopItem.saleType)
                            #caseESaleType.Gold:
                            #this.mGold=(OInt)Math.Max((int)this.mGold-itemParam.buy*shopItem.num,0)
                            #break
                            #caseESaleType.Coin:
                            #this.DEBUG_CONSUME_COIN(itemParam.coin*shopItem.num)
                            #break
                            #caseESaleType.TourCoin:
                            #this.mTourCoin=(OInt)Math.Max((int)this.mTourCoin-itemParam.tour_coin*shopItem.num,0)
                            #break
                            #caseESaleType.ArenaCoin:
                            #this.mArenaCoin=(OInt)Math.Max((int)this.mArenaCoin-itemParam.arena_coin*shopItem.num,0)
                            #break
                            #caseESaleType.PiecePoint:
                            #this.mPiecePoint=(OInt)Math.Max((int)this.mPiecePoint-itemParam.piece_point*shopItem.num,0)
                            #break
                            #caseESaleType.MultiCoin:
                            #this.mMultiCoin=(OInt)Math.Max((int)this.mMultiCoin-itemParam.multi_coin*shopItem.num,0)
                            #break
                            #caseESaleType.EventCoin:
                            #DebugUtility.Assert("Thereisnocommonpriceintheeventcoin.")
                            #break
                            #caseESaleType.Coin_P:
                            #this.DEBUG_CONSUME_PAID_COIN(itemParam.coin*shopItem.num)
                            #break
                        #this.GainItem(shopItem.iname,shopItem.num)
                        #shopItem.is_soldout=true
                    #
                    #publicDateTimeVipExpiredAt
                        #get
                            #returnTimeManager.FromUnixTime((long)this.mVipExpiredAt)
                    #
                    #publicboolCheckEnableVipCard()
                        #returnNetwork.GetServerTime()<(long)this.mVipExpiredAt
                    #
                    #publicDateTimePremiumExpiredAt
                        #get
                            #returnTimeManager.FromUnixTime((long)this.mPremiumExpiredAt)
                    #
                    #publicboolCheckEnablePremiumMember()
                        #returnNetwork.GetServerTime()<(long)this.mPremiumExpiredAt
                    #
                    #publicvoidSubAbilityRankUpCount(intvalue)
                        #this.mAbilityRankUpCount.SubValue(value)
                    #
                    #publicvoidRestoreAbilityRankUpCount()
                        #this.mAbilityRankUpCount.val=this.mAbilityRankUpCount.valMax
                        #this.mAbilityRankUpCount.at=(OLong)Network.GetServerTime()
                    #
                    #publicvoidSubStamina(intvalue)
                        #this.mStamina.SubValue(value)
                    #
                    #publiclongGetNextStaminaRecoverySec()
                        #returnthis.mStamina.GetNextRecoverySec()
                    #
                    #publicvoidUpdateStamina()
                        #this.mStamina.Update()
                    #
                    #publicintGetStaminaRecoveryCost(boolgetOldCost=false)
                        #FixParamfixParam=MonoSingleton<GameManager>.Instance.MasterParam.FixParam
                        #intmStaminaBuyNum=(int)this.mStaminaBuyNum
                        #if(getOldCost)
                        #--mStaminaBuyNum
                        #intindex=Math.Max(Math.Min(mStaminaBuyNum,fixParam.StaminaAddCost.Length-1),0)
                        #return(int)fixParam.StaminaAddCost
                    #
                    #publicvoidResetStaminaRecoverCount()
                        #this.mStaminaBuyNum=(OInt)0
                    #
                    #publicvoidResetBuyGoldNum()
                        #this.mGoldBuyNum=(OInt)0
                    #
                    #publicvoidSubCaveStamina(intvalue)
                        #this.mCaveStamina.SubValue(value)
                    #
                    #publiclongGetNextCaveStaminaRecoverySec()
                        #returnthis.mCaveStamina.GetNextRecoverySec()
                    #
                    #publicvoidUpdateCaveStamina()
                        #this.mCaveStamina.Update()
                    #
                    #publicintGetCaveStaminaRecoveryCost()
                        #FixParamfixParam=MonoSingleton<GameManager>.Instance.MasterParam.FixParam
                        #intindex=Math.Max(Math.Min(0,fixParam.CaveStaminaAddCost.Length),0)
                        #return(int)fixParam.CaveStaminaAddCost
                    #
                    #publiclongGetNextAbilityRankUpCountRecoverySec()
                        #returnthis.mAbilityRankUpCount.GetNextRecoverySec()
                    #
                    #publicvoidUpdateAbilityRankUpCount()
                        #this.mAbilityRankUpCount.Update()
                    #
                    #publicintArenaResetCount
                        #get
                            #returnthis.mArenaResetCount
                    #
                    #publicboolChallengeArena()
                        #if(this.ChallengeArenaNum>=this.ChallengeArenaMax)
                        #returnfalse
                        #--this.mChallengeArenaNum
                        #this.mChallengeArenaTimer.val=(OInt)0
                        #this.mChallengeArenaTimer.at=(OLong)Network.GetServerTime()
                        #returntrue
                    #
                    #publicboolCheckChangeArena()
                        #if(this.ChallengeArenaNum>=this.ChallengeArenaMax)
                        #returnfalse
                        #return(int)this.mChallengeArenaTimer.val==(int)this.mChallengeArenaTimer.valMax
                    #
                    #publiclongGetNextChallengeArenaCoolDownSec()
                        #returnthis.mChallengeArenaTimer.GetNextRecoverySec()
                    #
                    #publicvoidUpdateChallengeArenaTimer()
                        #this.mChallengeArenaTimer.Update()
                    #
                    #publicintGetChallengeArenaCost()
                        #FixParamfixParam=MonoSingleton<GameManager>.Instance.MasterParam.FixParam
                        #if(fixParam.ArenaResetTicketCost==null)
                        #return0
                        #intindex=Math.Max(Math.Min(this.mArenaResetCount,fixParam.ArenaResetTicketCost.Length-1),0)
                        #return(int)fixParam.ArenaResetTicketCost
                    #
                    #publicvoidInitPlayerPrefs()
                    #
                    #publicvoidDEBUG_GAIN_ALL_ITEMS()
                        #List<ItemParam>items=MonoSingleton<GameManager>.GetInstanceDirect().MasterParam.Items
                        #for(intindex=0index<items.Count++index)
                        #this.GainItem(items.iname,10)
                    #
                    #publicvoidDEBUG_TRASH_ALL_ITEMS()
                        #this.Items.Clear()
                    #
                    #publicvoidDEBUG_ADD_ARTIFACTS(ArtifactDataartifact)
                        #if(this.mArtifacts==null)
                        #this.mArtifacts=newList<ArtifactData>()
                        #if(artifact==null||this.mArtifacts.Contains(artifact))
                        #return
                        #this.AddArtifact(artifact)
                    #
                    #publicvoidDEBUG_GAIN_ALL_ARTIFACT()
                        #List<ArtifactParam>artifacts=MonoSingleton<GameManager>.Instance.MasterParam.Artifacts
                        #longnum=1
                        #for(intindex=0index<artifacts.Count++index)
                            #ArtifactParamartifactParam=artifacts
                            #if(artifactParam.is_create)
                                #Json_Artifactjson=newJson_Artifact()
                                #json.iid=num++
                                #json.exp=0
                                #json.iname=artifactParam.iname
                                #json.rare=artifactParam.rareini
                                #json.fav=0
                                #ArtifactDataartifactData=newArtifactData()
                                #artifactData.Deserialize(json)
                                #this.AddArtifact(artifactData)
                    #
                    #publicvoidDEBUG_TRASH_ALL_ARTIFACT()
                        #this.mArtifacts.Clear()
                        #this.mArtifactsNumByRarity.Clear()
                    #
                    #publicvoidLoadPlayerPrefs()
                        #boolflag1=true
                        #if(EditorPlayerPrefs.HasKey("Version"))
                        #flag1=PlayerData.PLAYRE_DATA_VERSION!=EditorPlayerPrefs.GetString("Version")
                        #if(flag1)
                        #this.InitPlayerPrefs()
                        #if(EditorPlayerPrefs.HasKey("Gold"))
                        #this.mGold=(OInt)EditorPlayerPrefs.GetInt("Gold")
                        #if(EditorPlayerPrefs.HasKey("PaidCoin"))
                        #this.mPaidCoin=(OInt)EditorPlayerPrefs.GetInt("PaidCoin")
                        #if(EditorPlayerPrefs.HasKey("FreeCoin"))
                        #this.mFreeCoin=(OInt)EditorPlayerPrefs.GetInt("FreeCoin")
                        #if(EditorPlayerPrefs.HasKey("ComCoin"))
                        #this.mComCoin=(OInt)EditorPlayerPrefs.GetInt("ComCoin")
                        #if(EditorPlayerPrefs.HasKey("TourCoin"))
                        #this.mTourCoin=(OInt)EditorPlayerPrefs.GetInt("TourCoin")
                        #if(EditorPlayerPrefs.HasKey("ArenaCoin"))
                        #this.mArenaCoin=(OInt)EditorPlayerPrefs.GetInt("ArenaCoin")
                        #if(EditorPlayerPrefs.HasKey("MultiCoin"))
                        #this.mMultiCoin=(OInt)EditorPlayerPrefs.GetInt("MultiCoin")
                        #if(EditorPlayerPrefs.HasKey("PiecePoint"))
                        #this.mPiecePoint=(OInt)EditorPlayerPrefs.GetInt("PiecePoint")
                        #if(EditorPlayerPrefs.HasKey("PlayerExp"))
                        #this.mExp=(OInt)EditorPlayerPrefs.GetInt("PlayerExp")
                        #if(string.IsNullOrEmpty(this.mCuid))
                            #this.mCuid="1"
                            #this.mName="GUMI"
                            #this.mLv=(OInt)this.CalcLevel()
                            #this.UpdateUnlocks()
                        #if(EditorPlayerPrefs.HasKey("Stamina"))
                        #this.mStamina.val=(OInt)EditorPlayerPrefs.GetInt("Stamina")
                        #if(EditorPlayerPrefs.HasKey("StaminaAt"))
                        #this.mStamina.at=(OLong)Convert.ToInt64(EditorPlayerPrefs.GetString("StaminaAt"))
                        #if(EditorPlayerPrefs.HasKey("CaveStamina"))
                        #this.mCaveStamina.val=(OInt)EditorPlayerPrefs.GetInt("CaveStamina")
                        #if(EditorPlayerPrefs.HasKey("CaveStaminaAt"))
                        #this.mCaveStamina.at=(OLong)Convert.ToInt64(EditorPlayerPrefs.GetString("CaveStaminaAt"))
                        #if(EditorPlayerPrefs.HasKey("AbilRankUpCount"))
                        #this.mAbilityRankUpCount.val=(OInt)EditorPlayerPrefs.GetInt("AbilRankUpCount")
                        #if(EditorPlayerPrefs.HasKey("AbilRankUpCountAt"))
                        #this.mAbilityRankUpCount.at=(OLong)Convert.ToInt64(EditorPlayerPrefs.GetString("AbilRankUpCountAt"))
                        #PlayerParamplayerParam=MonoSingleton<GameManager>.Instance.MasterParam.GetPlayerParam((int)this.mLv)
                        #if(playerParam!=null)
                            #this.mUnitCap=playerParam.ucap
                            #this.mStamina.valMax=playerParam.pt
                        #FixParamfixParam=MonoSingleton<GameManager>.Instance.MasterParam.FixParam
                        #this.mStamina.valRecover=fixParam.StaminaRecoveryVal
                        #this.mStamina.interval=fixParam.StaminaRecoverySec
                        #this.mCaveStamina.valMax=fixParam.CaveStaminaMax
                        #this.mCaveStamina.valRecover=fixParam.CaveStaminaRecoveryVal
                        #this.mCaveStamina.interval=fixParam.CaveStaminaRecoverySec
                        #this.mAbilityRankUpCount.valMax=fixParam.AbilityRankUpCountMax
                        #this.mAbilityRankUpCount.valRecover=fixParam.AbilityRankUpCountRecoveryVal
                        #this.mAbilityRankUpCount.interval=fixParam.AbilityRankUpCountRecoverySec
                        #if(EditorPlayerPrefs.HasKey("ARTI_NUM"))
                            #intnum=EditorPlayerPrefs.GetInt("ARTI_NUM")
                            #for(intindex=0index<num++index)
                                #stringsrc=EditorPlayerPrefs.GetString("ARTI_"+(object)index)
                                #if(!string.IsNullOrEmpty(src))
                                    #Json_ArtifactjsonObject=JSONParser.parseJSONObject<Json_Artifact>(src)
                                    #if(jsonObject!=null)
                                        #ArtifactDataartifactData=newArtifactData()
                                        #artifactData.Deserialize(jsonObject)
                                        #this.AddArtifact(artifactData)
                        #if(this.mUnits==null)
                        #this.mUnits=newList<UnitData>((int)this.mUnitCap)
                        #this.mUnits.Clear()
                        #this.mUniqueID2UnitData.Clear()
                        #List<Json_Ability>jsonAbilityList1=newList<Json_Ability>(5)
                        #intnum1=EditorPlayerPrefs.GetInt("UnitNum")
                        #for(intindex1=0index1<num1++index1)
                            #UnitDataunitData=newUnitData()
                            #if(unitData!=null)
                                #jsonAbilityList1.Clear()
                                #stringstr1="Unit"+(object)index1+"_"
                                #Json_Unitjson1=newJson_Unit()
                                #json1.iname=EditorPlayerPrefs.GetString(str1+"Iname")
                                #json1.iid=(long)EditorPlayerPrefs.GetInt(str1+"Iid")
                                #json1.exp=EditorPlayerPrefs.GetInt(str1+"Exp")
                                #json1.plus=EditorPlayerPrefs.GetInt(str1+"Plus")
                                #json1.rare=EditorPlayerPrefs.GetInt(str1+"Rarity")
                                #List<Json_Job>jsonJobList=newList<Json_Job>(6)
                                #for(intindex2=0index2<6++index2)
                                    #stringstr2=str1+"Job"+(object)index2+"_"
                                    #if(EditorPlayerPrefs.HasKey(str2+"Iname")&&!string.IsNullOrEmpty(EditorPlayerPrefs.GetString(str2+"Iname")))
                                        #Json_JobjsonJob=newJson_Job()
                                        #jsonJob.iname=EditorPlayerPrefs.GetString(str2+"Iname")
                                        #jsonJob.iid=(long)EditorPlayerPrefs.GetInt(str2+"Iid")
                                        #jsonJob.rank=EditorPlayerPrefs.GetInt(str2+"Rank")
                                        #jsonJob.equips=newJson_Equip[6]
                                        #for(intindex3=0index3<jsonJob.equips.Length++index3)
                                            #stringstr3=str2+"Equip"+(object)index3+"_"
                                            #if(EditorPlayerPrefs.HasKey(str3+"Iname"))
                                                #jsonJob.equips[index3]=newJson_Equip()
                                                #jsonJob.equips[index3].iname=EditorPlayerPrefs.GetString(str3+"Iname")
                                                #jsonJob.equips[index3].iid=(long)EditorPlayerPrefs.GetInt(str3+"Iid")
                                                #jsonJob.equips[index3].exp=EditorPlayerPrefs.GetInt(str3+"Exp")
                                            #else
                                            #jsonJob.equips[index3]=(Json_Equip)null
                                        #List<Json_Ability>jsonAbilityList2=newList<Json_Ability>(8)
                                        #for(intindex3=0index3<8++index3)
                                            #stringstr3=str2+"Ability"+(object)index3+"_"
                                            #if(EditorPlayerPrefs.HasKey(str3+"Iname")&&!string.IsNullOrEmpty(EditorPlayerPrefs.GetString(str3+"Iname")))
                                                #Json_AbilityjsonAbility=newJson_Ability()
                                                #jsonAbility.iname=EditorPlayerPrefs.GetString(str3+"Iname")
                                                #jsonAbility.iid=(long)EditorPlayerPrefs.GetInt(str3+"Iid")
                                                #jsonAbility.exp=EditorPlayerPrefs.GetInt(str3+"Exp")
                                                #boolflag2=false
                                                #for(intindex4=0index4<jsonAbilityList2.Count++index4)
                                                    #if(jsonAbilityList2[index4].iname==jsonAbility.iname)
                                                    #flag2=true
                                                #if(!flag2)
                                                #jsonAbilityList2.Add(jsonAbility)
                                        #jsonJob.abils=jsonAbilityList2.Count<=0?(Json_Ability)null:jsonAbilityList2.ToArray()
                                        #jsonJob.select=newJson_JobSelectable()
                                        #jsonJob.select.abils=newlong[5]
                                        #Array.Clear((Array)jsonJob.select.abils,0,jsonJob.select.abils.Length)
                                        #for(intindex3=0index3<jsonJob.select.abils.Length++index3)
                                            #stringkey=str2+"Select_Ability"+(object)index3
                                            #if(EditorPlayerPrefs.HasKey(key))
                                            #jsonJob.select.abils[index3]=(long)EditorPlayerPrefs.GetInt(key)
                                        #jsonJobList.Add(jsonJob)
                                #json1.jobs=jsonJobList.ToArray()
                                #json1.select=newJson_UnitSelectable()
                                #json1.select.job=(long)EditorPlayerPrefs.GetInt(str1+"Select_Job")
                                #try
                                    #unitData.Deserialize(json1)
                                    #for(intjob_index=0job_index<unitData.Jobs.Length++job_index)
                                        #for(intslot=0slot<unitData.Jobs[job_index].Artifacts.Length++slot)
                                            #stringkey=str1+"Job"+(object)job_index+"_"+"Artifact"+(object)slot+"_Iid"
                                            #if(EditorPlayerPrefs.HasKey(key))
                                                #longiid=(long)EditorPlayerPrefs.GetInt(key)
                                                #ArtifactDataartifactData=MonoSingleton<GameManager>.Instance.Player.Artifacts.Find((Predicate<ArtifactData>)(adl=>(long)adl.UniqueID==iid))
                                                #if(artifactData!=null)
                                                    #Json_Artifactjson2=newJson_Artifact()
                                                    #json2.iid=(long)artifactData.UniqueID
                                                    #json2.iname=artifactData.ArtifactParam.iname
                                                    #json2.rare=artifactData.ArtifactParam.raremax
                                                    #RarityParamrarityParam=MonoSingleton<GameManager>.Instance.MasterParam.GetRarityParam(artifactData.ArtifactParam.raremax)
                                                    #json2.exp=ArtifactData.StaticCalcExpFromLevel((int)rarityParam.ArtifactLvCap)
                                                    #ArtifactDataartifact=newArtifactData()
                                                    #artifact.Reset()
                                                    #artifact.Deserialize(json2)
                                                    #unitData.SetEquipArtifactData(job_index,slot,artifact,true)
                                    #this.mUnits.Add(unitData)
                                    #this.mUniqueID2UnitData[unitData.UniqueID]=unitData
                                #catch(Exceptionex)
                                    #DebugUtility.LogException(ex)
                        #for(intindex1=0index1<12++index1)
                            #Json_Partyjson=newJson_Party()
                            #PartyDatapartyData=newPartyData((PlayerPartyTypes)index1)
                            #json.units=newlong[partyData.MAX_UNIT]
                            #for(intindex2=0index2<json.units.Length++index2)
                            #json.units[index2]=(long)EditorPlayerPrefs.GetInt("Hensei"+(object)index1+"_UNIT"+(object)index2+"_ID")
                            #this.mPartys[index1].Deserialize(json)
                        #Debug.Log((object)"LoadPlayerPrefsItems")
                        #intcapacity=EditorPlayerPrefs.GetInt("ItemNum")
                        #if(this.mItems==null)
                        #this.mItems=newList<ItemData>(capacity)
                        #this.mItems.Clear()
                        #this.mID2ItemData.Clear()
                        #for(intindex=0index<capacity++index)
                            #stringstr="Item"+(object)index+"_"
                            #Json_Itemjson=newJson_Item()
                            #json.iname=EditorPlayerPrefs.GetString(str+"Iname")
                            #json.iid=(long)EditorPlayerPrefs.GetInt(str+"Iid")
                            #json.num=EditorPlayerPrefs.GetInt(str+"Num")
                            #if(MonoSingleton<GameManager>.Instance.GetItemParam(json.iname)==null)
                                #DebugUtility.Log("存在しないアイテム["+json.iname+"]が指定された")
                            #else
                                #ItemDataitemData=newItemData()
                                #itemData.Deserialize(json)
                                #this.mItems.Add(itemData)
                                #this.mID2ItemData[json.iname]=itemData
                    #
                    #[DebuggerHidden]
                    #publicIEnumeratorSavePlayerPrefsAsync()
                        #//ISSUE:objectofacompiler-generatedtypeiscreated
                        #return(IEnumerator)newPlayerData.\u003CSavePlayerPrefsAsync\u003Ec__Iterator0(){\u0024this=this}
                    #
                    #privatevoidInternalSavePlayerPrefsParty()
                        #for(intindex1=0index1<this.mPartys.Count++index1)
                            #for(intindex2=0index2<this.mPartys[index1].MAX_UNIT++index2)
                                #EditorPlayerPrefs.SetInt("Hensei"+(object)index1+"_UNIT"+(object)index2+"_ID",(int)this.mPartys[index1].GetUnitUniqueID(index2))
                                #EditorPlayerPrefs.SetInt("Hensei"+(object)index1+"_UNIT"+(object)index2+"_LEADER",this.mPartys[index1].LeaderIndex!=index2?0:1)
                    #
                    #publicvoidSavePlayerPrefsParty()
                        #this.InternalSavePlayerPrefsParty()
                        #EditorPlayerPrefs.Flush()
                    #
                    #publicvoidSavePlayerPrefs()
                        #IEnumeratorenumerator=this.SavePlayerPrefsAsync()
                        #do
                        #
                        #while(enumerator.MoveNext())
                    #
                    #publiclongGenerateUnitUniqueID()
                        #longnum=0
                        #for(intindex=0index<this.mUnits.Count++index)
                            #if(this.mUnits.UniqueID>num)
                            #num=this.mUnits.UniqueID
                        #returnnum+1L
                    #
                    #publicvoidClearTrophies()
                        #this.mTrophyStates=newList<TrophyState>()
                        #this.mTrophyStatesInameDict=newDictionary<string,List<TrophyState>>()
                    #
                    #publicvoidDeleteTrophies(JSON_TrophyProgresstrophies)
                        #if(trophies==null)
                        #return
                        #if(this.mTrophyStates!=null)
                            #for(inti=0i<trophies.Length++i)
                            #this.mTrophyStates.RemoveAll((Predicate<TrophyState>)(state=>state.iname==trophies[i].iname))
                        #if(this.mTrophyStatesInameDict==null)
                        #return
                        #for(intindex=0index<trophies.Length++index)
                            #if(this.mTrophyStatesInameDict.ContainsKey(trophies.iname))
                            #this.mTrophyStatesInameDict.Remove(trophies.iname)
                    #
                    #publicboolIsTrophyDirty()
                        #for(intindex=this.mTrophyStates.Count-1index>=0--index)
                            #if(this.mTrophyStates.IsDirty)
                            #returntrue
                        #returnfalse
                    #
                    #privatevoidUpdateTrophyState(TrophyStatest,intcurrentYMD)
                        #if(!st.Param.IsDaily)
                        #return
                        #intstartYmd=st.StartYMD
                        #intnum=Math.Abs(currentYMD.FromYMD().Subtract(startYmd.FromYMD()).Days)
                        #if(st.IsEnded)
                            #if(num<1)
                            #return
                            #this.ClearTrophyCounter(st)
                        #elseif(!st.IsCompleted)
                            #if(num<1)
                            #return
                            #this.ClearTrophyCounter(st)
                        #elseif(num>=2)
                            #this.ClearTrophyCounter(st)
                        #else
                            #if(num<1)
                            #return
                            #for(intindex=0index<st.Param.Objectives.Length++index)
                                #if(st.Param.Objectives.type==TrophyConditionTypes.stamina)
                                    #this.ClearTrophyCounter(st)
                                    #break
                    #
                    #publicTrophyParamGetCompletedTrophies()
                        #List<TrophyParam>trophyParamList=newList<TrophyParam>(this.mTrophyStates.Count)
                        #for(intindex=this.mTrophyStates.Count-1index>=0--index)
                            #TrophyStatemTrophyState=this.mTrophyStates
                            #if(!mTrophyState.IsEnded&&mTrophyState.IsCompleted)
                            #trophyParamList.Add(mTrophyState.Param)
                        #returntrophyParamList.ToArray()
                    #
                    #publicvoidMarkTrophiesEnded(TrophyParamtrophies)
                        #for(intindex=0index<trophies.Length++index)
                            #TrophyStatetrophyCounter=this.GetTrophyCounter(trophies,true)
                            #trophyCounter.IsEnded=true
                            #trophyCounter.IsDirty=true
                            #trophyCounter.RewardedAt=TimeManager.ServerTime
                    #
                    #privatevoidClearTrophyCounter(TrophyState_st)
                        #if(this.mTrophyStates.Contains(_st))
                        #this.mTrophyStates.Remove(_st)
                        #if(!this.mTrophyStatesInameDict.ContainsKey(_st.iname))
                        #return
                        #this.mTrophyStatesInameDict[_st.iname].Remove(_st)
                        #if(this.mTrophyStatesInameDict[_st.iname].Count>0)
                        #return
                        #this.mTrophyStatesInameDict.Remove(_st.iname)
                    #
                    #publicTrophyStateTrophyStates
                        #get
                            #returnthis.mTrophyStates.ToArray()
                    #
                    #publicIList<TrophyState>TrophyStatesList
                        #get
                            #return(IList<TrophyState>)this.mTrophyStates
                    #
                    #publicvoidUpdateTrophyStates()
                        #intymd=TimeManager.ServerTime.ToYMD()
                        #TrophyStatearray=this.mTrophyStates.ToArray()
                        #for(intindex=0index<array.Length++index)
                            #if(array!=null)
                            #this.UpdateTrophyState(array,ymd)
                    #
                    #publicvoidOverwiteTrophyProgress(JSON_TrophyProgresstrophyProgressList)
                        #if(trophyProgressList==null)
                        #return
                        #GameManagerinstance=MonoSingleton<GameManager>.Instance
                        #for(intindex=0index<trophyProgressList.Length++index)
                            #JSON_TrophyProgresstrophyProgress=trophyProgressList
                            #if(trophyProgress!=null)
                                #TrophyParamtrophy=instance.MasterParam.GetTrophy(trophyProgress.iname)
                                #if(trophy==null)
                                    #DebugUtility.LogWarning("存在しないミッション:"+trophyProgress.iname)
                                #else
                                    #TrophyStatetrophyCounter=this.GetTrophyCounter(trophy,false)
                                    #boolflag=trophyCounter.IsEnded||trophyCounter.IsCompleted
                                    #trophyCounter.Setup(trophy,trophyProgress)
                                    #if(!flag&&trophyCounter.IsCompleted)
                                    #NotifyList.PushTrophy(trophy)
                    #
                    #publicTrophyStateRegistTrophyStateDictByProg(TrophyParam_trophy,JSON_TrophyProgress_prog)
                        #TrophyStatetrophyState=this.CreateTrophyState(_trophy)
                        #trophyState.Setup(_trophy,_prog)
                        #this.AddTrophyStateDict(trophyState)
                        #returntrophyState
                    #
                    #publicvoidRegistTrophyStateDictByProgExtra(JSON_TrophyProgress_prog)
                        #if(_prog==null||_prog.Length<=0)
                        #return
                        #for(intindex=0index<_prog.Length++index)
                        #MonoSingleton<GameManager>.Instance.Player.RegistTrophyStateDictByProgExtra(MonoSingleton<GameManager>.Instance.MasterParam.GetTrophy(_prog.iname),_prog)
                    #
                    #publicvoidRegistTrophyStateDictByProgExtra(TrophyParam_trophy,JSON_TrophyProgress_prog)
                        #if(!this.mTrophyStatesInameDict.ContainsKey(_trophy.iname))
                        #this.AddTrophyStateDict(this.CreateTrophyState(_trophy))
                        #TrophyStatetrophyState=this.mTrophyStatesInameDict[_trophy.iname].Find((Predicate<TrophyState>)(x=>x.iname==_trophy.iname))
                        #if(trophyState==null||trophyState.IsCompleted)
                        #return
                        #for(intindex=0index<_trophy.Objectives.Length&&index<_prog.pts.Length&&index<trophyState.Count.Length++index)
                        #trophyState.Count=Math.Min(_prog.pts,_trophy.Objectives.ival)
                        #if(trophyState.IsCompleted&&trophyState.Param.DispType==TrophyDispType.Award)
                        #NotifyList.PushAward(trophyState.Param)
                        #trophyState.StartYMD=_prog.ymd
                        #trophyState.IsEnded=_prog.rewarded_at!=0
                        #trophyState.IsDirty=true
                    #
                    #publicvoidCreateInheritingExtraTrophy(Dictionary<int,List<JSON_TrophyProgress>>progs)
                        #TrophyParamtrophies=MonoSingleton<GameManager>.Instance.MasterParam.Trophies
                        #for(intindex1=0index1<trophies.Length++index1)
                            #TrophyParamparam=trophies[index1]
                            #if(trophies[index1].Objectives[0].type.IsExtraClear())
                                #inttype=(int)trophies[index1].Objectives[0].type
                                #if(progs.ContainsKey(type))
                                    #List<JSON_TrophyProgress>prog=progs[type]
                                    #if(prog.Find((Predicate<JSON_TrophyProgress>)(x=>x.iname==param.iname))==null)
                                        #intnum=0
                                        #for(intindex2=0index2<prog.Count++index2)
                                            #if(num<prog[index2].pts[0])
                                            #num=prog[index2].pts[0]
                                        #TrophyStatetrophyState=this.CreateTrophyState(param)
                                        #this.SetTrophyCounter(trophyState.Param,0,num)
                                        #this.AddTrophyStateDict(trophyState)
                    #
                    #publicTrophyStateGetTrophyCounter(TrophyParamtrophy,booldaily_old_data=false)
                        #List<TrophyState>trophyStateList
                        #if(this.mTrophyStatesInameDict.TryGetValue(trophy.iname,outtrophyStateList))
                            #if(!trophy.IsDaily||daily_old_data)
                            #returntrophyStateList[0]
                            #for(intindex=0index<trophyStateList.Count++index)
                                #if(trophyStateList.StartYMD==TimeManager.ServerTime.ToYMD())
                                #returntrophyStateList
                        #TrophyStatetrophyState=this.CreateTrophyState(trophy)
                        #this.AddTrophyStateDict(trophyState)
                        #returntrophyState
                    #
                    #privateTrophyStateCreateTrophyState(TrophyParam_trophy)
                        #returnnewTrophyState(){iname=_trophy.iname,StartYMD=TimeManager.ServerTime.ToYMD(),Count=newint[_trophy.Objectives.Length],IsDirty=false,Param=_trophy}
                    #
                    #privatevoidAddTrophyStateDict(TrophyState_state)
                        #this.mTrophyStates.Add(_state)
                        #if(!this.mTrophyStatesInameDict.ContainsKey(_state.iname))
                        #this.mTrophyStatesInameDict.Add(_state.iname,newList<TrophyState>())
                        #this.mTrophyStatesInameDict[_state.iname].Add(_state)
                        #this.mTrophyStatesInameDict[_state.iname].Sort((Comparison<TrophyState>)((a,b)=>a.StartYMD-b.StartYMD))
                    #
                    #privateboolIsMakeTrophyPlate(TrophyParamtrophy,TrophyStatest,boolis_achievement)
                        #return!trophy.IsInvisibleVip()&&!trophy.IsInvisibleCard()&&!trophy.IsInvisibleStamina()&&((trophy.RequiredTrophies==null||TrophyParam.CheckRequiredTrophies(MonoSingleton<GameManager>.Instance,trophy,true,true))&&trophy.IsAvailablePeriod(TimeManager.ServerTime,is_achievement))
                    #
                    #publicvoidDailyAllCompleteCheck()
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.dailyall)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(this.IsDailyAllComplete())
                            #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicboolIsDailyAllComplete()
                        #GameManagerinstance=MonoSingleton<GameManager>.Instance
                        #TrophyParamtrophies=instance.Trophies
                        #PlayerDataplayer=instance.Player
                        #if(trophies==null||trophies.Length<=0)
                        #returntrue
                        #TrophyStatetrophyStateArray=newTrophyState[trophies.Length]
                        #for(intindex=0index<trophies.Length++index)
                        #trophyStateArray=!trophies.IsChallengeMission?player.GetTrophyCounter(trophies,false):(TrophyState)null
                        #for(intindex1=0index1<trophies.Length++index1)
                            #TrophyStatest=trophyStateArray[index1]
                            #if(st!=null&&!st.IsCompleted)
                                #TrophyParamtrophy=trophies[index1]
                                #boolflag=false
                                #for(intindex2=0index2<trophy.Objectives.Length++index2)
                                    #if(trophy.Objectives[index2].type==TrophyConditionTypes.dailyall)
                                        #flag=true
                                        #break
                                #if(!flag&&trophy.DispType!=TrophyDispType.Award&&(trophy.DispType!=TrophyDispType.Hide&&trophy.IsDaily)&&this.IsMakeTrophyPlate(trophy,st,false))
                                #returnfalse
                        #returntrue
                    #
                    #privateboolCheckTrophyCount(TrophyParamtrophyParam,intcountIndex,intvalue,refTrophyStatestate)
                        #if(countIndex<0||value<=0||(trophyParam==null||!trophyParam.IsAvailablePeriod(this.GetMissionClearAt(),false))||trophyParam.RequiredTrophies!=null&&!TrophyParam.CheckRequiredTrophies(MonoSingleton<GameManager>.Instance,trophyParam,trophyParam.IsChallengeMission,true))
                        #returnfalse
                        #state=this.GetTrophyCounter(trophyParam,false)
                        #if(state.IsEnded)
                        #returnfalse
                        #if(state.Count.Length<=countIndex)
                        #Array.Resize<int>(refstate.Count,countIndex+1)
                        #return!state.IsCompleted
                    #
                    #privateboolCheckDailyMissionDayChange(TrophyStatestate,intcountIndex)
                        #intymd=this.GetMissionClearAt().ToYMD()
                        #return!state.Param.IsDaily||ymd<=state.StartYMD||state.IsCompleted
                    #
                    #publicvoidAddTrophyCounter(TrophyObjectiveobj,intvalue)
                        #this.AddTrophyCounter(obj.Param,obj.index,value)
                    #
                    #publicvoidAddTrophyCounter(TrophyParamtrophyParam,intcountIndex,intvalue)
                        #if(!this.AddTrophyCounterExec(trophyParam,countIndex,value))
                        #return
                        #this.DailyAllCompleteCheck()
                    #
                    #privateboolAddTrophyCounterExec(TrophyParamtrophyParam,intcountIndex,intvalue)
                        #TrophyStatestate=(TrophyState)null
                        #if(!this.CheckTrophyCount(trophyParam,countIndex,value,refstate))
                        #returnfalse
                        #intnum=state.Count[countIndex]
                        #state.Count[countIndex]+=value
                        #if(!this.CheckDailyMissionDayChange(state,countIndex))
                            #state.Count[countIndex]=num
                            #returnfalse
                        #state.IsDirty=true
                        #MonoSingleton<GameManager>.Instance.update_trophy_interval.SetSyncNow()
                        #returnstate.IsCompleted
                    #
                    #publicvoidSetTrophyCounter(TrophyObjectiveobj,intvalue)
                        #this.SetTrophyCounter(obj.Param,obj.index,value)
                    #
                    #privatevoidSetTrophyCounter(TrophyParamtrophyParam,intcountIndex,intvalue)
                        #if(!this.SetTrophyCounterExec(trophyParam,countIndex,value))
                        #return
                        #this.DailyAllCompleteCheck()
                    #
                    #privateboolSetTrophyCounterExec(TrophyParamtrophyParam,intcountIndex,intvalue)
                        #TrophyStatestate=(TrophyState)null
                        #if(!this.CheckTrophyCount(trophyParam,countIndex,value,refstate)||state.Count[countIndex]==value)
                        #returnfalse
                        #intnum=state.Count[countIndex]
                        #state.Count[countIndex]=value
                        #if(!this.CheckDailyMissionDayChange(state,countIndex))
                            #state.Count[countIndex]=num
                            #returnfalse
                        #state.IsDirty=true
                        #MonoSingleton<GameManager>.Instance.update_trophy_interval.SetSyncNow()
                        #returnstate.IsCompleted
                    #
                    #publicvoidOnQuestStart(stringquestID)
                        #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(questID)
                        #if(quest==null||quest.type==QuestTypes.Tutorial)
                        #return
                        #if(quest.type==QuestTypes.Arena)
                            #TrophyParamtrophies=MonoSingleton<GameManager>.Instance.Trophies
                            #for(intindex=trophies.Length-1index>=0--index)
                                #TrophyParamtrophyParam=trophies
                                #for(intcountIndex=trophyParam.Objectives.Length-1countIndex>=0--countIndex)
                                    #if(trophyParam.Objectives[countIndex].type==TrophyConditionTypes.arena)
                                    #this.AddTrophyCounter(trophyParam,countIndex,1)
                        #if(quest.IsMulti&&GlobalVars.ResumeMultiplayPlayerID==0)
                            #TrophyParamtrophies=MonoSingleton<GameManager>.Instance.Trophies
                            #for(intindex=trophies.Length-1index>=0--index)
                                #TrophyParamtrophyParam=trophies
                                #for(intcountIndex=trophyParam.Objectives.Length-1countIndex>=0--countIndex)
                                    #if(trophyParam.Objectives[countIndex].type==TrophyConditionTypes.multiplay)
                                    #this.AddTrophyCounter(trophyParam,countIndex,1)
                        #if(!quest.IsMultiTower||GlobalVars.ResumeMultiplayPlayerID!=0)
                        #return
                        #TrophyParamtrophies1=MonoSingleton<GameManager>.Instance.Trophies
                        #for(intindex=trophies1.Length-1index>=0--index)
                            #TrophyParamtrophyParam=trophies1
                            #for(intcountIndex=trophyParam.Objectives.Length-1countIndex>=0--countIndex)
                                #if(trophyParam.Objectives[countIndex].type==TrophyConditionTypes.multitower)
                                #this.AddTrophyCounter(trophyParam,countIndex,1)
                    #
                    #publicvoidOnQuestWin(stringquestID,BattleCore.RecordbattleRecord=null)
                        #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(questID)
                        #if(quest==null||quest.type==QuestTypes.Tutorial)
                        #return
                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winquest)
                        #for(intindex=trophiesOfType1.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType1
                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base))
                                #if(!trophyObjective.sval.Contains(questID))
                                #continue
                            #elseif(quest.type==QuestTypes.Event||quest.type==QuestTypes.Beginner||(quest.type==QuestTypes.Arena||quest.IsMulti)||(quest.type==QuestTypes.Character||quest.difficulty!=QuestDifficulties.Normal||(quest.type==QuestTypes.Tower||quest.IsVersus))||(quest.type==QuestTypes.Ordeal||quest.type==QuestTypes.RankMatch||quest.type==QuestTypes.Raid))
                            #continue
                            #this.AddTrophyCounter(trophyObjective,1)
                        #if(battleRecord!=null&&quest.bonusObjective!=null)
                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.complete_all_quest_mission)
                            #for(intindex1=trophiesOfType2.Length-1index1>=0--index1)
                                #if(!(trophiesOfType2[index1].sval_base!=questID))
                                    #intnum=0
                                    #for(intindex2=0index2<quest.bonusObjective.Length++index2)
                                        #if((battleRecord.allBonusFlags&1<<index2)!=0)
                                        #++num
                                    #if(num>=quest.bonusObjective.Length)
                                    #this.AddTrophyCounter(trophiesOfType2[index1],1)
                        #if(battleRecord!=null&&quest.bonusObjective!=null)
                            #intnum=0
                            #for(intindex=0index<quest.bonusObjective.Length++index)
                                #if((battleRecord.allBonusFlags&1<<index)!=0||quest.IsMissionClear(index))
                                #++num
                            #if(num>=quest.bonusObjective.Length)
                                #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.complete_all_quest_mission_total)
                                #for(intindex=trophiesOfType2.Length-1index>=0--index)
                                    #if(!(trophiesOfType2.sval_base!=questID))
                                    #this.AddTrophyCounter(trophiesOfType2,1)
                                #if(!quest.IsMissionCompleteALL())
                                    #if(!string.IsNullOrEmpty(FlowNode_Variable.Get("COMPLETE_QUEST_MISSION")))
                                    #MonoSingleton<GameManager>.Instance.Player.UpdateCompleteAllQuestCountTrophy2(quest)
                                    #else
                                    #MonoSingleton<GameManager>.Instance.Player.UpdateCompleteAllQuestCountTrophy(quest)
                        #if(quest.difficulty==QuestDifficulties.Extra)
                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winstory_extra)
                            #for(intindex=trophiesOfType2.Length-1index>=0--index)
                            #this.AddTrophyCounter(trophiesOfType2,1)
                        #if(quest.difficulty==QuestDifficulties.Elite)
                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winelite)
                            #for(intindex=trophiesOfType2.Length-1index>=0--index)
                            #this.AddTrophyCounter(trophiesOfType2,1)
                        #if(quest.type==QuestTypes.Arena)
                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winarena)
                            #for(intindex=trophiesOfType2.Length-1index>=0--index)
                            #this.AddTrophyCounter(trophiesOfType2,1)
                        #if(quest.type==QuestTypes.Event||quest.type==QuestTypes.Tower)
                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winevent)
                            #for(intindex=trophiesOfType2.Length-1index>=0--index)
                            #this.AddTrophyCounter(trophiesOfType2,1)
                        #SupportDatasupportData=(SupportData)GlobalVars.SelectedSupport
                        #if(quest.type==QuestTypes.Ordeal)
                            #supportData=(SupportData)null
                            #if(GlobalVars.OrdealSupports!=null)
                                #foreach(SupportDataordealSupportinGlobalVars.OrdealSupports)
                                    #if(ordealSupport!=null)
                                        #supportData=ordealSupport
                                        #break
                        #if(supportData!=null)
                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winquestsoldier)
                            #for(intindex=trophiesOfType2.Length-1index>=0--index)
                            #this.AddTrophyCounter(trophiesOfType2,1)
                        #if(quest.IsMulti)
                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winmulti)
                            #for(intindex=trophiesOfType2.Length-1index>=0--index)
                                #TrophyObjectivetrophyObjective=trophiesOfType2
                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)
                                #this.AddTrophyCounter(trophyObjective,1)
                            #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winmultimore)
                            #for(intindex=trophiesOfType3.Length-1index>=0--index)
                                #TrophyObjectivetrophyObjective=trophiesOfType3
                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)
                                    #List<JSON_MyPhotonPlayerParam>myPlayersStarted=PunMonoSingleton<MyPhoton>.Instance.GetMyPlayersStarted()
                                    #if(myPlayersStarted!=null&&myPlayersStarted.Count>=trophyObjective.ival)
                                    #this.AddTrophyCounter(trophyObjective,1)
                            #TrophyObjectivetrophiesOfType4=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.winmultiless)
                            #for(intindex=trophiesOfType4.Length-1index>=0--index)
                                #TrophyObjectivetrophyObjective=trophiesOfType4
                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)
                                    #List<JSON_MyPhotonPlayerParam>myPlayersStarted=PunMonoSingleton<MyPhoton>.Instance.GetMyPlayersStarted()
                                    #if(myPlayersStarted!=null&&myPlayersStarted.Count<=trophyObjective.ival)
                                    #this.AddTrophyCounter(trophyObjective,1)
                        #if(quest.type==QuestTypes.Tower)
                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.wintower)
                            #for(intindex=trophiesOfType2.Length-1index>=0--index)
                                #TrophyObjectivetrophyObjective=trophiesOfType2
                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)
                                #this.AddTrophyCounter(trophyObjective,1)
                            #TowerFloorParamtowerFloor=MonoSingleton<GameManager>.Instance.FindTowerFloor(questID)
                            #if(towerFloor!=null)
                                #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.tower)
                                #for(intindex=trophiesOfType3.Length-1index>=0--index)
                                    #TrophyObjectivetrophyObjective=trophiesOfType3
                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==towerFloor.tower_id)
                                    #this.AddTrophyCounter(trophyObjective,1)
                        #if(quest.IsVersus)
                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.vswin)
                            #for(intindex=trophiesOfType2.Length-1index>=0--index)
                                #TrophyObjectivetrophyObjective=trophiesOfType2
                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)
                                #this.AddTrophyCounter(trophyObjective,1)
                            #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.vs)
                            #for(intindex=trophiesOfType3.Length-1index>=0--index)
                                #TrophyObjectivetrophyObjective=trophiesOfType3
                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)
                                #this.AddTrophyCounter(trophyObjective,1)
                        #if(quest.type!=QuestTypes.Ordeal)
                        #return
                        #TrophyObjectivetrophiesOfType5=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.clear_ordeal)
                        #for(intindex=trophiesOfType5.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType5
                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base))
                                #if(trophyObjective.sval_base==quest.iname)
                                #this.AddTrophyCounter(trophyObjective,1)
                            #else
                            #DebugUtility.LogError("レコードミッション「"+trophyObjective.Param.Name+"」はクエストが指定されていません。")
                    #
                    #publicvoidOnQuestLose(stringquestID)
                        #QuestParamquest=MonoSingleton<GameManager>.Instance.FindQuest(questID)
                        #if(questID==null||quest.type==QuestTypes.Tutorial)
                        #return
                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.losequest)
                        #for(intindex=trophiesOfType1.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType1
                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base))
                                #if(!trophyObjective.sval.Contains(questID))
                                #continue
                            #elseif(quest.type==QuestTypes.Event||quest.type==QuestTypes.Beginner||(quest.type==QuestTypes.Arena||quest.IsMulti)||(quest.type==QuestTypes.Character||quest.difficulty!=QuestDifficulties.Normal||(quest.type==QuestTypes.Tower||quest.IsVersus))||(quest.type==QuestTypes.Ordeal||quest.type==QuestTypes.RankMatch))
                            #continue
                            #this.AddTrophyCounter(trophyObjective,1)
                        #if(quest.difficulty==QuestDifficulties.Elite)
                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.loseelite)
                            #for(intindex=trophiesOfType2.Length-1index>=0--index)
                            #this.AddTrophyCounter(trophiesOfType2,1)
                        #if(quest.type==QuestTypes.Arena)
                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.losearena)
                            #for(intindex=trophiesOfType2.Length-1index>=0--index)
                            #this.AddTrophyCounter(trophiesOfType2,1)
                        #if(quest.type==QuestTypes.Event||quest.type==QuestTypes.Tower)
                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.loseevent)
                            #for(intindex=trophiesOfType2.Length-1index>=0--index)
                            #this.AddTrophyCounter(trophiesOfType2,1)
                        #if(quest.type==QuestTypes.Tower)
                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.losetower)
                            #for(intindex=trophiesOfType2.Length-1index>=0--index)
                                #TrophyObjectivetrophyObjective=trophiesOfType2
                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)
                                #this.AddTrophyCounter(trophyObjective,1)
                            #TowerFloorParamtowerFloor=MonoSingleton<GameManager>.Instance.FindTowerFloor(questID)
                            #if(towerFloor!=null)
                                #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.tower)
                                #for(intindex=trophiesOfType3.Length-1index>=0--index)
                                    #TrophyObjectivetrophyObjective=trophiesOfType3
                                    #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==towerFloor.tower_id)
                                    #this.AddTrophyCounter(trophyObjective,1)
                        #if(!quest.IsVersus)
                        #return
                        #TrophyObjectivetrophiesOfType4=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.vslose)
                        #for(intindex=trophiesOfType4.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType4
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)
                            #this.AddTrophyCounter(trophyObjective,1)
                        #TrophyObjectivetrophiesOfType5=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.vs)
                        #for(intindex=trophiesOfType5.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType5
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==questID)
                            #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidOnGoldChange(intdelta)
                        #if(delta==0)
                        #return
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.has_gold_over)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #if(this.Gold>=trophiesOfType.ival)
                            #this.AddTrophyCounter(trophiesOfType,1)
                    #
                    #publicvoidOnCoinChange(intdelta)
                    #
                    #publicvoidOnItemQuantityChange(stringitemID,intdelta)
                        #if(delta<=0)
                        #return
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.getitem)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(trophyObjective.sval_base==itemID)
                            #this.AddTrophyCounter(trophyObjective,delta)
                    #
                    #publicvoidOnPlayerLevelChange(intdelta)
                        #if(delta<=0)
                        #return
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.playerlv)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(trophyObjective.ival<=this.Lv)
                            #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidOnEnemyKill(stringenemyID,intcount)
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.killenemy)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(trophyObjective.sval_base==enemyID)
                            #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidOnDamageToEnemy(Unitunit,Unittarget,intdamage)
                        #if(unit==null||unit.Side!=EUnitSide.Player||(!unit.IsPartyMember||target==null)||(target.Side!=EUnitSide.Enemy||UnityEngine.Object.op_Equality((UnityEngine.Object)SceneBattle.Instance,(UnityEngine.Object)null)||SceneBattle.Instance.IsPlayingArenaQuest)||SceneBattle.Instance.Battle!=null&&SceneBattle.Instance.Battle.IsMultiPlay&&(PunMonoSingleton<MyPhoton>.Instance.MyPlayerIndex<=0||PunMonoSingleton<MyPhoton>.Instance.MyPlayerIndex!=unit.OwnerPlayerIndex))
                        #return
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.damage_over)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #if(trophiesOfType.ival<=damage)
                            #this.AddTrophyCounter(trophiesOfType,1)
                    #
                    #publicvoidOnAbilityPowerUp(stringunitID,stringabilityID,intlevel,boolverify=false)
                        #if(!verify)
                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.ability)
                            #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #this.AddTrophyCounter(trophiesOfType,1)
                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeabilitylevel)
                        #for(intindex=trophiesOfType1.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType1
                            #if(trophyObjective.ival<=level)
                                #if(string.IsNullOrEmpty(trophyObjective.sval_base))
                                    #this.AddTrophyCounter(trophyObjective,1)
                                #else
                                    #charchArray=newchar[1]{','}
                                    #stringstrArray=trophyObjective.sval_base.Split(chArray)
                                    #if((string.IsNullOrEmpty(strArray[1])||abilityID==strArray[1])&&(string.IsNullOrEmpty(strArray[0])||unitID==strArray[0]))
                                    #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidOnSoubiPowerUp()
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.soubi)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                        #this.AddTrophyCounter(trophiesOfType,1)
                    #
                    #publicvoidOnBuyGold()
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.buygold)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                        #this.AddTrophyCounter(trophiesOfType,1)
                    #
                    #publicvoidOnFgGIDLogin()
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.fggid)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                        #this.AddTrophyCounter(trophiesOfType,1)
                    #
                    #publicvoidOnGacha(GachaTypestype,intcount)
                        #if(count<=0)
                        #return
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.gacha)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(trophyObjective.sval_base=="normal")
                                #if(type!=GachaTypes.Normal)
                                #continue
                            #elseif(trophyObjective.sval_base=="rare")
                                #if(type!=GachaTypes.Rare)
                                #continue
                            #elseif(trophyObjective.sval_base=="vip"&&type!=GachaTypes.Vip)
                            #continue
                            #this.AddTrophyCounter(trophyObjective,count)
                    #
                    #publicvoidOnUnitLevelChange(stringunitID,intdelta,intlevel,boolverify=false)
                        #if(delta<=0&&!verify)
                        #return
                        #if(!verify)
                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.unitlevel)
                            #for(intindex=trophiesOfType.Length-1index>=0--index)
                                #TrophyObjectivetrophyObjective=trophiesOfType
                                #if(trophyObjective.sval_base==unitID&&trophyObjective.ival<=level)
                                #this.AddTrophyCounter(trophyObjective,delta)
                        #if(!verify)
                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.upunitlevel)
                            #for(intindex=trophiesOfType.Length-1index>=0--index)
                                #TrophyObjectivetrophyObjective=trophiesOfType
                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)
                                #this.AddTrophyCounter(trophyObjective,delta)
                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeunitlevel)
                        #for(intindex=trophiesOfType1.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType1
                            #if(trophyObjective.ival<=level&&(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID))
                            #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidOnUnitLevelAndJobLevelChange(stringunitID,intlevel,paramsJobDatajobs)
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeunitandjoblevel)
                        #charchArray=newchar[1]{','}
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrohy=trophiesOfType
                            #stringstrArray=trohy.sval_base.Split(chArray)
                            #if(strArray.Length<4)
                                #this.PrintUnitAndJobLevelUsage(trohy)
                            #else
                                #stringstr1=strArray[0]
                                #intresult1
                                #if(!int.TryParse(strArray[1],outresult1))
                                #this.PrintUnitAndJobLevelUsage(trohy)
                                #elseif(level>=result1&&!string.IsNullOrEmpty(str1)&&str1==unitID)
                                    #stringstr2=strArray[2]
                                    #intresult2
                                    #if(!int.TryParse(strArray[3],outresult2))
                                        #this.PrintUnitAndJobLevelUsage(trohy)
                                    #else
                                        #foreach(JobDatajobinjobs)
                                            #if(job.Param.iname==str2&&result2<=job.Rank)
                                            #this.AddTrophyCounter(trohy,1)
                    #
                    #privatevoidPrintUnitAndJobLevelUsage(TrophyObjectivetrohy)
                        #DebugUtility.Log(trohy.Param.iname+":["+trohy.sval_base+"]は不正な文字列です。カンマ区切りで「ユニット名・ユニットレベル・ジョブ名・ジョブレベル」の順に設定してください。")
                    #
                    #publicvoidOnEvolutionChange(stringunitID,intrarity)
                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evolutionnum)
                        #for(intindex=trophiesOfType1.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType1
                            #if(trophyObjective.sval_base==unitID&&trophyObjective.ival<=rarity)
                            #this.AddTrophyCounter(trophyObjective,1)
                        #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evoltiontimes)
                        #for(intindex=trophiesOfType2.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType2
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)
                            #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidOnJobLevelChange(stringunitID,stringjobID,intrank,boolverify=false,intrankDelta=1)
                        #charchArray=newchar[1]{','}
                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.joblevel)
                        #if(!verify)
                            #for(intindex=trophiesOfType1.Length-1index>=0--index)
                                #TrophyObjectivetrophyObjective=trophiesOfType1
                                #stringstrArray=trophyObjective.sval_base.Split(chArray)
                                #if(strArray[0]==unitID&&strArray[1]==jobID&&trophyObjective.ival<=rank)
                                #this.AddTrophyCounter(trophyObjective,1)
                        #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.upjoblevel)
                        #if(!verify)
                            #for(intindex=trophiesOfType2.Length-1index>=0--index)
                                #TrophyObjectivetrophyObjective=trophiesOfType2
                                #if(string.IsNullOrEmpty(trophyObjective.sval_base))
                                    #this.AddTrophyCounter(trophyObjective,rankDelta)
                                #else
                                    #stringstrArray=trophyObjective.sval_base.Split(chArray)
                                    #if(strArray[0]==unitID&&strArray[1]==jobID)
                                    #this.AddTrophyCounter(trophyObjective,rankDelta)
                        #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makejoblevel)
                        #for(intindex=trophiesOfType3.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType3
                            #if(trophyObjective.ival<=rank)
                                #if(string.IsNullOrEmpty(trophyObjective.sval_base))
                                    #this.AddTrophyCounter(trophyObjective,1)
                                #else
                                    #stringstrArray=trophyObjective.sval_base.Split(chArray)
                                    #if(strArray[0]==unitID&&strArray[1]==jobID)
                                    #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidOnMultiTowerHelp()
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.multitower_help)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                        #this.AddTrophyCounter(trophiesOfType,1)
                    #
                    #publicvoidOnLoginCount()
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.logincount)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(trophyObjective.ival<=this.LoginBonusCount)
                            #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidOnLogin()
                        #this.TrophyUpdateProgress()
                        #this.ResetPrevCheckHour()
                    #
                    #publicvoidTrophyUpdateProgress()
                        #MonoSingleton<GameManager>.Instance.Player.UpdateUnitTrophyStates(true)
                        #MonoSingleton<GameManager>.Instance.Player.UpdatePlayerTrophyStates()
                        #MonoSingleton<GameManager>.Instance.Player.UpdateArenaRankTrophyStates(-1,-1)
                        #MonoSingleton<GameManager>.Instance.Player.UpdateArtifactTrophyStates()
                        #MonoSingleton<GameManager>.Instance.Player.UpdateTobiraTrophyStates()
                        #if(!string.IsNullOrEmpty(FlowNode_Variable.Get("COMPLETE_QUEST_MISSION")))
                        #MonoSingleton<GameManager>.Instance.Player.UpdateCompleteAllQuestCountTrophy2((QuestParam)null)
                        #else
                        #MonoSingleton<GameManager>.Instance.Player.UpdateCompleteAllQuestCountTrophy((QuestParam)null)
                        #MonoSingleton<GameManager>.Instance.Player.CheckAllCompleteMissionTrophy()
                    #
                    #publicvoidOnSoubiSet(stringunitID,intcountUp=1)
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.unitequip)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)
                            #this.AddTrophyCounter(trophyObjective,countUp)
                    #
                    #publicvoidOnLimitBreak(stringunitID,intdelta=1)
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)
                            #this.AddTrophyCounter(trophyObjective,delta)
                    #
                    #publicvoidOnJobChange(stringunitID)
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.changejob)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)
                            #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidOnChangeAbilitySet(stringunitID)
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.changeability)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==unitID)
                            #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidOnBuyAtShop(stringshopID,stringitemID,intnum)
                        #if(num<=0)
                        #return
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.buyatshop)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base))
                                #this.AddTrophyCounter(trophyObjective,num)
                            #else
                                #charchArray=newchar[1]{','}
                                #stringstrArray=trophyObjective.sval_base.Split(chArray)
                                #if((string.IsNullOrEmpty(strArray[1])||itemID==strArray[1])&&(string.IsNullOrEmpty(strArray[0])||shopID==strArray[0]))
                                #this.AddTrophyCounter(trophyObjective,num)
                    #
                    #publicvoidOnArtifactTransmute(stringartifactID)
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.artifacttransmute)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==artifactID)
                            #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidOnArtifactStrength(stringartifactID,intuseItemNum,intbeforeLevel,intcurrentLevel)
                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.artifactstrength)
                        #for(intindex=trophiesOfType1.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType1
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==artifactID)
                            #this.AddTrophyCounter(trophyObjective,useItemNum)
                        #intnum=currentLevel-beforeLevel
                        #if(num>=1)
                            #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.upartifactlevel)
                            #for(intindex=trophiesOfType2.Length-1index>=0--index)
                                #TrophyObjectivetrophyObjective=trophiesOfType2
                                #if(string.IsNullOrEmpty(trophyObjective.sval_base)||string.Equals(trophyObjective.sval_base,artifactID))
                                #this.AddTrophyCounter(trophyObjective,num)
                        #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeartifactlevel)
                        #for(intindex=trophiesOfType3.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType3
                            #if(currentLevel>=trophyObjective.ival&&(string.IsNullOrEmpty(trophyObjective.sval_base)||string.Equals(trophyObjective.sval_base,artifactID)))
                            #this.SetTrophyCounter(trophyObjective,currentLevel)
                    #
                    #publicvoidOnArtifactEvolution(stringartifactID)
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.artifactevolution)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base)||trophyObjective.sval_base==artifactID)
                            #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidOnUnlockTobiraTrophy(longunitUniqueID)
                        #UnitDataunitDataByUniqueId=this.FindUnitDataByUniqueID(unitUniqueID)
                        #this.UpdateUnlockTobiraUnitCountTrophy()
                        #this.UpdateUnlockTobiraUnitTrophy(unitDataByUniqueId)
                    #
                    #publicvoidOnOpenTobiraTrophy(longunitUniqueID)
                        #this.UpdateSinsTobiraTrophy(this.FindUnitDataByUniqueID(unitUniqueID))
                        #this.CheckAllSinsTobiraNonTargetTrophy()
                    #
                    #publicvoidUpdateTobiraTrophyStates()
                        #this.UpdateUnlockTobiraUnitCountTrophy()
                        #for(intindex=0index<this.Units.Count++index)
                            #this.UpdateUnlockTobiraUnitTrophy(this.Units)
                            #this.UpdateSinsTobiraTrophy(this.Units)
                        #this.CheckAllSinsTobiraNonTargetTrophy()
                    #
                    #privatevoidUpdateSinsTobiraTrophy(UnitDataunitData)
                        #if(!unitData.IsUnlockTobira)
                        #return
                        #List<TobiraParam.Category>unlockTobiraCategorys=this.GetUnlockTobiraCategorys(unitData)
                        #for(intindex1=0index1<unlockTobiraCategorys.Count++index1)
                            #TrophyConditionTypestype
                            #switch(unlockTobiraCategorys[index1])
                                #caseTobiraParam.Category.Envy:
                                #type=TrophyConditionTypes.envy_unlock_unit
                                #break
                                #caseTobiraParam.Category.Wrath:
                                #type=TrophyConditionTypes.sloth_unlock_unit
                                #break
                                #caseTobiraParam.Category.Sloth:
                                #type=TrophyConditionTypes.lust_unlock_unit
                                #break
                                #caseTobiraParam.Category.Lust:
                                #type=TrophyConditionTypes.gluttonny_unlock_unit
                                #break
                                #caseTobiraParam.Category.Gluttony:
                                #type=TrophyConditionTypes.wrath_unlock_unit
                                #break
                                #caseTobiraParam.Category.Greed:
                                #type=TrophyConditionTypes.greed_unlock_unit
                                #break
                                #caseTobiraParam.Category.Pride:
                                #type=TrophyConditionTypes.pride_unlock_unit
                                #break
                                #default:
                                #continue
                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(type)
                            #for(intindex2=trophiesOfType.Length-1index2>=0--index2)
                                #TrophyObjectivetrophyObjective=trophiesOfType[index2]
                                #if(string.Equals(trophyObjective.sval_base,unitData.UnitParam.iname))
                                #this.SetTrophyCounter(trophyObjective,1)
                    #
                    #privatevoidCheckAllSinsTobiraNonTargetTrophy()
                        #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Envy,TrophyConditionTypes.envy_unlock_unit)
                        #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Wrath,TrophyConditionTypes.sloth_unlock_unit)
                        #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Sloth,TrophyConditionTypes.lust_unlock_unit)
                        #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Lust,TrophyConditionTypes.gluttonny_unlock_unit)
                        #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Gluttony,TrophyConditionTypes.wrath_unlock_unit)
                        #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Greed,TrophyConditionTypes.greed_unlock_unit)
                        #this.SetSinsTobiraTrophyByAllUnit(TobiraParam.Category.Pride,TrophyConditionTypes.pride_unlock_unit)
                    #
                    #privatevoidSetSinsTobiraTrophyByAllUnit(TobiraParam.Categorycategory,TrophyConditionTypestrophyType)
                        #intnum=0
                        #for(intindex=0index<this.Units.Count++index)
                            #if(this.Units.CheckTobiraIsUnlocked(category))
                            #++num
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(trophyType)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base))
                            #this.SetTrophyCounter(trophyObjective,num)
                    #
                    #publicList<TobiraParam.Category>GetUnlockTobiraCategorys(UnitDataunitData)
                        #List<TobiraParam.Category>categoryList=newList<TobiraParam.Category>()
                        #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Envy))
                        #categoryList.Add(TobiraParam.Category.Envy)
                        #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Sloth))
                        #categoryList.Add(TobiraParam.Category.Sloth)
                        #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Lust))
                        #categoryList.Add(TobiraParam.Category.Lust)
                        #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Wrath))
                        #categoryList.Add(TobiraParam.Category.Wrath)
                        #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Greed))
                        #categoryList.Add(TobiraParam.Category.Greed)
                        #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Gluttony))
                        #categoryList.Add(TobiraParam.Category.Gluttony)
                        #if(unitData.CheckTobiraIsUnlocked(TobiraParam.Category.Pride))
                        #categoryList.Add(TobiraParam.Category.Pride)
                        #returncategoryList
                    #
                    #privatevoidUpdateUnlockTobiraUnitCountTrophy()
                        #if(this.Units==null)
                        #return
                        #intnum=0
                        #for(intindex=0index<this.Units.Count++index)
                            #if(this.Units.IsUnlockTobira)
                            #++num
                        #if(num<=0)
                        #return
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.unlock_tobira_total)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                        #this.SetTrophyCounter(trophiesOfType,num)
                    #
                    #privatevoidUpdateUnlockTobiraUnitTrophy(UnitDataunitData)
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.unlock_tobira_unit)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #if(unitData.IsUnlockTobira)
                                #TrophyObjectivetrophyObjective=trophiesOfType
                                #if(string.IsNullOrEmpty(trophyObjective.sval_base))
                                #DebugUtility.LogError("トロフィー["+trophyObjective.Param.Name+"]にはユニットが指定されていません。")
                                #elseif(string.Equals(trophyObjective.sval_base,unitData.UnitParam.iname))
                                #this.SetTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidOnMixedConceptCard(stringconceptCardID,intbeforeLevel,intcurrentLevel,intbeforeAwakeCount,intcurrentAwakeCount,intbeforeTrust,intcurrentTrust)
                        #MonoSingleton<GameManager>.Instance.Player.UpdateConceptCardLevelupTrophy(conceptCardID,beforeLevel,currentLevel)
                        #MonoSingleton<GameManager>.Instance.Player.UpdateConceptCardLimitBreakTrophy(conceptCardID,beforeAwakeCount,currentAwakeCount)
                        #MonoSingleton<GameManager>.Instance.Player.UpdateConceptCardTrustUpTrophy(conceptCardID,beforeTrust,currentTrust)
                        #MonoSingleton<GameManager>.Instance.Player.UpdateConceptCardTrustMaxTrophy(conceptCardID,currentTrust)
                    #
                    #publicvoidUpdateConceptCardTrophyAll()
                        #if(this.ConceptCards==null)
                        #return
                        #MonoSingleton<GameManager>.Instance.Player.CheckAllConceptCardLevelupTrophy()
                        #MonoSingleton<GameManager>.Instance.Player.CheckAllConceptCardLimitBreakTrophy()
                        #MonoSingleton<GameManager>.Instance.Player.CheckAllConceptCardTrustUpTrophy()
                        #MonoSingleton<GameManager>.Instance.Player.CheckAllConceptCardTrustMaxTrophy()
                    #
                    #publicvoidUpdateConceptCardLevelupTrophy(stringconceptCardID,intbeforeLevel,intcurrentLevel)
                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_level)
                        #intnum=currentLevel-beforeLevel
                        #if(num>=1)
                            #for(intindex=trophiesOfType1.Length-1index>=0--index)
                            #this.AddTrophyCounter(trophiesOfType1,num)
                        #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_level_target)
                        #for(intindex=trophiesOfType2.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType2
                            #if(string.Equals(trophyObjective.sval_base,conceptCardID))
                                #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)
                                #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=currentLevel)
                                #this.SetTrophyCounter(trophyObjective,currentLevel)
                    #
                    #privatevoidCheckAllConceptCardLevelupTrophy()
                        #MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_level)
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_level_target)
                        #for(intindex1=trophiesOfType.Length-1index1>=0--index1)
                            #TrophyObjectivetrophyObjective=trophiesOfType[index1]
                            #for(intindex2=0index2<this.ConceptCards.Count++index2)
                                #if(string.Equals(trophyObjective.sval_base,this.ConceptCards[index2].Param.iname))
                                    #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)
                                    #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=(int)this.ConceptCards[index2].Lv)
                                    #this.SetTrophyCounter(trophyObjective,(int)this.ConceptCards[index2].Lv)
                    #
                    #publicvoidUpdateConceptCardLimitBreakTrophy(stringconceptCardID,intbeforeLimitBreak,intcurrentLimitBreak)
                        #if(currentLimitBreak<=0)
                        #return
                        #intnum=currentLimitBreak-beforeLimitBreak
                        #if(num>=1)
                            #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak_conceptcard)
                            #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #this.AddTrophyCounter(trophiesOfType,num)
                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak_conceptcard_target)
                        #for(intindex=trophiesOfType1.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType1
                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&string.Equals(trophyObjective.sval_base,conceptCardID))
                                #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)
                                #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=currentLimitBreak)
                                #this.SetTrophyCounter(trophyObjective,currentLimitBreak)
                    #
                    #publicvoidCheckAllConceptCardLimitBreakTrophy()
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak_conceptcard_target)
                        #for(intindex1=trophiesOfType.Length-1index1>=0--index1)
                            #TrophyObjectivetrophyObjective=trophiesOfType[index1]
                            #for(intindex2=0index2<this.ConceptCards.Count++index2)
                                #if(string.Equals(trophyObjective.sval_base,this.ConceptCards[index2].Param.iname))
                                    #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)
                                    #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=(int)this.ConceptCards[index2].AwakeCount)
                                    #this.SetTrophyCounter(trophyObjective,(int)this.ConceptCards[index2].AwakeCount)
                    #
                    #publicvoidUpdateConceptCardTrustUpTrophy(stringconceptCardID,intbeforeTrust,intcurrentTrust)
                        #if(currentTrust==0)
                        #return
                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_trust)
                        #intnum=currentTrust-beforeTrust
                        #if(num>=1)
                            #for(intindex=trophiesOfType1.Length-1index>=0--index)
                            #this.AddTrophyCounter(trophiesOfType1,num)
                        #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_trust_target)
                        #for(intindex=trophiesOfType2.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType2
                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&string.Equals(trophyObjective.sval_base,conceptCardID))
                                #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)
                                #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=currentTrust)
                                #this.SetTrophyCounter(trophyObjective,currentTrust)
                    #
                    #publicvoidCheckAllConceptCardTrustUpTrophy()
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.up_conceptcard_trust_target)
                        #for(intindex1=trophiesOfType.Length-1index1>=0--index1)
                            #TrophyObjectivetrophyObjective=trophiesOfType[index1]
                            #for(intindex2=0index2<this.ConceptCards.Count++index2)
                                #if(string.Equals(trophyObjective.sval_base,this.ConceptCards[index2].Param.iname))
                                    #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)
                                    #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=(int)this.ConceptCards[index2].Trust)
                                    #this.SetTrophyCounter(trophyObjective,(int)this.ConceptCards[index2].Trust)
                    #
                    #publicvoidUpdateConceptCardTrustMaxTrophy(stringconceptCardID,intcurrentTrust)
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.max_conceptcard_trust)
                        #intcardTrustMax=(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.CardTrustMax
                        #if(currentTrust<cardTrustMax)
                        #return
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base))
                            #this.AddTrophyCounter(trophyObjective,1)
                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&string.Equals(trophyObjective.sval_base,conceptCardID))
                            #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #privatevoidCheckAllConceptCardTrustMaxTrophy()
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.max_conceptcard_trust)
                        #intcardTrustMax=(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.CardTrustMax
                        #for(intindex1=trophiesOfType.Length-1index1>=0--index1)
                            #TrophyObjectivetrophyObjective=trophiesOfType[index1]
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base))
                                #intnum=0
                                #for(intindex2=0index2<this.ConceptCards.Count++index2)
                                    #if((int)this.ConceptCards[index2].Trust>=cardTrustMax)
                                    #++num
                                #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)
                                #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=num)
                                #this.SetTrophyCounter(trophyObjective,num)
                            #else
                                #intnum=0
                                #for(intindex2=0index2<this.ConceptCards.Count++index2)
                                    #if(trophyObjective.sval_base==this.ConceptCards[index2].Param.iname&&(int)this.ConceptCards[index2].Trust>=cardTrustMax)
                                    #++num
                                #TrophyStatetrophyCounter=MonoSingleton<GameManager>.Instance.Player.GetTrophyCounter(trophyObjective.Param,false)
                                #if(trophyCounter!=null&&trophyCounter.Count.Length>0&&trophyCounter.Count[0]<=num)
                                #this.SetTrophyCounter(trophyObjective,num)
                    #
                    #publicvoidUpdateSendFriendPresentTrophy()
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.send_present)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                        #this.AddTrophyCounter(trophiesOfType,1)
                    #
                    #publicvoidUpdateClearOrdealTrophy(BattleCore.Recordrecord,QuestTypesquestType,stringquestIname)
                        #if(record.result!=BattleCore.QuestResult.Win&&questType!=QuestTypes.Ordeal)
                        #return
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.clear_ordeal)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base))
                                #if(trophyObjective.sval_base==questIname)
                                #this.AddTrophyCounter(trophyObjective,1)
                            #else
                            #DebugUtility.LogError("レコードミッション「"+trophyObjective.Param.Name+"」はクエストが指定されていません。")
                    #
                    #publicvoidUpdateCompleteAllQuestCountTrophy(QuestParamquestParam=null)
                        #this.UpdateCompleteMissionCount(TrophyConditionTypes.complete_story_mission_count,questParam)
                        #this.UpdateCompleteMissionCount(TrophyConditionTypes.complete_event_mission_count,questParam)
                        #this.UpdateCompleteMissionCount(TrophyConditionTypes.complete_ordeal_mission_count,questParam)
                        #this.UpdateCompleteMissionCount(TrophyConditionTypes.complete_all_mission_count,questParam)
                    #
                    #privatevoidTrophyAllQuestTypeCompleteCount(QuestParamquest=null)
                        #GameManagerinstance=MonoSingleton<GameManager>.Instance
                        #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(TrophyConditionTypes.complete_all_mission_count)
                        #if(quest==null)
                            #for(intindex1=trophiesOfType.Length-1index1>=0--index1)
                                #TrophyObjectivetrophyObjective=trophiesOfType[index1]
                                #intnum=0
                                #for(intindex2=0index2<instance.Quests.Length++index2)
                                    #if(instance.Quests[index2].IsMissionCompleteALL())
                                    #++num
                                #this.SetTrophyCounter(trophyObjective,num)
                        #else
                            #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #this.AddTrophyCounter(trophiesOfType,1)
                    #
                    #privatevoidCheckAllCompleteMissionTrophy()
                        #GameManagerinstance=MonoSingleton<GameManager>.Instance
                        #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(TrophyConditionTypes.complete_all_quest_mission_total)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base))
                                #QuestParamquest=instance.FindQuest(trophyObjective.sval_base)
                                #if(quest!=null&&quest.IsMissionCompleteALL())
                                #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #privatevoidUpdateCompleteMissionCount(TrophyConditionTypestype,QuestParamquest=null)
                        #QuestTypesquestTypes
                        #switch(type)
                            #caseTrophyConditionTypes.complete_all_mission_count:
                            #this.TrophyAllQuestTypeCompleteCount(quest)
                            #return
                            #caseTrophyConditionTypes.complete_story_mission_count:
                            #questTypes=QuestTypes.Story
                            #break
                            #caseTrophyConditionTypes.complete_event_mission_count:
                            #questTypes=QuestTypes.Event
                            #break
                            #caseTrophyConditionTypes.complete_ordeal_mission_count:
                            #questTypes=QuestTypes.Ordeal
                            #break
                            #default:
                            #DebugUtility.LogError("指定できないミッションが設定されています。")
                            #return
                        #GameManagerinstance=MonoSingleton<GameManager>.Instance
                        #if(quest!=null)
                            #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(type)
                            #for(intindex1=trophiesOfType.Length-1index1>=0--index1)
                                #TrophyObjectivetrophyObjective=trophiesOfType[index1]
                                #if(questTypes==quest.type)
                                    #if(trophyObjective.sval!=null&&trophyObjective.sval.Count>0)
                                        #for(intindex2=0index2<trophyObjective.sval.Count++index2)
                                            #if(quest.Chapter!=null&&trophyObjective.sval[index2]==quest.Chapter.iname)
                                                #this.AddTrophyCounter(trophyObjective,1)
                                                #break
                                    #else
                                    #this.AddTrophyCounter(trophyObjective,1)
                        #else
                            #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(type)
                            #for(intindex1=trophiesOfType.Length-1index1>=0--index1)
                                #intnum=0
                                #TrophyObjectivetrophyObjective=trophiesOfType[index1]
                                #if(trophyObjective.sval!=null&&trophyObjective.sval.Count>0)
                                    #for(intindex2=0index2<instance.Quests.Length++index2)
                                        #if(questTypes==instance.Quests[index2].type&&instance.Quests[index2].IsMissionCompleteALL()&&instance.Quests[index2].Chapter!=null)
                                            #for(intindex3=0index3<trophyObjective.sval.Count++index3)
                                                #if(trophyObjective.sval[index3]==instance.Quests[index2].Chapter.iname)
                                                    #++num
                                                    #break
                                #else
                                    #for(intindex2=0index2<instance.Quests.Length++index2)
                                        #if(instance.Quests[index2].type==questTypes&&instance.Quests[index2].IsMissionCompleteALL())
                                        #++num
                                #this.SetTrophyCounter(trophyObjective,num)
                    #
                    #publicvoidUpdateViewNewsTrophy(stringurl)
                        #if(!url.Contains(Network.NewsHost))
                        #return
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.view_news)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                        #this.AddTrophyCounter(trophiesOfType,1)
                    #
                    #publicvoidRecordAllCompleteCheck(TrophyCategoryParamcategory)
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.view_news)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                        #this.AddTrophyCounter(trophiesOfType,1)
                    #
                    #publicvoidUpdateCompleteAllQuestCountTrophy2(QuestParamquestParam=null)
                        #CompleteQuestMapcompleteQuestMap=(CompleteQuestMap)null
                        #if(questParam==null)
                            #completeQuestMap=newCompleteQuestMap()
                            #completeQuestMap.LoadData()
                        #this.UpdateCompleteMissionCount2(TrophyConditionTypes.complete_story_mission_count,questParam,completeQuestMap)
                        #this.UpdateCompleteMissionCount2(TrophyConditionTypes.complete_event_mission_count,questParam,completeQuestMap)
                        #this.UpdateCompleteMissionCount2(TrophyConditionTypes.complete_ordeal_mission_count,questParam,completeQuestMap)
                        #this.UpdateCompleteMissionCount2(TrophyConditionTypes.complete_all_mission_count,questParam,completeQuestMap)
                    #
                    #privatevoidUpdateCompleteMissionCount2(TrophyConditionTypestype,QuestParamquest=null,CompleteQuestMapcompleteQuestMap=null)
                        #GameManagerinstance=MonoSingleton<GameManager>.Instance
                        #QuestTypeskey=QuestTypes.None
                        #boolflag=false
                        #switch(type)
                            #caseTrophyConditionTypes.complete_all_mission_count:
                            #if(quest==null)
                                #flag=true
                                #break
                            #this.TrophyAllQuestTypeCompleteCount(quest)
                            #return
                            #caseTrophyConditionTypes.complete_story_mission_count:
                            #key=QuestTypes.Story
                            #break
                            #caseTrophyConditionTypes.complete_event_mission_count:
                            #key=QuestTypes.Event
                            #break
                            #caseTrophyConditionTypes.complete_ordeal_mission_count:
                            #key=QuestTypes.Ordeal
                            #break
                            #default:
                            #DebugUtility.LogError("指定できないミッションが設定されています。")
                            #return
                        #if(quest!=null)
                            #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(type)
                            #for(intindex1=trophiesOfType.Length-1index1>=0--index1)
                                #TrophyObjectivetrophyObjective=trophiesOfType[index1]
                                #if(key==quest.type)
                                    #if(trophyObjective.sval!=null&&trophyObjective.sval.Count>0)
                                        #for(intindex2=0index2<trophyObjective.sval.Count++index2)
                                            #if(quest.Chapter!=null&&trophyObjective.sval[index2]==quest.Chapter.iname)
                                                #this.AddTrophyCounter(trophyObjective,1)
                                                #break
                                    #else
                                    #this.AddTrophyCounter(trophyObjective,1)
                        #else
                            #if(completeQuestMap==null)
                                #completeQuestMap=newCompleteQuestMap()
                                #completeQuestMap.LoadData()
                            #TrophyObjectivetrophiesOfType=instance.GetTrophiesOfType(type)
                            #if(flag)
                                #intallCount=completeQuestMap.GetAllCount()
                                #for(intindex=trophiesOfType.Length-1index>=0--index)
                                #this.SetTrophyCounter(trophiesOfType,allCount)
                            #else
                                #for(intindex1=trophiesOfType.Length-1index1>=0--index1)
                                    #TrophyObjectivetrophyObjective=trophiesOfType[index1]
                                    #intnum1=0
                                    #if(!string.IsNullOrEmpty(trophyObjective.sval_base))
                                        #for(intindex2=0index2<trophyObjective.sval.Count++index2)
                                            #CompleteQuestMap.CompleteQuestDatacompleteQuestData
                                            #completeQuestMap.mChapterMap.TryGetValue(trophyObjective.sval[index2],outcompleteQuestData)
                                            #if(completeQuestData!=null)
                                                #if(key!=completeQuestData.mQuestType)
                                                #DebugUtility.LogError("「"+trophyObjective.Param.iname+"」に指定されたチャプター「"+trophyObjective.sval[index2]+"」は指定のクエストタイプに存在しません。")
                                                #num1+=completeQuestData.mCount
                                        #this.SetTrophyCounter(trophyObjective,num1)
                                    #else
                                        #intnum2=0
                                        #completeQuestMap.mQuestTypeMap.TryGetValue(key,outnum2)
                                        #intnum3=num1+num2
                                        #this.SetTrophyCounter(trophyObjective,num3)
                    #
                    #publicvoidOnChallengeMissionComplete(stringtrophyID)
                        #foreach(TrophyParamtrophyinMonoSingleton<GameManager>.Instance.Trophies)
                            #if(trophy.IsChallengeMissionRoot&&trophy.iname==trophyID)
                            #this.AddTrophyCounter(trophy,0,1)
                    #
                    #publicvoidOnTowerScore(boolisNow=true)
                        #GameManagerinstance=MonoSingleton<GameManager>.Instance
                        #TowerResuponsetowerResuponse=instance.TowerResuponse
                        #if(towerResuponse==null||string.IsNullOrEmpty(towerResuponse.TowerID)||towerResuponse.speedRank==0&&towerResuponse.techRank==0)
                        #return
                        #intnum=instance.CalcTowerScore(isNow)
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.overtowerscore)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(num<=trophyObjective.ival&&(string.IsNullOrEmpty(trophyObjective.sval_base)||string.Equals(trophyObjective.sval_base,towerResuponse.TowerID)))
                            #this.SetTrophyCounter(trophyObjective,num)
                    #
                    #publicvoidOnReadTips(stringtrophyIname)
                        #foreach(TrophyObjectivetrophyObjectiveinMonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.read_tips))
                            #if(!(trophyObjective.sval_base!=trophyIname))
                            #this.AddTrophyCounter(trophyObjective,1)
                        #foreach(TrophyObjectivetrophyObjectiveinMonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.read_tips_count))
                        #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidUpdateVipDailyMission(intvipLv)
                    #
                    #publicvoidUpdateCardDailyMission()
                        #if((long)this.mVipExpiredAt==0L||TimeManager.FromUnixTime((long)this.mVipExpiredAt)<TimeManager.ServerTime)
                        #return
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.card)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #TrophyStatetrophyCounter=this.GetTrophyCounter(trophyObjective.Param,false)
                            #if(trophyCounter!=null&&!trophyCounter.IsCompleted)
                            #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #privatevoidResetPrevCheckHour()
                        #this.mPrevCheckHour=-1
                    #
                    #publicvoidUpdateStaminaDailyMission()
                        #if(!this.mUpdateInterval.PlayCheckUpdate())
                        #return
                        #inthour=TimeManager.ServerTime.Hour
                        #if(hour==this.mPrevCheckHour)
                        #return
                        #this.mUpdateInterval.SetUpdateInterval()
                        #this.mPrevCheckHour=hour
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.stamina)
                        #List<int>mealHours=MonoSingleton<WatchManager>.Instance.GetMealHours()
                        #for(intindex1=trophiesOfType.Length-1index1>=0--index1)
                            #TrophyObjectivetrophyObjective=trophiesOfType[index1]
                            #TrophyStatetrophyCounter=this.GetTrophyCounter(trophyObjective.Param,false)
                            #if(trophyCounter!=null&&!trophyCounter.IsCompleted)
                                #intnum1=int.Parse(trophyObjective.sval_base.Substring(0,2))
                                #intnum2=int.Parse(trophyObjective.sval_base.Substring(3,2))
                                #if(num1<=hour&&hour<num2)
                                #this.AddTrophyCounter(trophyObjective,1)
                                #if(mealHours!=null)
                                    #for(intindex2=0index2<mealHours.Count++index2)
                                        #if(num1<=mealHours[index2]&&mealHours[index2]<num2)
                                        #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidUpdateArtifactTrophyStates()
                        #if(this.mArtifacts.Count<1)
                        #return
                        #intnum=1
                        #Dictionary<string,ArtifactData>dictionary=newDictionary<string,ArtifactData>()
                        #for(intindex=0index<this.mArtifacts.Count++index)
                            #ArtifactDatamArtifact=this.mArtifacts
                            #if(mArtifact!=null)
                                #num=Mathf.Max(num,(int)mArtifact.Lv)
                                #if(mArtifact.ArtifactParam!=null)
                                    #if(!dictionary.ContainsKey(mArtifact.ArtifactParam.iname))
                                    #dictionary.Add(mArtifact.ArtifactParam.iname,mArtifact)
                                    #elseif((int)dictionary[mArtifact.ArtifactParam.iname].Lv<(int)mArtifact.Lv)
                                    #dictionary[mArtifact.ArtifactParam.iname]=mArtifact
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.makeartifactlevel)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #if(string.IsNullOrEmpty(trophiesOfType.sval_base))
                            #this.SetTrophyCounter(trophiesOfType,num)
                            #elseif(dictionary.ContainsKey(trophiesOfType.sval_base))
                            #this.SetTrophyCounter(trophiesOfType,(int)dictionary[trophiesOfType.sval_base].Lv)
                    #
                    #publicvoidUpdatePlayerTrophyStates()
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.playerlv)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(this.Lv>=trophyObjective.ival)
                            #this.AddTrophyCounter(trophyObjective,1)
                    #
                    #publicvoidUpdateArenaRankTrophyStates(intcurrentRank=-1,intbestRank=-1)
                        #if(currentRank==-1)
                        #currentRank=this.ArenaRank
                        #if(bestRank==-1)
                        #bestRank=this.ArenaRankBest
                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.becomearenarank)
                        #for(intindex=trophiesOfType1.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType1
                            #if(currentRank==trophyObjective.ival||bestRank==trophyObjective.ival)
                            #this.SetTrophyCounter(trophyObjective,trophyObjective.ival)
                        #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.overarenarank)
                        #for(intindex=trophiesOfType2.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType2
                            #if(bestRank<=trophyObjective.ival)
                            #this.SetTrophyCounter(trophyObjective,bestRank)
                    #
                    #publicvoidUpdateTowerTrophyStates()
                        #this.OnTowerScore(false)
                    #
                    #publicvoidUpdateVersusTowerTrophyStates(stringtowerName,intcurrentFloor)
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.overvsrankfloor)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if((string.IsNullOrEmpty(trophyObjective.sval_base)||string.Equals(trophyObjective.sval_base,towerName))&&currentFloor>=trophyObjective.ival)
                            #this.SetTrophyCounter(trophyObjective,currentFloor)
                    #
                    #publicvoidClearNewItemFlags()
                        #for(intindex=this.mItems.Count-1index>=0--index)
                            #if(this.mItems!=null)
                            #this.mItems.IsNew=false
                    #
                    #publicvoidClearItemFlags(ItemData.ItemFlagsflags)
                        #if(flags==(ItemData.ItemFlags)0)
                        #return
                        #for(intindex=this.mItems.Count-1index>=0--index)
                            #if(this.mItems!=null)
                            #this.mItems.ResetFlag(flags)
                    #
                    #publicboolItemEntryExists(stringiname)
                        #returnthis.mID2ItemData.ContainsKey(iname)
                    #
                    #publicvoidClearUnits()
                        #if(this.mUnits!=null)
                        #this.mUnits.Clear()
                        #if(this.mUniqueID2UnitData==null)
                        #return
                        #this.mUniqueID2UnitData.Clear()
                    #
                    #publicvoidClearItems()
                        #if(this.mItems!=null)
                        #this.mItems.Clear()
                        #if(this.mID2ItemData==null)
                        #return
                        #this.mID2ItemData.Clear()
                    #
                    #publicvoidClearArtifacts()
                        #this.mArtifacts.Clear()
                        #this.mArtifactsNumByRarity.Clear()
                    #
                    #publicvoidOfflineSellArtifacts(ArtifactDataartifacts)
                        #if(artifacts==null)
                        #return
                        #for(intindex=0index<artifacts.Length++index)
                            #this.RemoveArtifact(artifacts)
                            #this.GainGold(artifacts.ArtifactParam.sell)
                    #
                    #publicvoidUpdateArtifactOwner()
                        #for(intindex1=0index1<this.mUnits.Count++index1)
                            #if(this.mUnits[index1].Jobs!=null)
                                #for(intindex2=0index2<this.mUnits[index1].Jobs.Length++index2)
                                    #if(this.mUnits[index1].Jobs[index2]!=null&&this.mUnits[index1].Jobs[index2].ArtifactDatas!=null)
                                        #for(intindex3=0index3<this.mUnits[index1].Jobs[index2].ArtifactDatas.Length++index3)
                                        #this.mUnits[index1].Jobs[index2].ArtifactDatas[index3]=(ArtifactData)null
                        #for(intindex=0index<this.mArtifacts.Count++index)
                            #ArtifactDatamArtifact=this.mArtifacts
                            #if(mArtifact!=null&&(long)mArtifact.UniqueID!=0L)
                                #UnitDataunit=(UnitData)null
                                #JobDatajob=(JobData)null
                                #if(this.FindOwner(mArtifact,outunit,outjob))
                                    #intjob_index=Array.IndexOf<JobData>(unit.Jobs,job)
                                    #if(job_index!=-1)
                                        #for(intslot=0slot<job.Artifacts.Length++slot)
                                            #if((long)mArtifact.UniqueID==job.Artifacts[slot])
                                                #unit.SetEquipArtifactData(job_index,slot,mArtifact,unit.JobIndex==job_index)
                                                #if(unit.JobIndex!=job_index)
                                                    #unit.UpdateArtifact(unit.JobIndex,true,false)
                                                    #break
                                                #break
                    #
                    #publicboolIsBeginner()
                        #return(double)(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.BeginnerDays>newTimeSpan(TimeManager.FromUnixTime(Network.GetServerTime()).Ticks).TotalDays-newTimeSpan(TimeManager.FromUnixTime((long)(int)this.mNewGameAt).Ticks).TotalDays
                    #
                    #publicDateTimeGetBeginnerEndTime()
                        #returnTimeManager.FromUnixTime((long)(int)this.mNewGameAt).AddDays((double)(int)MonoSingleton<GameManager>.Instance.MasterParam.FixParam.BeginnerDays)
                    #
                    #publicDictionary<ItemParam,int>CreateItemSnapshot()
                        #Dictionary<ItemParam,int>dictionary=newDictionary<ItemParam,int>()
                        #for(intindex=0index<this.mItems.Count++index)
                        #dictionary[this.mItems.Param]=this.mItems.NumNonCap
                        #returndictionary
                    #
                    #publicvoidGainPiecePoint(intpoint)
                        #this.mPiecePoint=(OInt)Math.Max((int)this.mPiecePoint+point,0)
                    #
                    #publicstringDequeueNextLoginBonusTableID()
                        #if(this.mLoginBonusQueue.Count<1)
                        #return(string)null
                        #returnthis.mLoginBonusQueue.Dequeue()
                    #
                    #publicboolHasQueuedLoginBonus
                        #get
                            #returnthis.mLoginBonusQueue.Count>0
                    #
                    #publicvoidUpdateUnitTrophyStates(boolverbose)
                        #intnum1=0
                        #intnum2=0
                        #intnum3=0
                        #intnum4=0
                        #intnum5=0
                        #MasterParammasterParam=MonoSingleton<GameManager>.Instance.MasterParam
                        #for(intindex1=0index1<this.mUnits.Count++index1)
                            #UnitDatamUnit=this.mUnits[index1]
                            #if(mUnit!=null)
                                #num1+=mUnit.Lv
                                #++num2
                                #JobDatajobs=mUnit.Jobs
                                #if(jobs!=null)
                                    #for(intindex2=0index2<jobs.Length++index2)
                                        #if(jobs[index2]!=null)
                                            #if(jobs[index2].Rank>=11)
                                                #++num3
                                                #break
                                            #if(jobs[index2].Rank>0)
                                                #JobSetParamjobSetFast=mUnit.UnitParam.GetJobSetFast(index2)
                                                #if(jobSetFast!=null&&!string.IsNullOrEmpty(jobSetFast.jobchange))
                                                    #JobSetParamjobSetParam=masterParam.GetJobSetParam(jobSetFast.jobchange)
                                                    #if(jobSetParam!=null&&jobSetParam.job==jobs[index2].JobID)
                                                        #++num3
                                                        #break
                                #if(mUnit.UnitParam!=null&&mUnit.Rarity-(int)mUnit.UnitParam.rare>0)
                                #++num4
                                #num5+=mUnit.AwakeLv
                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.collectunits)
                        #for(intindex=trophiesOfType1.Length-1index>=0--index)
                            #if(trophiesOfType1.ival<=num2)
                            #this.AddTrophyCounter(trophiesOfType1,1)
                        #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.totaljoblv11)
                        #for(intindex=trophiesOfType2.Length-1index>=0--index)
                            #if(trophiesOfType2.ival<=num3)
                            #this.AddTrophyCounter(trophiesOfType2,1)
                        #TrophyObjectivetrophiesOfType3=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.totalunitlvs)
                        #for(intindex=trophiesOfType3.Length-1index>=0--index)
                            #if(trophiesOfType3.ival<=num1)
                            #this.AddTrophyCounter(trophiesOfType3,1)
                        #TrophyObjectivetrophiesOfType4=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evoltiontimes)
                        #for(intindex=trophiesOfType4.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType4
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base))
                            #this.SetTrophyCounter(trophyObjective,num4)
                        #TrophyObjectivetrophiesOfType5=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak)
                        #for(intindex=trophiesOfType5.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType5
                            #if(string.IsNullOrEmpty(trophyObjective.sval_base))
                            #this.SetTrophyCounter(trophyObjective,num5)
                        #if(!verbose)
                        #return
                        #for(intindex1=0index1<this.mUnits.Count++index1)
                            #UnitDatamUnit=this.mUnits[index1]
                            #if(mUnit==null||mUnit.UnitParam==null)
                            #break
                            #stringiname=mUnit.UnitParam.iname
                            #this.OnUnitLevelChange(iname,0,mUnit.Lv,true)
                            #JobDatajobs=mUnit.Jobs
                            #if(jobs!=null)
                                #for(intindex2=0index2<jobs.Length++index2)
                                #this.OnJobLevelChange(iname,jobs[index2].JobID,jobs[index2].Rank,true,1)
                            #this.OnUnitLevelAndJobLevelChange(iname,mUnit.Lv,mUnit.Jobs)
                            #List<AbilityData>learnAbilitys=mUnit.LearnAbilitys
                            #for(intindex2=0index2<learnAbilitys.Count++index2)
                            #this.OnAbilityPowerUp(iname,learnAbilitys[index2].AbilityID,learnAbilitys[index2].Rank,true)
                            #if(mUnit.Rarity>(int)mUnit.UnitParam.rare)
                            #this.OnEvolutionCheck(iname,mUnit.Rarity,(int)mUnit.UnitParam.rare)
                            #this.OnLimitBreakCheck(iname,mUnit.AwakeLv)
                    #
                    #publicvoidOnEvolutionCheck(stringunitID,intrarity,intinitialRarity)
                        #TrophyObjectivetrophiesOfType1=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evolutionnum)
                        #for(intindex=trophiesOfType1.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType1
                            #if(trophyObjective.sval_base==unitID&&trophyObjective.ival<=rarity)
                            #this.AddTrophyCounter(trophyObjective,1)
                        #intnum=rarity-initialRarity
                        #if(num<1)
                        #return
                        #TrophyObjectivetrophiesOfType2=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.evoltiontimes)
                        #for(intindex=trophiesOfType2.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType2
                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&trophyObjective.sval_base==unitID)
                            #this.SetTrophyCounter(trophyObjective,num)
                    #
                    #publicvoidOnLimitBreakCheck(stringunitID,intawake)
                        #if(awake<=0)
                        #return
                        #TrophyObjectivetrophiesOfType=MonoSingleton<GameManager>.Instance.GetTrophiesOfType(TrophyConditionTypes.limitbreak)
                        #for(intindex=trophiesOfType.Length-1index>=0--index)
                            #TrophyObjectivetrophyObjective=trophiesOfType
                            #if(!string.IsNullOrEmpty(trophyObjective.sval_base)&&trophyObjective.sval_base==unitID)
                            #this.SetTrophyCounter(trophyObjective,awake)
                    #
                    #publicvoidSetupEventCoin()
                        #if(this.mEventCoinList.Count!=0||MonoSingleton<GameManager>.Instance.MasterParam.Items==null)
                        #return
                        #List<ItemParam>items=MonoSingleton<GameManager>.Instance.MasterParam.Items
                        #for(intindex=0index<items.Count++index)
                            #if(items.type==EItemType.EventCoin)
                            #this.mEventCoinList.Add(newEventCoinData()
                                #iname=items.iname,
                                #param=items
                                #})
                        #
                        #publicvoidUpdateEventCoin()
                            #this.SetupEventCoin()
                            #for(inti=0i<this.mEventCoinList.Count++i)
                                #ItemDataitemData=MonoSingleton<GameManager>.Instance.Player.Items.Find((Predicate<ItemData>)(f=>f.Param.iname.Equals(this.mEventCoinList[i].iname)))
                                #if(itemData!=null)
                                #this.mEventCoinList[i].have=itemData
                        #
                        #publicintEventCoinNum(stringcost_iname)
                            #if(cost_iname==null)
                            #return0
                            #EventCoinDataeventCoinData=this.mEventCoinList.Find((Predicate<EventCoinData>)(f=>f.iname.Equals(cost_iname)))
                            #if(eventCoinData!=null&&eventCoinData.have!=null)
                            #returneventCoinData.have.Num
                            #return0
                        #
                        #publicvoidSetEventCoinNum(stringcost_iname,intnum)
                            #if(cost_iname==null)
                            #return
                            #MonoSingleton<GameManager>.Instance.Player.Items.Find((Predicate<ItemData>)(f=>f.Param.iname.Equals(cost_iname)))?.SetNum(num)
                        #
                        #publicvoidSetVersusPlacement(stringkey,intidx)
                            #PlayerPrefsUtility.SetInt(key,idx,false)
                        #
                        #publicintGetVersusPlacement(stringkey)
                            #returnPlayerPrefsUtility.GetInt(key,0)
                        #
                        #publicvoidSetTowerMatchInfo(intfloor,intkey,intwincnt,boolgift)
                            #this.mVersusTwFloor=floor
                            #this.mVersusTwKey=key
                            #this.mVersusTwWinCnt=wincnt
                            #this.mVersusSeasonGift=gift
                        #
                        #publicvoidSetRankMatchInfo(int_rank,int_score,RankMatchClass_class,int_battle_point,int_streak_win,int_wincnt,int_losecnt)
                            #this.mRankMatchOldClass=this.mRankMatchClass
                            #this.mRankMatchOldRank=this.mRankMatchRank
                            #this.mRankMatchOldScore=this.mRankMatchScore
                            #this.mRankMatchRank=_rank
                            #this.mRankMatchScore=_score
                            #this.mRankMatchClass=_class
                            #this.mRankMatchBattlePoint=_battle_point
                            #this.mRankMatchStreakWin=_streak_win
                            #this.RankMatchWinCount=_wincnt
                            #this.RankMatchLoseCount=_losecnt
                        #
                        #publicboolIsHaveAward(stringaward)
                            #if(this.mHaveAward==null)
                            #returnfalse
                            #returnthis.mHaveAward.Contains(award)
                        #
                        #publicvoidUpdateAchievementTrophyStates()
                            #if(this.mTrophyStatesInameDict==null)
                            #return
                            #List<AchievementParam>achievementData=GameCenterManager.GetAchievementData()
                            #if(achievementData==null||achievementData.Count<1)
                            #return
                            #for(intindex=0index<achievementData.Count++index)
                                #AchievementParamachievementParam=achievementData
                                #List<TrophyState>trophyStateList
                                #if(this.mTrophyStatesInameDict.TryGetValue(achievementParam.iname,outtrophyStateList)&&trophyStateList[0].IsCompleted)
                                #GameCenterManager.SendAchievementProgress(achievementParam)
                        #
                        #publicvoidSetWishList(stringiname,intpriority)
                            #this.FriendPresentWishList.Set(iname,priority)
                        #
                        #publicvoidSetQuestListDirty()
                            #this.mQuestListDirty=true
                        #
                        #publicList<ConceptCardData>ConceptCards
                            #get
                                #returnthis.mConceptCards
                        #
                        #publicList<ConceptCardMaterialData>ConceptCardExpMaterials
                            #get
                                #returnthis.mConceptCardExpMaterials
                        #
                        #publicList<ConceptCardMaterialData>ConceptCardTrustMaterials
                            #get
                                #returnthis.mConceptCardTrustMaterials
                        #
                        #publicList<SkinConceptCardData>SkinConceptCards
                            #get
                                #returnthis.mSkinConceptCards
                        #
                        #publicConceptCardDataFindConceptCardByUniqueID(longiid)
                            #returnthis.mConceptCards.Find((Predicate<ConceptCardData>)(card=>(long)card.UniqueID==iid))
                        #
                        #publicvoidRemoveConceptCardData(longiids)
                            #this.mConceptCards.RemoveAll((Predicate<ConceptCardData>)(card=>
                                #for(intindex=0index<iids.Length++index)
                                    #if((long)card.UniqueID==iids)
                                    #returntrue
                                #returnfalse
                                #}))
                                #for(inti=0i<iids.Length++i)
                                    #UnitDataunitData=this.Units.Find((Predicate<UnitData>)(ud=>
                                        #if(ud.ConceptCard!=null)
                                        #return(long)ud.ConceptCard.UniqueID==iids[i]
                                        #returnfalse
                                        #}))
                                        #if(unitData!=null)
                                        #unitData.ConceptCard=(ConceptCardData)null
                                    #this.UpdateConceptCardNum()
                                #
                                #publicvoidUpdateConceptCardNum()
                                    #this.mConceptCardNum.Clear()
                                    #for(intindex1=0index1<this.mConceptCards.Count++index1)
                                        #stringiname=this.mConceptCards[index1].Param.iname
                                        #if(this.mConceptCardNum.ContainsKey(iname))
                                            #Dictionary<string,int>mConceptCardNum
                                            #stringindex2
                                            #(mConceptCardNum=this.mConceptCardNum)[index2=iname]=mConceptCardNum[index2]+1
                                        #else
                                        #this.mConceptCardNum.Add(iname,1)
                                #
                                #publicvoidUpdateConceptCardNum(stringinames)
                                    #this.mConceptCardNum.Clear()
                                    #for(intindex1=0index1<inames.Length++index1)
                                        #stringiname=inames[index1]
                                        #if(this.mConceptCardNum.ContainsKey(iname))
                                            #Dictionary<string,int>mConceptCardNum
                                            #stringindex2
                                            #(mConceptCardNum=this.mConceptCardNum)[index2=iname]=mConceptCardNum[index2]+1
                                        #else
                                        #this.mConceptCardNum.Add(iname,1)
                                #
                                #publicintGetConceptCardNum(stringiname)
                                    #intnum=0
                                    #this.mConceptCardNum.TryGetValue(iname,outnum)
                                    #returnnum
                                #
                                #publicintGetConceptCardMaterialNum(stringiname)
                                    #intnum=0
                                    #ConceptCardParamconceptCardParam=MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam(iname)
                                    #if(conceptCardParam==null)
                                    #returnnum
                                    #ConceptCardMaterialDatacardMaterialData=(ConceptCardMaterialData)null
                                    #if(conceptCardParam.type==eCardType.Enhance_exp)
                                    #cardMaterialData=this.mConceptCardExpMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==iname))
                                    #elseif(conceptCardParam.type==eCardType.Enhance_trust)
                                    #cardMaterialData=this.mConceptCardTrustMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==iname))
                                    #if(cardMaterialData!=null)
                                    #num=(int)cardMaterialData.Num
                                    #returnnum
                                #
                                #publicOLongGetConceptCardMaterialUniqueID(stringiname)
                                    #OLongolong=(OLong)-1L
                                    #ConceptCardParamconceptCardParam=MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam(iname)
                                    #if(conceptCardParam==null)
                                    #returnolong
                                    #ConceptCardMaterialDatacardMaterialData=(ConceptCardMaterialData)null
                                    #if(conceptCardParam.type==eCardType.Enhance_exp)
                                    #cardMaterialData=this.mConceptCardExpMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==iname))
                                    #elseif(conceptCardParam.type==eCardType.Enhance_trust)
                                    #cardMaterialData=this.mConceptCardTrustMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==iname))
                                    #if(cardMaterialData!=null)
                                    #olong=cardMaterialData.UniqueID
                                    #returnolong
                                #
                                #publicintGetEnhanceConceptCardMaterial()
                                    #intnum=0
                                    #if(this.mConceptCardExpMaterials!=null)
                                    #num+=this.mConceptCardExpMaterials.Count
                                    #if(this.mConceptCardTrustMaterials!=null)
                                    #num+=this.mConceptCardTrustMaterials.Count
                                    #returnnum
                                #
                                #publicvoidOverWriteConceptCardMaterials(JSON_ConceptCardMaterialconcept_card_materials)
                                    #if(concept_card_materials==null)
                                    #return
                                    #ConceptCardMaterialDatacardMaterialData=(ConceptCardMaterialData)null
                                    #for(intindex=0index<concept_card_materials.Length++index)
                                        #ConceptCardParamparam=MonoSingleton<GameManager>.Instance.MasterParam.GetConceptCardParam(concept_card_materials.iname)
                                        #if(param!=null)
                                            #if(param.type==eCardType.Enhance_exp)
                                                #cardMaterialData=this.mConceptCardExpMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==param.iname))
                                                #if(cardMaterialData!=null)
                                                #cardMaterialData.Num=(OInt)concept_card_materials.num
                                            #elseif(param.type==eCardType.Enhance_trust)
                                                #cardMaterialData=this.mConceptCardTrustMaterials.Find((Predicate<ConceptCardMaterialData>)(p=>(string)p.IName==param.iname))
                                                #if(cardMaterialData!=null)
                                                #cardMaterialData.Num=(OInt)concept_card_materials.num
                                            #if((int)cardMaterialData.Num==0)
                                                #if(param.type==eCardType.Enhance_exp)
                                                #this.mConceptCardExpMaterials.Remove(cardMaterialData)
                                                #elseif(param.type==eCardType.Enhance_trust)
                                                #this.mConceptCardTrustMaterials.Remove(cardMaterialData)
                                #
                                #publicvoidSetConceptCardNum(stringiname,intvalue)
                                    #if(this.mConceptCardNum.ContainsKey(iname))
                                    #this.mConceptCardNum[iname]=value
                                    #else
                                    #this.mConceptCardNum.Add(iname,value)
                                #
                                #publicvoidOnDirtyConceptCardData()
                                    #GlobalVars.IsDirtyConceptCardData.Set(true)
                                    #GlobalVars.IsDirtySkinConceptCardData.Set(true)
                                #
                                #publicboolIsHaveHealAPItems()
                                    #boolflag=false
                                    #List<ItemData>list=this.Items.Where<ItemData>((Func<ItemData,bool>)(x=>x.ItemType==EItemType.ApHeal)).ToList<ItemData>()
                                    #if(list!=null)
                                        #for(intindex=0index<list.Count++index)
                                            #if(list.Num>0)
                                                #flag=true
                                                #break
                                    #returnflag
                                #
                                #publicboolIsHaveConceptCardExpMaterial()
                                    #if(this.mConceptCardExpMaterials==null||this.mConceptCardExpMaterials.Count==0)
                                    #returnfalse
                                    #boolflag=false
                                    #List<ConceptCardMaterialData>all=this.mConceptCardExpMaterials.FindAll((Predicate<ConceptCardMaterialData>)(p=>(int)p.Num>0))
                                    #if(all!=null&&all.Count>0)
                                    #flag=true
                                    #returnflag
                                #
                                #publicboolIsHaveConceptCardTrustMaterial()
                                    #if(this.mConceptCardTrustMaterials==null||this.mConceptCardTrustMaterials.Count==0)
                                    #returnfalse
                                    #boolflag=false
                                    #List<ConceptCardMaterialData>all=this.mConceptCardTrustMaterials.FindAll((Predicate<ConceptCardMaterialData>)(p=>(int)p.Num>0))
                                    #if(all!=null&&all.Count>0)
                                    #flag=true
                                    #returnflag
                                #
                                #publicvoidSetTowerFloorResetCoin(ReqTowerFloorReset.Json_Responseresult)
                                    #if(result==null)
                                    #return
                                    #this.mFreeCoin=(OInt)result.coin.free
                                    #this.mPaidCoin=(OInt)result.coin.paid
                                    #this.mComCoin=(OInt)result.coin.com
                                #
                                #publicboolSetPremiumLoginBonus(Json_LoginBonusTableloginbonus)
                                    #if(loginbonus==null||string.IsNullOrEmpty(loginbonus.type))
                                    #returntrue
                                    #this.mLoginBonusTables[loginbonus.type]=loginbonus
                                    #this.mPremiumLoginBonus=loginbonus
                                    #returntrue
                                #
                                #[System.Flags]
                                #publicenumEDeserializeFlags
                                    #None=0,
                                    #Gold=1,
                                    #Coin=2,
                                    #Stamina=4,
                                    #Cave=8,
                                    #AbilityUp=16,//0x00000010
                                    #Arena=32,//0x00000020
                                    #Tour=64,//0x00000040
                                #
                                #publicclassJson_InitData
                                    #publicPlayerData.Json_InitUnitsunits
                                    #publicPlayerData.Json_InitItemsitems
                                    #publicPlayerData.Json_InitPartyparty
                                    #publicPlayerData.Json_InitUnitsfriends
                                #
                                #publicclassJson_FriendData
                                    #publicJson_Unitfriends
                                #
                                #publicclassJson_InitUnits
                                    #publicstringiname
                                    #publicintexp
                                    #publicstringskills
                                #
                                #publicclassJson_InitItems
                                    #publicstringiname
                                    #publicintnum
                                #
                                #publicclassJson_InitParty
                                    #publicPlayerData.Json_InitPartyUnitunits
                                #
                                #publicclassJson_InitPartyUnit
                                    #publicintiid
                                    #publicintleader
                                #
                                #privateclassJSON_TrophyState
                                    #publicstringid=string.Empty
                                    #publicintcnt
                                    #publiclongst
                                    #publicintfin
                        #
return this
